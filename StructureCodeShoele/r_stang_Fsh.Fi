!========================================================================
!          F I B R O U S   S H E L L   S T R U C T U R E
!=======================================================================
       if(Genalpha_timesolver(ibdyg) .eq. 0) then
           ibdy=Iglbloc_fsh(ibdyg)
           i=ibdy
           i2g=ibdyg
           do jq=1,nq_ibm_r_fsh(i)
           do j=1,ns_ibm_r_fsh(i)
               GXtmp(1,jq,j)=gx_ibm_massive_fsh(i,jq,j)
               GXtmp(2,jq,j)=gy_ibm_massive_fsh(i,jq,j)
               GXtmp(3,jq,j)=gz_ibm_massive_fsh(i,jq,j)
           enddo
           enddo

          fibm1pres_fsh=0.0
          fibm2pres_fsh=0.0
          fibm3pres_fsh=0.0
          if(Electromechanical(i2g)) then 
           if(.not. allocated(vnPiezo_fsh)) 
     &         allocate (vnPiezo_fsh(3,nq_ibm_fsh,ns_ibm_fsh)) 
           vnPiezo_fsh=0.0
           if(Piezo_Formulation_Flag(i2g) .eq. 1) then 
             if(.not. allocated(VECpiezo_tmp)) 
     &         allocate (VECpiezo_tmp(3,30,nq_ibm_fsh,ns_ibm_fsh)) 
           endif
          endif


           do jq=1,nq_ibm_r_fsh(i)
            if (BoundaryFibShell_fsh(i,1,1) .eq. 3) then
             do j=1-(Ns_IBMB_fsh+1),0,1
               jbndy=ns_ibm_r_fsh(i)+j
               GXtmp(1:3,jq,j)=GXtmp(1:3,jq,jbndy)
             enddo
            else
             do j=0,1-(1+Ns_IBMB_fsh),-1

               jbndy=j+1
               GXtmp(1:3,jq,j)=
     &            2.0*GXtmp(1:3,jq,jbndy)-GXtmp(1:3,jq,jbndy+1)
             enddo 
            endif
            if (BoundaryFibShell_fsh(i,1,2) .eq. 3) then
             do j=ns_ibm_r_fsh(i)+1,ns_ibm_r_fsh(i)+(1+Ns_IBMB_fsh),1
               jbndy=-ns_ibm_r_fsh(i)+j
               GXtmp(1:3,jq,j)=GXtmp(1:3,jq,jbndy)
             enddo
            else
             do j=ns_ibm_r_fsh(i)+1,ns_ibm_r_fsh(i)+(1+Ns_IBMB_fsh),1
               jbndy=j-1
               GXtmp(1:3,jq,j)=
     &            2.0*GXtmp(1:3,jq,jbndy)-GXtmp(1:3,jq,jbndy-1)
             enddo 
            endif
          enddo


           do j=1-(1+Ns_IBMB_fsh),ns_ibm_r_fsh(i)+(1+Ns_IBMB_fsh)
            if (BoundaryFibShell_fsh(i,2,1) .eq. 3) then
             do jq=1-(Nq_IBMB_fsh+1),0,1
               jqbndy=nq_ibm_r_fsh(i)+jq
               GXtmp(1:3,jq,j)=GXtmp(1:3,jqbndy,j)
             enddo
            else
             do jq=0,1-(Nq_IBMB_fsh+1),-1
               jqbndy=jq+1
               GXtmp(1:3,jq,j)=
     &            2.0*GXtmp(1:3,jqbndy,j)-GXtmp(1:3,jqbndy+1,j)
             enddo 
            endif
            if (BoundaryFibShell_fsh(i,2,2) .eq. 3) then
             do jq=nq_ibm_r_fsh(i)+1,nq_ibm_r_fsh(i)+(Nq_IBMB_fsh+1),1
               jqbndy=-nq_ibm_r_fsh(i)+jq
               GXtmp(1:3,jq,j)=GXtmp(1:3,jqbndy,j)
             enddo
            else
             do jq=nq_ibm_r_fsh(i)+1,nq_ibm_r_fsh(i)+(Nq_IBMB_fsh+1),1
               jqbndy=jq-1
               GXtmp(1:3,jq,j)=
     &            2.0*GXtmp(1:3,jqbndy,j)-GXtmp(1:3,jqbndy-1,j)
             enddo 
            endif
          enddo

           i=ibdy


           do jq=1,nq_ibm_r_fsh(i)
              jq_pm(2)=jq+1
              jq_pm(1)=jq-1
              if(jq.eq. nq_ibm_r_fsh(i)) then
                 if (BoundaryFibShell_fsh(i,2,2) .eq. 3) then
                    jqbndy=jq
                 else
                    jqbndy=1
                 endif 
                 jq_pm(2)=jqbndy
              elseif(jq.eq. 1) then
                 if (BoundaryFibShell_fsh(i,2,1) .eq. 3) then
                    jqbndy=nq_ibm_r_fsh(i)
                 else
                    jqbndy=jq
                 endif 
                 jq_pm(1)=jqbndy
              endif
           do j=1,ns_ibm_r_fsh(i)
              j_pm(2)=j+1
              j_pm(1)=j-1
              if(j.eq. ns_ibm_r_fsh(i)) then
                 if (BoundaryFibShell_fsh(i,1,2) .eq. 3) then
                    jbndy=j
                 else
                    jbndy=1
                 endif 
                 j_pm(2)=jbndy
              elseif(j.eq. 1) then
                 if (BoundaryFibShell_fsh(i,1,1) .eq. 3) then
                    jbndy=ns_ibm_r_fsh(i)
                 else
                    jbndy=j
                 endif
                 j_pm(1)=jbndy 
              endif

              DX_ip_j(1:3)=
     &         (GXtmp(1:3,jq+1,j)-GXtmp(1:3,jq,j))/dsf_IBM_fsh(i,jq,j)   !x+1/2,y

              do noi=1,nMem_Coef_fsh(i)
              kmem_i_j(noi,1)=
     &         (Mem_Coef_fsh(i,jq      ,j,noi)
     &         +Mem_Coef_fsh(i,jq_pm(2),j,noi))/2.0
              kmem_i_j(noi,2)=
     &         (Mem_Coef_fsh(i,jq,j      ,noi)
     &         +Mem_Coef_fsh(i,jq,j_pm(2),noi))/2.0
              kmem_i_j(noi,3)=
     &         (Mem_Coef_fsh(i,jq      ,j      ,noi)
     &         +Mem_Coef_fsh(i,jq_pm(2),j      ,noi)
     &         +Mem_Coef_fsh(i,jq      ,j_pm(2),noi)
     &         +Mem_Coef_fsh(i,jq_pm(2),j_pm(2),noi))/4.0
              enddo

              do noi=1,1
               kbend_i_j=
     &         (Ben_Coef_fsh(i,jq      ,j      ,3)
     &         +Ben_Coef_fsh(i,jq_pm(2),j      ,3)
     &         +Ben_Coef_fsh(i,jq      ,j_pm(2),3)
     &         +Ben_Coef_fsh(i,jq_pm(2),j_pm(2),3))/4.0
              enddo

              if(e4coef(i2g) .ge. 0.0) then
              DX_im_j(1:3)=
     &         (GXtmp(1:3,jq,j)-GXtmp(1:3,jq-1,j))/dsf_IBM_fsh(i,jq-1,j) !x-1/2,y

              DX_i_jp(1:3)=
     &         (GXtmp(1:3,jq+1,j+1)-GXtmp(1:3,jq,j+1))
     &                     /dsf_IBM_fsh(i,jq,j+1)                       !x+1/2,y+1

              DX_im_jp(1:3)=
     &         (GXtmp(1:3,jq,j+1)-GXtmp(1:3,jq-1,j+1))
     &                     /dsf_IBM_fsh(i,jq-1,j+1)                     !x-1/2,y+1


              DX_i_jm(1:3)=0.25*(
     &          DX_ip_j(1:3)+DX_im_j(1:3)+DX_i_jp(1:3)+DX_im_jp(1:3) )   !x,y+1/2



              DY_i_jp(1:3)=
     &         (GXtmp(1:3,jq,j+1)-GXtmp(1:3,jq,j))/dsf2_IBM_fsh(i,jq,j) !x,y+1/2

              DY_i_jm(1:3)=
     &         (GXtmp(1:3,jq,j)-GXtmp(1:3,jq,j-1))
     &                     /dsf2_IBM_fsh(i,jq,j-1)                      !x,y-1/2

              DY_ip_j(1:3)=
     &        (GXtmp(1:3,jq+1,j+1)-GXtmp(1:3,jq+1,j))
     &                     /dsf2_IBM_fsh(i,jq+1,j)                      !x+1,y+1/2

              DY_ip_jm(1:3)=
     &        (GXtmp(1:3,jq+1,j)-GXtmp(1:3,jq+1,j-1))
     &                     /dsf2_IBM_fsh(i,jq+1,j-1)                    !x+1,y-1/2 

              DY_im_j(1:3)=0.25*(
     &         DY_i_jp(1:3)+DY_i_jm(1:3)+DY_ip_j(1:3)+DY_ip_jm(1:3) )   !x+1/2,y


                 if(e4coef(i2g) .lt. 50.0) then              
                     Siga(jq,j,1,1)=kmem_i_j(1,1)
     &              *( 
     &           (1.0-1.0/sqrt(dot_product(DX_ip_j(1:3),DX_ip_j(1:3))))
     &              +e4coef(i2g)
     &          *(1.0-1.0/sqrt(dot_product(DY_im_j(1:3),DY_im_j(1:3))))        
     &                  -Tzero_fsh(i,jq,j,1,1)  )
                 elseif(e4coef(i2g) .le. 100.0) then   
                     temp_ibm3= e4coef(i2g)-50.0          
                     Siga(jq,j,1,1)=kmem_i_j(1,1)
     &              *( 
     &           (1.0-1.0/sqrt(dot_product(DX_ip_j(1:3),DX_ip_j(1:3))))
     &             +temp_ibm3
     &          *( (sqrt(dot_product(DY_im_j(1:3),DY_im_j(1:3)))-1.0)        
     &            /(sqrt(dot_product(DX_ip_j(1:3),DX_ip_j(1:3)))) )
     &                  -Tzero_fsh(i,jq,j,1,1)  )
                 else
                     temp_ibm1=(dot_product(DX_ip_j(1:3),DX_ip_j(1:3))
     &                         -1.0)/2.0  
                     temp_ibm2=(dot_product(DY_im_j(1:3),DY_im_j(1:3))
     &                         -1.0)/2.0  
                     ksh_tmp=kmem_i_j(1,1)*temp_ibm1**2
     &                      +2.0*kmem_i_j(4,1)*temp_ibm1*temp_ibm2
     &                      +kmem_i_j(2,1)*temp_ibm2**2
                     Siga(jq,j,1,1)=kmem_i_j(5,1)*exp(ksh_tmp)
     &                             *( kmem_i_j(1,1)*temp_ibm1
     &                               +kmem_i_j(4,1)*temp_ibm2)
                 endif
               else  !(e4coef(i2g) .lt. 0.0)
                  Siga(jq,j,1,1)=kmem_i_j(1,1)
     &                       *(dot_product(DX_ip_j(1:3),DX_ip_j(1:3))
     &                         -Tzero_fsh(i,jq,j,1,1))

                  DX_im_j(1:3)=
     &                  (GXtmp(1:3,jq,j)-GXtmp(1:3,jq-1,j))
     &                  /dsf_IBM_fsh(i,jq-1,j)  
               endif
              if(MaterialTypeIBM(i2g).eq. 1) then
                  DXX_i_j(1:3)=( DX_ip_j(1:3)-DX_im_j(1:3))
     &                     /ds_ibm_fsh(i,jq,j)

                  gama(jq,j,1,1)=Ben_Coef_fsh(i,jq,j,1)
     &                       *(dot_product(DXX_i_j(1:3),DXX_i_j(1:3))
     &                         -Bzero_fsh(i,jq,j,1,1))
              else
                  gama(jq,j,1,1)=Ben_Coef_fsh(i,jq,j,1)
              endif

              if(e4coef(i2g).ge. 0.0)then
                 if(e4coef(i2g) .lt. 50.0) then 
                   Siga(jq,j,2,2)=kmem_i_j(2,2)
     &              *( 
     &           (1.0-1.0/sqrt(dot_product(DY_i_jp(1:3),DY_i_jp(1:3))))
     &            +e4coef(i2g)
     &          *(1.0-1.0/sqrt(dot_product(DX_i_jm(1:3),DX_i_jm(1:3))))        
     &                  -Tzero_fsh(i,jq,j,2,2)   )
                  elseif(e4coef(i2g) .le. 100.0) then   
                     temp_ibm3= e4coef(i2g)-50.0          
                     Siga(jq,j,2,2)=kmem_i_j(2,2)
     &              *( 
     &           (1.0-1.0/sqrt(dot_product(DY_i_jp(1:3),DY_i_jp(1:3))))
     &             +temp_ibm3
     &          *( (sqrt(dot_product(DX_i_jm(1:3),DX_i_jm(1:3)))-1.0)        
     &            /(sqrt(dot_product(DY_i_jp(1:3),DY_i_jp(1:3)))) )
     &                  -Tzero_fsh(i,jq,j,2,2)  )
                 else
                     temp_ibm1=(dot_product(DX_i_jm(1:3),DX_i_jm(1:3))
     &                         -1.0)/2.0  
                     temp_ibm2=(dot_product(DY_i_jp(1:3),DY_i_jp(1:3))
     &                         -1.0)/2.0  
                     ksh_tmp=kmem_i_j(1,2)*temp_ibm1**2
     &                      +2.0*kmem_i_j(4,2)*temp_ibm1*temp_ibm2
     &                      +kmem_i_j(2,2)*temp_ibm2**2
                     Siga(jq,j,2,2)=kmem_i_j(5,2)*exp(ksh_tmp)
     &                             *( kmem_i_j(1,2)*temp_ibm1
     &                               +kmem_i_j(4,2)*temp_ibm2)
                 endif

              else !(e4coef(i2g) .lt. 0.0)
                 DY_i_jp(1:3)=
     &            (GXtmp(1:3,jq,j+1)-GXtmp(1:3,jq,j))
     &            /dsf2_IBM_fsh(i,jq,j) 

                 Siga(jq,j,2,2)=kmem_i_j(2,2)
     &                       *(dot_product(DY_i_jp(1:3),DY_i_jp(1:3))
     &                         -Tzero_fsh(i,jq,j,2,2))

                 DY_i_jm(1:3)=
     &            (GXtmp(1:3,jq,j)-GXtmp(1:3,jq,j-1))
     &            /dsf2_IBM_fsh(i,jq,j-1) 
              endif
              if(MaterialTypeIBM(i2g).eq. 1) then
              DYY_i_j(1:3)=( DY_i_jp(1:3)-DY_i_jm(1:3))
     &                     /ds2_ibm_fsh(i,jq,j)

              gama(jq,j,2,2)=Ben_Coef_fsh(i,jq,j,2)
     &                       *(dot_product(DYY_i_j(1:3),DYY_i_j(1:3))
     &                         -Bzero_fsh(i,jq,j,2,2))
              else
              gama(jq,j,2,2)=Ben_Coef_fsh(i,jq,j,2)
              endif

              DY_ip_j(1:3)=
     &        (GXtmp(1:3,jq+1,j+1)-GXtmp(1:3,jq+1,j))
     &                     /dsf2_IBM_fsh(i,jq+1,j) 
              DY_im_j(1:3)=
     &         (GXtmp(1:3,jq,j+1)-GXtmp(1:3,jq,j))/dsf2_IBM_fsh(i,jq,j) 

              DX_i_jp(1:3)=
     &         (GXtmp(1:3,jq+1,j+1)-GXtmp(1:3,jq,j+1))
     &                     /dsf_IBM_fsh(i,jq,j+1) 
              DX_i_jm(1:3)=
     &         (GXtmp(1:3,jq+1,j)-GXtmp(1:3,jq,j))
     &                     /dsf_IBM_fsh(i,jq,j) 

              if(MaterialTypeIBM(i2g).eq. 1) then
              DXY_i_j(1:3)=( DY_ip_j(1:3)-DY_im_j(1:3))
     &                     /dk_ibm_fsh(i,jq,j)

              gama(jq,j,1,2)=kbend_i_j
     &                       *(dot_product(DXY_i_j(1:3),DXY_i_j(1:3))
     &                         -Bzero_fsh(i,jq,j,1,2))

              DYX_i_j(1:3)=( DX_ip_j(1:3)-DX_im_j(1:3))
     &                     /dk2_ibm_fsh(i,jq,j)

              gama(jq,j,2,1)=kbend_i_j
     &                       *(dot_product(DYX_i_j(1:3),DYX_i_j(1:3))
     &                         -Bzero_fsh(i,jq,j,2,1))

              else
              gama(jq,j,1,2)=kbend_i_j
              gama(jq,j,2,1)=kbend_i_j
              endif

              temp_ibm1=0.0
              do noj=1,3
                temp_ibm1=temp_ibm1+0.25d0*
     &         (DX_i_jp(noj)+DX_i_jm(noj))*(DY_ip_j(noj)+DY_im_j(noj))
              enddo

              Siga(jq,j,2,1)=kmem_i_j(3,3)*(
     &          temp_ibm1
     &         -Tzero_fsh(i,jq,j,2,1))

              Siga(jq,j,1,2)=Siga(jq,j,2,1)

              dXP1cont(1,1:3)=0.5*(DX_im_j(1:3)+DX_ip_j(1:3))
              dXP1cont(2,1:3)=0.5*(DY_i_jm(1:3)+DY_i_jp(1:3))
              call crossvec( 
     &             Normalcont1(1:3),dXP1cont(1,1:3),dXP1cont(2,1:3))

              fibm1pres_fsh(jq,j)=Normalcont1(1)
              fibm2pres_fsh(jq,j)=Normalcont1(2)
              fibm3pres_fsh(jq,j)=Normalcont1(3)

              if(Electromechanical(i2g)) then 
               if(Piezo_Formulation_Flag(i2g) .eq. 0) then
                    vnPiezo_fsh(1:3,jq,j)=Normalcont1(1:3)
     &                                   *vPiezo_fsh(i,jq,j)
               elseif(Piezo_Formulation_Flag(i2g) .eq. 1) then
                    vnPiezo_fsh(1:3,jq,j)=Normalcont1(1:3)  
               else
                    print*, 'Wrong Piezo_Formulation_Flag'
                    stop
               endif             
              endif
           enddo
           enddo

           if(e4coef(i2g).gt.0.0) then
           do j=1,ns_ibm_r_fsh(i)
! boundary 1
           jq=1
              DX_im_j(1:3)=
     &         (   -GXtmp(1:3,jq+2,j)
     &         +4.0*GXtmp(1:3,jq+1,j)
     &         -3.0*GXtmp(1:3,jq,j)   )
     &         /(3.0*dsf_IBM_fsh(i,jq,j)-dsf_IBM_fsh(i,jq+1,j) )        !x,y

           jq=1
              DX_ip_j(1:3)=
     &         (   -GXtmp(1:3,jq+2,j+1)
     &         +4.0*GXtmp(1:3,jq+1,j+1)
     &         -3.0*GXtmp(1:3,jq,j+1)   )
     &         /(3.0*dsf_IBM_fsh(i,jq,j+1)-dsf_IBM_fsh(i,jq+1,j+1) )        !x,y+1

              DX_ip_j(1:3)=0.5*(DX_ip_j(1:3)+DX_im_j(1:3))

              DY_ip_j(1:3)=
     &         (GXtmp(1:3,jq,j+1)-GXtmp(1:3,jq,j))/dsf2_IBM_fsh(i,jq,j) !x,y+1/2

              sigB(1,j,1)=0.0
              sigB(1,j,3)=Mem_Coef_fsh(i,jq,j,3)
     &              *(dot_product(DX_ip_j(1:3),DY_ip_j(1:3))
     &                  -TzeroB_fsh(i,1,j,3)  )

              if(e4coef(i2g) .lt. 50.0) then   
              sigB(1,j,2)=Mem_Coef_fsh(i,jq,j,2)
     &              *( 
     &            (1.0-1.0/sqrt(dot_product(DY_ip_j(1:3),DY_ip_j(1:3))))
     &        +e4coef(i2g)
     &           *(1.0-1.0/sqrt(dot_product(DX_ip_j(1:3),DX_ip_j(1:3))))        
     &                  -TzeroB_fsh(i,1,j,2)  )

              elseif(e4coef(i2g) .le. 100.0) then   
                     temp_ibm3= e4coef(i2g)-50.0          
                     sigB(1,j,2)=Mem_Coef_fsh(i,jq,j,2)
     &              *( 
     &           (1.0-1.0/sqrt(dot_product(DY_ip_j(1:3),DY_ip_j(1:3))))
     &             +temp_ibm3
     &          *( (sqrt(dot_product(DX_ip_j(1:3),DX_ip_j(1:3)))-1.0)        
     &            /(sqrt(dot_product(DY_ip_j(1:3),DY_ip_j(1:3)))) )
     &                  -TzeroB_fsh(i,1,j,2)  )

              endif

! boundary 2
           jq=nq_ibm_r_fsh(i)
              DX_im_j(1:3)=
     &         (    GXtmp(1:3,jq-2,j)
     &         -4.0*GXtmp(1:3,jq-1,j)
     &         +3.0*GXtmp(1:3,jq,j)   )
     &         /(3.0*dsf_IBM_fsh(i,jq-1,j)- dsf_IBM_fsh(i,jq-2,j) )

           jq=nq_ibm_r_fsh(i)
              DX_ip_j(1:3)=
     &         (   GXtmp(1:3,jq-2,j+1)
     &         -4.0*GXtmp(1:3,jq-1,j+1)
     &         +3.0*GXtmp(1:3,jq,j+1)   )
     &         /(3.0*dsf_IBM_fsh(i,jq-1,j+1)-dsf_IBM_fsh(i,jq-2,j+1) )        !x,y+1

              DX_ip_j(1:3)=0.5*(DX_ip_j(1:3)+DX_im_j(1:3))

              DY_ip_j(1:3)=
     &         (GXtmp(1:3,jq,j+1)-GXtmp(1:3,jq,j))/dsf2_IBM_fsh(i,jq,j) !x,y+1/2

              sigB(2,j,1)=0.0
              sigB(2,j,3)=Mem_Coef_fsh(i,jq,j,3)
     &              *(dot_product(DX_ip_j(1:3),DY_ip_j(1:3))
     &                  -TzeroB_fsh(i,2,j,3)  )
              if(e4coef(i2g) .lt. 50.0) then

              sigB(2,j,2)=Mem_Coef_fsh(i,jq,j,2)
     &              *( 
     &            (1.0-1.0/sqrt(dot_product(DY_ip_j(1:3),DY_ip_j(1:3))))
     &        +e4coef(i2g)
     &           *(1.0-1.0/sqrt(dot_product(DX_ip_j(1:3),DX_ip_j(1:3)))) 
     &                  -TzeroB_fsh(i,2,j,2)  )

              elseif(e4coef(i2g) .le. 100.0) then   
                     temp_ibm3= e4coef(i2g)-50.0          
                     sigB(2,j,2)=Mem_Coef_fsh(i,jq,j,2)
     &              *( 
     &           (1.0-1.0/sqrt(dot_product(DY_ip_j(1:3),DY_ip_j(1:3))))
     &             +temp_ibm3
     &          *( (sqrt(dot_product(DX_ip_j(1:3),DX_ip_j(1:3)))-1.0)        
     &            /(sqrt(dot_product(DY_ip_j(1:3),DY_ip_j(1:3)))) )
     &                  -TzeroB_fsh(i,2,j,2)  )
              endif
           enddo


           do jq=1,nq_ibm_r_fsh(i)
! boundary 3
           j=1
              DY_i_jm(1:3)=
     &         (   -GXtmp(1:3,jq,j+2)
     &         +4.0*GXtmp(1:3,jq,j+1)
     &         -3.0*GXtmp(1:3,jq,j)   )
     &         /(3.0*dsf2_IBM_fsh(i,jq,j)-dsf2_IBM_fsh(i,jq,j+1))   !x+1/2,y

              DY_i_jp(1:3)=
     &         (   -GXtmp(1:3,jq+1,j+2)
     &         +4.0*GXtmp(1:3,jq+1,j+1)
     &         -3.0*GXtmp(1:3,jq+1,j)   )
     &         /(3.0*dsf2_IBM_fsh(i,jq+1,j)-dsf2_IBM_fsh(i,jq+1,j+1))   !x+1/2,y


              DY_i_jp(1:3)=
     &           0.5*(DY_i_jm(1:3)+DY_i_jp(1:3))
              DX_ip_j(1:3)=
     &         (GXtmp(1:3,jq+1,j)-GXtmp(1:3,jq,j))/dsf_IBM_fsh(i,jq,j) !x,y+1/2

              sigB(3,jq,2)=0.0
              sigB(3,jq,3)=Mem_Coef_fsh(i,jq,j,3)
     &              *(dot_product(DX_ip_j(1:3),DY_i_jp(1:3))
     &                  -TzeroB_fsh(i,3,jq,3)  )

              if(e4coef(i2g) .lt. 50.0) then 
              sigB(3,jq,1)=Mem_Coef_fsh(i,jq,j,1)
     &              *( 
     &         (1.0-1.0/sqrt(dot_product(DX_ip_j(1:3),DX_ip_j(1:3))))
     &        +e4coef(i2g)
     &        *(1.0-1.0/sqrt(dot_product(DY_i_jp(1:3),DY_i_jp(1:3))))        
     &                  -TzeroB_fsh(i,3,jq,1)  )
              elseif(e4coef(i2g) .le. 100.0) then   
                     temp_ibm3= e4coef(i2g)-50.0          
                     sigB(3,jq,1)=Mem_Coef_fsh(i,jq,j,1)
     &              *( 
     &           (1.0-1.0/sqrt(dot_product(DX_ip_j(1:3),DX_ip_j(1:3))))
     &             +temp_ibm3
     &          *( (sqrt(dot_product(DY_i_jp(1:3),DY_i_jp(1:3)))-1.0)        
     &            /(sqrt(dot_product(DX_ip_j(1:3),DX_ip_j(1:3)))) )
     &                  -TzeroB_fsh(i,3,jq,1)  )
              endif
! boundary 4
           j=ns_ibm_r_fsh(i)
              DY_i_jm(1:3)=
     &         (   GXtmp(1:3,jq,j-2)
     &         -4.0*GXtmp(1:3,jq,j-1)
     &         +3.0*GXtmp(1:3,jq,j)   )
     &         /(3.0*dsf2_IBM_fsh(i,jq,j-1)-dsf2_IBM_fsh(i,jq,j-2))   !x+1/2,y

              DY_i_jp(1:3)=
     &         (   GXtmp(1:3,jq+1,j-2)
     &         -4.0*GXtmp(1:3,jq+1,j-1)
     &         +3.0*GXtmp(1:3,jq+1,j)   )
     &         /(3.0*dsf2_IBM_fsh(i,jq+1,j-1)-dsf2_IBM_fsh(i,jq+1,j-2))   !x+1/2,y

              DY_i_jp(1:3)=
     &           0.5*(DY_i_jm(1:3)+DY_i_jp(1:3))
              DX_ip_j(1:3)=
     &         (GXtmp(1:3,jq+1,j)-GXtmp(1:3,jq,j))/dsf_IBM_fsh(i,jq,j) !x,y+1/2


              sigB(4,jq,2)=0.0
              sigB(4,jq,3)=Mem_Coef_fsh(i,jq,j,3)
     &              *(dot_product(DX_ip_j(1:3),DY_i_jp(1:3))
     &                  -TzeroB_fsh(i,4,jq,3)  )

              if(e4coef(i2g) .lt. 50.0) then 
              sigB(4,jq,1)=Mem_Coef_fsh(i,jq,j,1)
     &              *( 
     &         (1.0-1.0/sqrt(dot_product(DX_ip_j(1:3),DX_ip_j(1:3))))
     &        +e4coef(i2g)
     &        *(1.0-1.0/sqrt(dot_product(DY_i_jp(1:3),DY_i_jp(1:3))))        
     &                  -TzeroB_fsh(i,4,jq,1)  )
              elseif(e4coef(i2g) .le. 100.0) then   
                     temp_ibm3= e4coef(i2g)-50.0          
                     sigB(4,jq,1)=Mem_Coef_fsh(i,jq,j,1)
     &              *( 
     &           (1.0-1.0/sqrt(dot_product(DX_ip_j(1:3),DX_ip_j(1:3))))
     &             +temp_ibm3
     &          *( (sqrt(dot_product(DY_i_jp(1:3),DY_i_jp(1:3)))-1.0)        
     &            /(sqrt(dot_product(DX_ip_j(1:3),DX_ip_j(1:3)))) )
     &                  -TzeroB_fsh(i,4,jq,1)  )
             endif
           enddo
           endif

          if(Electromechanical(i2g)) then 
            if(Piezo_Formulation_Flag(i2g) .eq. 0) then
             do jq=2,nq_ibm_r_fsh(i)-1
             do j=2,ns_ibm_r_fsh(i)-1
              DX_ip_j(1:3)=
     &         ( piezo_Coef_fsh(i,jq+1,j,3)*vnPiezo_fsh(1:3,jq+1,j) 
     &          -piezo_Coef_fsh(i,jq,j,3)*vnPiezo_fsh(1:3,jq,j)) 
     &          /dsf_IBM_fsh(i,jq,j) 
              DX_im_j(1:3)=
     &         ( piezo_Coef_fsh(i,jq,j,3)*vnPiezo_fsh(1:3,jq,j) 
     &          -piezo_Coef_fsh(i,jq-1,j,3)*vnPiezo_fsh(1:3,jq-1,j)) 
     &          /dsf_IBM_fsh(i,jq-1,j) 

              DXX_i_j(1:3)=( DX_ip_j(1:3)-DX_im_j(1:3))
     &                     /ds_ibm_fsh(i,jq,j)


              DY_i_jp(1:3)=
     &         ( piezo_Coef_fsh(i,jq,j+1,4)*vnPiezo_fsh(1:3,jq,j+1) 
     &          -piezo_Coef_fsh(i,jq,j,4)*vnPiezo_fsh(1:3,jq,j)) 
     &          /dsf2_IBM_fsh(i,jq,j) 

              DY_i_jm(1:3)=
     &         ( piezo_Coef_fsh(i,jq,j,4)*vnPiezo_fsh(1:3,jq,j) 
     &          -piezo_Coef_fsh(i,jq,j-1,4)*vnPiezo_fsh(1:3,jq,j-1))
     &                     /dsf2_IBM_fsh(i,jq,j-1) 

              DYY_i_j(1:3)=( DY_i_jp(1:3)-DY_i_jm(1:3))
     &                     /ds2_ibm_fsh(i,jq,j)

              Fpiezo1_fsh(i,jq,j)=DXX_i_j(1)+DYY_i_j(1)
              Fpiezo2_fsh(i,jq,j)=DXX_i_j(2)+DYY_i_j(2)
              Fpiezo3_fsh(i,jq,j)=DXX_i_j(3)+DYY_i_j(3)

              DY_ip_j(1:3)=0.25*( 
     &           piezo_Coef_fsh(i,jq,j,5)*vnPiezo_fsh(1:3,jq,j)
     &          +piezo_Coef_fsh(i,jq,j+1,5)*vnPiezo_fsh(1:3,jq,j+1)
     &          +piezo_Coef_fsh(i,jq+1,j,5)*vnPiezo_fsh(1:3,jq+1,j)
     &          +piezo_Coef_fsh(i,jq+1,j+1,5)*vnPiezo_fsh(1:3,jq+1,j+1))            
              DY_im_j(1:3)=0.25*( 
     &           piezo_Coef_fsh(i,jq,j,5)*vnPiezo_fsh(1:3,jq,j) 
     &          +piezo_Coef_fsh(i,jq,j+1,5)*vnPiezo_fsh(1:3,jq,j+1) 
     &          +piezo_Coef_fsh(i,jq-1,j,5)*vnPiezo_fsh(1:3,jq-1,j) 
     &          +piezo_Coef_fsh(i,jq-1,j+1,5)*vnPiezo_fsh(1:3,jq-1,j+1))

              DX_i_jp(1:3)=0.25*( 
     &           piezo_Coef_fsh(i,jq,j,5)*vnPiezo_fsh(1:3,jq,j) 
     &          +piezo_Coef_fsh(i,jq,j-1,5)*vnPiezo_fsh(1:3,jq,j-1) 
     &          +piezo_Coef_fsh(i,jq+1,j,5)*vnPiezo_fsh(1:3,jq+1,j) 
     &          +piezo_Coef_fsh(i,jq+1,j-1,5)*vnPiezo_fsh(1:3,jq+1,j-1))     
              DX_i_jm(1:3)=0.25*( 
     &           piezo_Coef_fsh(i,jq,j,5)*vnPiezo_fsh(1:3,jq,j) 
     &          +piezo_Coef_fsh(i,jq,j-1,5)*vnPiezo_fsh(1:3,jq,j-1) 
     &          +piezo_Coef_fsh(i,jq-1,j,5)*vnPiezo_fsh(1:3,jq-1,j) 
     &          +piezo_Coef_fsh(i,jq-1,j-1,5)*vnPiezo_fsh(1:3,jq-1,j-1))



              DXY_i_j(1:3)=(DY_ip_j(1:3)-DY_im_j(1:3))
     &                     /dk_ibm_fsh(i,jq,j)
              DYX_i_j(1:3)=(DX_i_jp(1:3)-DX_i_jm(1:3))
     &                     /dk_ibm_fsh(i,jq,j-1)
              DYY_i_j(1:3)=(DXY_i_j(1:3)-DYX_i_j(1:3)) 
     &                      /ds2_ibm_fsh(i,jq,j)

              DXY_i_j(1:3)=(DY_ip_j(1:3)-DX_i_jp(1:3))
     &                     /dk2_ibm_fsh(i,jq,j)
              DYX_i_j(1:3)=(DY_im_j(1:3)-DX_i_jm(1:3))
     &                     /dk2_ibm_fsh(i,jq-1,j)
              DXX_i_j(1:3)=(DXY_i_j(1:3)-DYX_i_j(1:3)) 
     &                      /ds_ibm_fsh(i,jq,j)

              Fpiezo1_fsh(i,jq,j)=Fpiezo1_fsh(i,jq,j) 
     &                           +DXX_i_j(1)+DYY_i_j(1)
              Fpiezo2_fsh(i,jq,j)=Fpiezo2_fsh(i,jq,j) 
     &                           +DXX_i_j(2)+DYY_i_j(2)
              Fpiezo3_fsh(i,jq,j)=Fpiezo3_fsh(i,jq,j) 
     &                           +DXX_i_j(3)+DYY_i_j(3)
                 
             enddo
             enddo
            elseif(Piezo_Formulation_Flag(i2g) .eq. 1) then
             do jq=1,nq_ibm_r_fsh(i)
             do j=1,ns_ibm_r_fsh(i)

!central canculation
              DY_i_jp(1:3)=
     &         (GXtmp(1:3,jq,j+1)-GXtmp(1:3,jq,j))
     &                     /dsf2_IBM_fsh(i,jq,j) 
              DY_i_jm(1:3)=
     &         (GXtmp(1:3,jq,j)-GXtmp(1:3,jq,j-1))
     &                     /dsf2_IBM_fsh(i,jq,j-1) 
              X22piezo(1:3)=( DY_i_jp(1:3)-DY_i_jm(1:3))
     &                     /ds2_ibm_fsh(i,jq,j) 
              X2piezo(1:3)=( DY_i_jp(1:3)+DY_i_jm(1:3))
     &                     /2.0

              DX_ip_j(1:3)=
     &         (GXtmp(1:3,jq+1,j)-GXtmp(1:3,jq,j))
     &                     /dsf_IBM_fsh(i,jq,j) 
              DX_im_j(1:3)=
     &         (GXtmp(1:3,jq,j)-GXtmp(1:3,jq-1,j))
     &                     /dsf_IBM_fsh(i,jq-1,j) 
              X11piezo(1:3)=( DX_ip_j(1:3)-DX_im_j(1:3))
     &                     /ds_ibm_fsh(i,jq,j) 
              X1piezo(1:3)=( DX_ip_j(1:3)+DX_im_j(1:3))
     &                     /2.0



              DY_ip_j(1:3)=
     &        (GXtmp(1:3,jq+1,j+1)-GXtmp(1:3,jq+1,j))
     &                     /dsf2_IBM_fsh(i,jq+1,j) 
              DY_im_j(1:3)=
     &         (GXtmp(1:3,jq,j+1)-GXtmp(1:3,jq,j))
     &                     /dsf2_IBM_fsh(i,jq,j) 

              DX_i_jp(1:3)=
     &         (GXtmp(1:3,jq+1,j+1)-GXtmp(1:3,jq,j+1))
     &                     /dsf_IBM_fsh(i,jq,j+1) 
              DX_i_jm(1:3)=
     &         (GXtmp(1:3,jq+1,j)-GXtmp(1:3,jq,j))
     &                     /dsf_IBM_fsh(i,jq,j) 


              DXY_i_j(1:3)=( DY_ip_j(1:3)-DY_im_j(1:3))
     &                     /dk_ibm_fsh(i,jq,j)
              DYX_i_j(1:3)=( DX_ip_j(1:3)-DX_im_j(1:3))
     &                     /dk2_ibm_fsh(i,jq,j)




              DY_ip_j(1:3)=
     &        (GXtmp(1:3,jq,j+1)-GXtmp(1:3,jq,j))
     &                     /dsf2_IBM_fsh(i,jq,j) 
              DY_im_j(1:3)=
     &         (GXtmp(1:3,jq-1,j+1)-GXtmp(1:3,jq-1,j))
     &                     /dsf2_IBM_fsh(i,jq-1,j) 

              DX_i_jp(1:3)=
     &         (GXtmp(1:3,jq,j+1)-GXtmp(1:3,jq-1,j+1))
     &                     /dsf_IBM_fsh(i,jq-1,j+1) 
              DX_i_jm(1:3)=
     &         (GXtmp(1:3,jq,j)-GXtmp(1:3,jq-1,j))
     &                     /dsf_IBM_fsh(i,jq-1,j) 


              DXY_i_j(1:3)=
     &                     DXY_i_j(1:3)
     &                     +( DY_ip_j(1:3)-DY_im_j(1:3))
     &                     /dk_ibm_fsh(i,jq-1,j)
              DYX_i_j(1:3)=
     &                     DYX_i_j(1:3)
     &                     +( DX_ip_j(1:3)-DX_im_j(1:3))
     &                     /dk2_ibm_fsh(i,jq-1,j)





              DY_ip_j(1:3)=
     &        (GXtmp(1:3,jq+1,j)-GXtmp(1:3,jq+1,j-1))
     &                     /dsf2_IBM_fsh(i,jq+1,j-1) 
              DY_im_j(1:3)=
     &         (GXtmp(1:3,jq,j)-GXtmp(1:3,jq,j-1))
     &                     /dsf2_IBM_fsh(i,jq,j-1) 

              DX_i_jp(1:3)=
     &         (GXtmp(1:3,jq+1,j)-GXtmp(1:3,jq,j))
     &                     /dsf_IBM_fsh(i,jq,j) 
              DX_i_jm(1:3)=
     &         (GXtmp(1:3,jq+1,j-1)-GXtmp(1:3,jq,j-1))
     &                     /dsf_IBM_fsh(i,jq,j-1) 


              DXY_i_j(1:3)=
     &                     DXY_i_j(1:3)
     &                     +( DY_ip_j(1:3)-DY_im_j(1:3))
     &                     /dk_ibm_fsh(i,jq,j-1)
              DYX_i_j(1:3)=
     &                     DYX_i_j(1:3)
     &                     +( DX_ip_j(1:3)-DX_im_j(1:3))
     &                     /dk2_ibm_fsh(i,jq,j-1)




              DY_ip_j(1:3)=
     &        (GXtmp(1:3,jq,j)-GXtmp(1:3,jq,j-1))
     &                     /dsf2_IBM_fsh(i,jq,j-1) 
              DY_im_j(1:3)=
     &         (GXtmp(1:3,jq-1,j)-GXtmp(1:3,jq-1,j-1))
     &                     /dsf2_IBM_fsh(i,jq-1,j-1) 

              DX_i_jp(1:3)=
     &         (GXtmp(1:3,jq,j)-GXtmp(1:3,jq-1,j))
     &                     /dsf_IBM_fsh(i,jq-1,j) 
              DX_i_jm(1:3)=
     &         (GXtmp(1:3,jq,j-1)-GXtmp(1:3,jq-1,j-1))
     &                     /dsf_IBM_fsh(i,jq-1,j-1) 


              DXY_i_j(1:3)=
     &                     DXY_i_j(1:3)
     &                     +( DY_ip_j(1:3)-DY_im_j(1:3))
     &                     /dk_ibm_fsh(i,jq-1,j-1)
              DYX_i_j(1:3)=
     &                     DYX_i_j(1:3)
     &                     +( DX_ip_j(1:3)-DX_im_j(1:3))
     &                     /dk2_ibm_fsh(i,jq-1,j-1)

              X12piezo(1:3)=0.25*( (DXY_i_j(1:3)+DYX_i_j(1:3))/2.0)


              normalpiezo(1:3)=vnPiezo_fsh(1:3,jq,j)

              Epiezo=dot_product(X1piezo(1:3),X1piezo(1:3))             !E=X_1 . X_1
              Fpiezo=dot_product(X1piezo(1:3),X2piezo(1:3))             !F=X_1 . X_2
              Gpiezo=dot_product(X2piezo(1:3),X2piezo(1:3))             !G=X_2 . X_2

              Lpiezo=dot_product(X11piezo(1:3),normalpiezo(1:3))        !L=X_11 . n
              Mpiezo=dot_product(X12piezo(1:3),normalpiezo(1:3))        !M=X_12 . n
              Npiezo=dot_product(X22piezo(1:3),normalpiezo(1:3))        !N=X_22 . n
           
              Hnpiezo=Epiezo*Npiezo-2.0*Fpiezo*Mpiezo+Gpiezo*Lpiezo     !Hn=EN-2FM+GL
              Hdpiezo=2.0*(Epiezo*Gpiezo-Fpiezo**2)                     !Hd=2(EG-F^2)

              Ppiezo=piezo_Coef_fsh(i,jq,j,3)*vPiezo_fsh(i,jq,j)
     &               /Hdpiezo                                           !P=\alpha V /H_d
              Rpiezo=Ppiezo*Hnpiezo/Hdpiezo                             !R=P H_n/H_d

              VECpiezo_tmp(1:3,1,jq,j)=X1piezo(1:3)                     !1:X1
              VECpiezo_tmp(1:3,2,jq,j)=X2piezo(1:3)                     !2:X2
              VECpiezo_tmp(1:3,3,jq,j)=X11piezo(1:3)                    !3:X11
              VECpiezo_tmp(1:3,4,jq,j)=X22piezo(1:3)                    !4:X22
              VECpiezo_tmp(1:3,5,jq,j)=X12piezo(1:3)                    !5:X12
              VECpiezo_tmp(1:3,6,jq,j)=Ppiezo*(/Epiezo,Gpiezo,Fpiezo/)  !6:[E P,G P,F P]
              VECpiezo_tmp(1:3,7,jq,j)=Npiezo*Ppiezo*X1piezo(1:3)       !7:N P X_1
              VECpiezo_tmp(1:3,8,jq,j)=Epiezo*Ppiezo*normalpiezo(1:3)   !8:E P n
              VECpiezo_tmp(1:3,9,jq,j)=Mpiezo*Ppiezo*X1piezo(1:3)       !9:M P X_1
              VECpiezo_tmp(1:3,10,jq,j)=Mpiezo*Ppiezo*X2piezo(1:3)      !10:M P X_2
              VECpiezo_tmp(1:3,11,jq,j)=Fpiezo*Ppiezo*normalpiezo(1:3)  !11:F P n
              VECpiezo_tmp(1:3,12,jq,j)=Lpiezo*Ppiezo*X2piezo(1:3)      !12:L P X_2
              VECpiezo_tmp(1:3,13,jq,j)=Gpiezo*Ppiezo*normalpiezo(1:3)  !13:G P n
              VECpiezo_tmp(1:3,14,jq,j)=Gpiezo*Rpiezo*X1piezo(1:3)      !14:G R X_1
              VECpiezo_tmp(1:3,15,jq,j)=Epiezo*Rpiezo*X2piezo(1:3)      !15:E R X_2                           
              VECpiezo_tmp(1:3,16,jq,j)=Fpiezo*Rpiezo*X1piezo(1:3)      !16:F R X_1
              VECpiezo_tmp(1:3,17,jq,j)=Fpiezo*Rpiezo*X2piezo(1:3)      !17:F R X_2   
              VECpiezo_tmp(1:3,18,jq,j)=(/Hnpiezo
     &                                   ,Hdpiezo
     &                                   ,Hnpiezo/Hdpiezo/)             !18:Hn,Hd,\kappa=Hn/Hd

              VECpiezo_tmp(1:3,26,jq,j)=normalpiezo(1:3)                !26: nrmalpiezo
              VECpiezo_tmp(1:3,27,jq,j)=Rpiezo*(/Epiezo,Gpiezo,Fpiezo/) !27:[E R,G R,F R]
              VECpiezo_tmp(1:3,28,jq,j)=Ppiezo*(/Lpiezo,Mpiezo,Npiezo/) !28:[E R,G R,F R]
              VECpiezo_tmp(1:3,29,jq,j)=Ppiezo*(/Epiezo,Gpiezo,Fpiezo/)  !6:[E P,G P,F P]

             Enddo
             Enddo
             do jq=1,nq_ibm_r_fsh(i)
             do j=1,ns_ibm_r_fsh(i)
                normalpiezo(1:3)=vnPiezo_fsh(1:3,jq,j)

                DY_i_jp(1:3)=VECpiezo_tmp(1:3,1,jq,j)
                DY_i_jm(1:3)=VECpiezo_tmp(1:3,2,jq,j)

                call crossvec_noscale(DX_im_j(1:3)
     &                               ,DY_i_jp(1:3), DY_i_jm(1:3))
                temp_ibm1
     &              =sqrt(DX_im_j(1)**2+DX_im_j(2)**2+DX_im_j(3)**2)

                Qmatpiezo(1,1:3)=(/1.0-normalpiezo(1)**2
     &                            ,normalpiezo(1)*normalpiezo(2)
     &                            ,normalpiezo(1)*normalpiezo(3)/)

                Qmatpiezo(2,1:3)=(/normalpiezo(2)*normalpiezo(1)
     &                            ,1.0-normalpiezo(2)**2
     &                            ,normalpiezo(2)*normalpiezo(3)/)

                Qmatpiezo(3,1:3)=(/normalpiezo(3)*normalpiezo(1)
     &                            ,normalpiezo(3)*normalpiezo(2)
     &                            ,1.0-normalpiezo(3)**2/)
                Qmatpiezo(1:3,1:3)=Qmatpiezo(1:3,1:3)/temp_ibm1         !Q_ij=(1-n_i n_j)/|X_1 x X_2 |

                VECpiezo_tmp(1:3,19,jq,j)=                              !19: Q GP X11 
     &                            MATMUL(Qmatpiezo
     &                                  ,VECpiezo_tmp(2,6,jq,j)
     &                                  *VECpiezo_tmp(1:3,3,jq,j))            
                VECpiezo_tmp(1:3,20,jq,j)=                              !20: Q EP X22 
     &                            MATMUL(Qmatpiezo
     &                                  ,VECpiezo_tmp(1,6,jq,j)
     &                                  *VECpiezo_tmp(1:3,4,jq,j))
                VECpiezo_tmp(1:3,21,jq,j)=                              !21: Q FP X12 
     &                            MATMUL(Qmatpiezo
     &                                  ,VECpiezo_tmp(3,6,jq,j)
     &                                  *VECpiezo_tmp(1:3,5,jq,j))       
             Enddo
             Enddo
             do jq=2,nq_ibm_r_fsh(i)-1
             do j=2,ns_ibm_r_fsh(i)-1
                
              DX_ip_j(1:3)=VECpiezo_tmp(1:3,19,jq+1,j)
              DX_im_j(1:3)=VECpiezo_tmp(1:3,19,jq-1,j)

              DX_i_j (1:3)=VECpiezo_tmp(1:3,19,jq  ,j)

              DX_i_jp(1:3)=VECpiezo_tmp(1:3,19,jq,j+1)
              DX_i_jm(1:3)=VECpiezo_tmp(1:3,19,jq,j-1)

              DY_im_j(1:3)=
     &         (DX_i_j (1:3)-DX_im_j (1:3))/dsf_IBM_fsh(i,jq-1,j) 

              DY_ip_j(1:3)=
     &         (DX_ip_j (1:3)-DX_i_j (1:3))/dsf_IBM_fsh(i,jq,j)  

              DXX_i_j(1:3)=( DY_ip_j(1:3)-DY_im_j(1:3))
     &                     /ds_ibm_fsh(i,jq,j)
              
              DY_im_j(1:3)=
     &         (DX_i_j (1:3)-DX_i_jm (1:3))/dsf2_IBM_fsh(i,jq-1,j) 

              DY_ip_j(1:3)=
     &         (DX_i_jp (1:3)-DX_i_j (1:3))/dsf2_IBM_fsh(i,jq,j)  

              DYY_i_j(1:3)=( DY_ip_j(1:3)-DY_im_j(1:3))
     &                     /ds2_ibm_fsh(i,jq,j)

              call bracketA(Qmatpiezo(1:3,1:3),VECpiezo_tmp(1:3,2,jq,j))
              call bracketA(Pmatpiezo(1:3,1:3),VECpiezo_tmp(1:3,1,jq,j))
              Pmatpiezo(1:3,1:3)=transpose(Pmatpiezo(1:3,1:3))

              VECpiezo_tmp(1:3,22,jq,j)=                                !22: w1
     &                    matmul(
     &                       Qmatpiezo(1:3,1:3)
     &                      ,DXX_i_j(1:3))
              VECpiezo_tmp(1:3,22,jq,j)=  
     &                    VECpiezo_tmp(1:3,22,jq,j) 
     &                   +matmul(
     &                       Pmatpiezo(1:3,1:3)
     &                      ,DYY_i_j(1:3))

              DX_ip_j(1:3)=VECpiezo_tmp(1:3,20,jq+1,j)
              DX_im_j(1:3)=VECpiezo_tmp(1:3,20,jq-1,j)

              DX_i_j (1:3)=VECpiezo_tmp(1:3,20,jq  ,j)

              DX_i_jp(1:3)=VECpiezo_tmp(1:3,20,jq,j+1)
              DX_i_jm(1:3)=VECpiezo_tmp(1:3,20,jq,j-1)

              DY_im_j(1:3)=
     &         (DX_i_j (1:3)-DX_im_j (1:3))/dsf_IBM_fsh(i,jq-1,j) 

              DY_ip_j(1:3)=
     &         (DX_ip_j (1:3)-DX_i_j (1:3))/dsf_IBM_fsh(i,jq,j)   

              DXX_i_j(1:3)=( DY_ip_j(1:3)-DY_im_j(1:3))
     &                     /ds_ibm_fsh(i,jq,j)
              
              DY_im_j(1:3)=
     &         (DX_i_j (1:3)-DX_i_jm (1:3))/dsf2_IBM_fsh(i,jq-1,j) 

              DY_ip_j(1:3)=
     &         (DX_i_jp (1:3)-DX_i_j (1:3))/dsf2_IBM_fsh(i,jq,j)  

              DYY_i_j(1:3)=( DY_ip_j(1:3)-DY_im_j(1:3))
     &                     /ds2_ibm_fsh(i,jq,j)

              VECpiezo_tmp(1:3,23,jq,j)=                                !23: w2
     &                    matmul(
     &                       Qmatpiezo(1:3,1:3)
     &                      ,DXX_i_j(1:3))
              VECpiezo_tmp(1:3,23,jq,j)=  
     &                    VECpiezo_tmp(1:3,23,jq,j) 
     &                   +matmul(
     &                       Pmatpiezo(1:3,1:3)
     &                      ,DYY_i_j(1:3))


              DX_ip_j(1:3)=VECpiezo_tmp(1:3,21,jq+1,j)
              DX_im_j(1:3)=VECpiezo_tmp(1:3,21,jq-1,j)

              DX_i_j (1:3)=VECpiezo_tmp(1:3,21,jq  ,j)

              DX_i_jp(1:3)=VECpiezo_tmp(1:3,21,jq,j+1)
              DX_i_jm(1:3)=VECpiezo_tmp(1:3,21,jq,j-1)

              DY_im_j(1:3)=
     &         (DX_i_j (1:3)-DX_im_j (1:3))/dsf_IBM_fsh(i,jq-1,j) 

              DY_ip_j(1:3)=
     &         (DX_ip_j (1:3)-DX_i_j (1:3))/dsf_IBM_fsh(i,jq,j)  

              DXX_i_j(1:3)=( DY_ip_j(1:3)-DY_im_j(1:3))
     &                     /ds_ibm_fsh(i,jq,j)
              
              DY_im_j(1:3)=
     &         (DX_i_j (1:3)-DX_i_jm (1:3))/dsf2_IBM_fsh(i,jq-1,j) 

              DY_ip_j(1:3)=
     &         (DX_i_jp (1:3)-DX_i_j (1:3))/dsf2_IBM_fsh(i,jq,j)   

              DYY_i_j(1:3)=( DY_ip_j(1:3)-DY_im_j(1:3))
     &                     /ds2_ibm_fsh(i,jq,j)

              VECpiezo_tmp(1:3,24,jq,j)=                                !24: w3
     &                    matmul(
     &                       Qmatpiezo(1:3,1:3)
     &                      ,DXX_i_j(1:3))
              VECpiezo_tmp(1:3,24,jq,j)=  
     &                    VECpiezo_tmp(1:3,24,jq,j) 
     &                   +matmul(
     &                       Pmatpiezo(1:3,1:3)
     &                      ,DYY_i_j(1:3))
             Enddo
             Enddo
             do jq=2,nq_ibm_r_fsh(i)-1
             do j=2,ns_ibm_r_fsh(i)-1
              

              DX_ip_j(1:3)=VECpiezo_tmp(1:3,7,jq+1,j)
              DX_im_j(1:3)=VECpiezo_tmp(1:3,7,jq-1,j)
              DX_i_j (1:3)=VECpiezo_tmp(1:3,7,jq  ,j)


              DY_im_j(1:3)=
     &         (DX_i_j (1:3)-DX_im_j (1:3))/dsf_IBM_fsh(i,jq-1,j) 

              DY_ip_j(1:3)=
     &         (DX_ip_j (1:3)-DX_i_j (1:3))/dsf_IBM_fsh(i,jq,j)   

              DY_i_j(1:3)=( DY_ip_j(1:3)+DY_im_j(1:3))
     &                     /2.0
              VectempPiezo(1:3)=-2.0*DY_i_j(1:3)                        !-2(NPX_1)_1


              DX_i_j (1:3)=VECpiezo_tmp(1:3,8,jq  ,j)
              DX_i_jp(1:3)=VECpiezo_tmp(1:3,8,jq,j+1)
              DX_i_jm(1:3)=VECpiezo_tmp(1:3,8,jq,j-1)

              DY_im_j(1:3)=
     &         (DX_i_j (1:3)-DX_i_jm (1:3))/dsf2_IBM_fsh(i,jq,j-1) 

              DY_ip_j(1:3)=
     &         (DX_i_jp (1:3)-DX_i_j (1:3))/dsf2_IBM_fsh(i,jq,j)   

              DYY_i_j(1:3)=( DY_ip_j(1:3)-DY_im_j(1:3))
     &                     /ds2_ibm_fsh(i,jq,j)

              VectempPiezo(1:3)=VectempPiezo(1:3)+DYY_i_j(1:3)          !+(EPn)_22

  
              VectempPiezo(1:3)=VectempPiezo(1:3)                       !-w1
     &                         -VECpiezo_tmp(1:3,22,jq,j)


              DX_i_j (1:3)=VECpiezo_tmp(1:3,9,jq  ,j)
              DX_i_jp(1:3)=VECpiezo_tmp(1:3,9,jq,j+1)
              DX_i_jm(1:3)=VECpiezo_tmp(1:3,9,jq,j-1)

              DY_im_j(1:3)=
     &         (DX_i_j (1:3)-DX_i_jm (1:3))/dsf2_IBM_fsh(i,jq,j-1) 

              DY_ip_j(1:3)=
     &         (DX_i_jp (1:3)-DX_i_j (1:3))/dsf2_IBM_fsh(i,jq,j)   
              DY_i_j(1:3)=( DY_ip_j(1:3)+DY_im_j(1:3))
     &                     /2.0

              VectempPiezo(1:3)=VectempPiezo(1:3)                       !+2(X_1MP)_2
     &                         +2.0*DY_i_j(1:3)


              DX_ip_j(1:3)=VECpiezo_tmp(1:3,10,jq+1,j)
              DX_im_j(1:3)=VECpiezo_tmp(1:3,10,jq-1,j)
              DX_i_j (1:3)=VECpiezo_tmp(1:3,10,jq  ,j)


              DY_im_j(1:3)=
     &         (DX_i_j (1:3)-DX_im_j (1:3))/dsf_IBM_fsh(i,jq-1,j) 

              DY_ip_j(1:3)=
     &         (DX_ip_j (1:3)-DX_i_j (1:3))/dsf_IBM_fsh(i,jq,j)   

              DY_i_j(1:3)=( DY_ip_j(1:3)+DY_im_j(1:3))
     &                     /2.0

              VectempPiezo(1:3)=VectempPiezo(1:3)                       !+2(X_2MP)_1
     &                         +2.0*DY_i_j(1:3)


              DX_im_jm(1:3)=VECpiezo_tmp(1:3,11,jq-1,j-1)
              DX_im_j(1:3)=VECpiezo_tmp(1:3,11,jq-1,j)
              DX_im_jp(1:3)=VECpiezo_tmp(1:3,11,jq-1,j+1)
              DX_i_jm(1:3)=VECpiezo_tmp(1:3,11,jq,j-1)
              DX_i_j(1:3)=VECpiezo_tmp(1:3,11,jq,j)
              DX_i_jp(1:3)=VECpiezo_tmp(1:3,11,jq,j+1)
              DX_ip_jm(1:3)=VECpiezo_tmp(1:3,11,jq+1,j-1)
              DX_ip_j(1:3)=VECpiezo_tmp(1:3,11,jq+1,j)
              DX_ip_jp(1:3)=VECpiezo_tmp(1:3,11,jq+1,j+1)

              DY_im_j(1:3)=
     &         (DX_i_j (1:3)-DX_i_jm (1:3))/dsf2_IBM_fsh(i,jq,j-1) 

              DY_ip_j(1:3)=
     &         (DX_i_jp (1:3)-DX_i_j (1:3))/dsf2_IBM_fsh(i,jq,j) 
  
              DY_i_j(1:3)=( DY_ip_j(1:3)+DY_im_j(1:3))
     &                     /2.0
  
              DY_im_j(1:3)=
     &         (DX_im_j (1:3)-DX_im_jm (1:3))/dsf2_IBM_fsh(i,jq-1,j-1) 

              DY_ip_j(1:3)=
     &         (DX_im_jp (1:3)-DX_im_j (1:3))/dsf2_IBM_fsh(i,jq-1,j) 
  
              DY_i_jm(1:3)=( DY_ip_j(1:3)+DY_im_j(1:3))
     &                     /2.0

              DY_im_j(1:3)=
     &         (DX_ip_j (1:3)-DX_ip_jm (1:3))/dsf2_IBM_fsh(i,jq+1,j-1) 

              DY_ip_j(1:3)=
     &         (DX_ip_jp (1:3)-DX_ip_j (1:3))/dsf2_IBM_fsh(i,jq+1,j) 
  
              DY_i_jp(1:3)=( DY_ip_j(1:3)+DY_im_j(1:3))
     &                     /2.0

              DY_im_j(1:3)=
     &         (DY_i_j (1:3)-DY_i_jm (1:3))/dsf_IBM_fsh(i,jq-1,j) 

              DY_ip_j(1:3)=
     &         (DY_i_jp (1:3)-DY_i_j (1:3))/dsf_IBM_fsh(i,jq,j)   

              DY_i_j(1:3)=( DY_ip_j(1:3)+DY_im_j(1:3))
     &                     /2.0

              VectempPiezo(1:3)=VectempPiezo(1:3)                       !+(FPn)_21
     &                         +DY_i_j(1:3)

              DY_im_j(1:3)=
     &         (DX_i_j (1:3)-DX_im_j (1:3))/dsf_IBM_fsh(i,jq-1,j) 

              DY_ip_j(1:3)=
     &         (DX_ip_j (1:3)-DX_i_j (1:3))/dsf_IBM_fsh(i,jq,j) 
  
              DY_i_j(1:3)=( DY_ip_j(1:3)+DY_im_j(1:3))
     &                     /2.0
  
              DY_im_j(1:3)=
     &         (DX_i_jm (1:3)-DX_im_jm (1:3))/dsf_IBM_fsh(i,jq-1,j-1) 

              DY_ip_j(1:3)=
     &         (DX_ip_jm (1:3)-DX_i_jm (1:3))/dsf_IBM_fsh(i,jq,j-1) 
  
              DY_i_jm(1:3)=( DY_ip_j(1:3)+DY_im_j(1:3))
     &                     /2.0

              DY_im_j(1:3)=
     &         (DX_i_jp (1:3)-DX_im_jp (1:3))/dsf_IBM_fsh(i,jq-1,j+1) 

              DY_ip_j(1:3)=
     &         (DX_ip_jp (1:3)-DX_i_jp (1:3))/dsf_IBM_fsh(i,jq,j+1) 
  
              DY_i_jp(1:3)=( DY_ip_j(1:3)+DY_im_j(1:3))
     &                     /2.0

              DY_im_j(1:3)=
     &         (DY_i_j (1:3)-DY_i_jm (1:3))/dsf2_IBM_fsh(i,jq,j-1) 

              DY_ip_j(1:3)=
     &         (DY_i_jp (1:3)-DY_i_j (1:3))/dsf2_IBM_fsh(i,jq,j)   

              DY_i_j(1:3)=( DY_ip_j(1:3)+DY_im_j(1:3))
     &                     /2.0

              VectempPiezo(1:3)=VectempPiezo(1:3)                       !+(FPn)_12
     &                         +DY_i_j(1:3)


              VectempPiezo(1:3)=VectempPiezo(1:3)                       !+2*w3
     &                         +2.0*VECpiezo_tmp(1:3,24,jq,j)

              DX_i_j (1:3)=VECpiezo_tmp(1:3,12,jq  ,j)
              DX_i_jp(1:3)=VECpiezo_tmp(1:3,12,jq,j+1)
              DX_i_jm(1:3)=VECpiezo_tmp(1:3,12,jq,j-1)

              DY_im_j(1:3)=
     &         (DX_i_j (1:3)-DX_i_jm (1:3))/dsf2_IBM_fsh(i,jq,j-1) 

              DY_ip_j(1:3)=
     &         (DX_i_jp (1:3)-DX_i_j (1:3))/dsf2_IBM_fsh(i,jq,j)   

              DY_i_j(1:3)=( DY_ip_j(1:3)+DY_im_j(1:3))
     &                     /2.0

              VectempPiezo(1:3)=VectempPiezo(1:3)-2*DY_i_j(1:3)         !-2(LPX_2)_2


              DX_ip_j(1:3)=VECpiezo_tmp(1:3,13,jq+1,j)
              DX_im_j(1:3)=VECpiezo_tmp(1:3,13,jq-1,j)
              DX_i_j (1:3)=VECpiezo_tmp(1:3,13,jq  ,j)

              DY_im_j(1:3)=
     &         (DX_i_j (1:3)-DX_im_j (1:3))/dsf_IBM_fsh(i,jq-1,j) 

              DY_ip_j(1:3)=
     &         (DX_ip_j (1:3)-DX_i_j (1:3))/dsf_IBM_fsh(i,jq,j)   

              DYY_i_j(1:3)=( DY_ip_j(1:3)-DY_im_j(1:3))
     &                     /ds_ibm_fsh(i,jq,j)

              VectempPiezo(1:3)=VectempPiezo(1:3)                       !+(GPn)_11
     &                         +DYY_i_j(1:3)                        

              VectempPiezo(1:3)=VectempPiezo(1:3)                       !-w2
     &                         -VECpiezo_tmp(1:3,23,jq,j)

              DX_ip_j(1:3)=VECpiezo_tmp(1:3,14,jq+1,j)
              DX_im_j(1:3)=VECpiezo_tmp(1:3,14,jq-1,j)
              DX_i_j (1:3)=VECpiezo_tmp(1:3,14,jq  ,j)

              DY_im_j(1:3)=
     &         (DX_i_j (1:3)-DX_im_j (1:3))/dsf_IBM_fsh(i,jq-1,j) 

              DY_ip_j(1:3)=
     &         (DX_ip_j (1:3)-DX_i_j (1:3))/dsf_IBM_fsh(i,jq,j)   

              DY_i_j(1:3)=( DY_ip_j(1:3)+DY_im_j(1:3))
     &                     /2.0

              VectempPiezo(1:3)=VectempPiezo(1:3)                       !+4(GRX_1)_1
     &                         +4.0*DY_i_j(1:3)                        

              DX_i_j (1:3)=VECpiezo_tmp(1:3,15,jq  ,j)
              DX_i_jp(1:3)=VECpiezo_tmp(1:3,15,jq,j+1)
              DX_i_jm(1:3)=VECpiezo_tmp(1:3,15,jq,j-1)

              DY_im_j(1:3)=
     &         (DX_i_j (1:3)-DX_i_jm (1:3))/dsf2_IBM_fsh(i,jq,j-1) 

              DY_ip_j(1:3)=
     &         (DX_i_jp (1:3)-DX_i_j (1:3))/dsf2_IBM_fsh(i,jq,j)   

              DY_i_j(1:3)=( DY_ip_j(1:3)+DY_im_j(1:3))
     &                     /2.0

              VectempPiezo(1:3)=VectempPiezo(1:3)                       !+4(ERX_2)_2
     &                         +4.0*DY_i_j(1:3)                        

              DX_i_j (1:3)=VECpiezo_tmp(1:3,16,jq  ,j)
              DX_i_jp(1:3)=VECpiezo_tmp(1:3,16,jq,j+1)
              DX_i_jm(1:3)=VECpiezo_tmp(1:3,16,jq,j-1)

              DY_im_j(1:3)=
     &         (DX_i_j (1:3)-DX_i_jm (1:3))/dsf2_IBM_fsh(i,jq,j-1) 

              DY_ip_j(1:3)=
     &         (DX_i_jp (1:3)-DX_i_j (1:3))/dsf2_IBM_fsh(i,jq,j)   

              DY_i_j(1:3)=( DY_ip_j(1:3)+DY_im_j(1:3))
     &                     /2.0

              VectempPiezo(1:3)=VectempPiezo(1:3)                       !+4(ERX_2)_2
     &                         -4.0*DY_i_j(1:3)                        

              DX_ip_j(1:3)=VECpiezo_tmp(1:3,17,jq+1,j)
              DX_im_j(1:3)=VECpiezo_tmp(1:3,17,jq-1,j)
              DX_i_j (1:3)=VECpiezo_tmp(1:3,17,jq  ,j)

              DY_im_j(1:3)=
     &         (DX_i_j (1:3)-DX_im_j (1:3))/dsf_IBM_fsh(i,jq-1,j) 

              DY_ip_j(1:3)=
     &         (DX_ip_j (1:3)-DX_i_j (1:3))/dsf_IBM_fsh(i,jq,j)   

              DY_i_j(1:3)=( DY_ip_j(1:3)+DY_im_j(1:3))
     &                     /2.0

              VectempPiezo(1:3)=VectempPiezo(1:3)                       !+4(GRX_1)_1
     &                         -4.0*DY_i_j(1:3)  


               Fpiezo1_fsh(i,jq,j)=                 !+(EPn)_22
     &                          VectempPiezo(1) 
               Fpiezo2_fsh(i,jq,j)=                 !+(EPn)_22
     &                          VectempPiezo(2) 
               Fpiezo3_fsh(i,jq,j)=                  !+(EPn)_22
     &                          VectempPiezo(3) 
             Enddo
             Enddo
            endif
          endif
        if(ndim .gt. 2) then
          ddcont=(min_grid_x*min_grid_y*min_grid_z)**(1.0/3.0)
        else
          ddcont=sqrt(min_grid_x*min_grid_y)
        endif
        i=ibdy

        if(ContactForceFlag(i2g)) then

           do ibkt2=1,NBucketnum

             ibktmp1=mod(ibkt2,IBucketnum(1)*IBucketnum(2))
             if(ibktmp1 .eq. 0) ibktmp1=IBucketnum(1)*IBucketnum(2)

             ibktx=mod(ibktmp1,IBucketnum(1))
             if(ibktx .eq. 0) ibktx=IBucketnum(1)

             ibkty=int((ibktmp1-1)/IBucketnum(1))+1
             ibktz=int((ibkt2-1)/(IBucketnum(1)*IBucketnum(2)))+1

             ibktmin(1)=max(1,ibktx-1)
             ibktmax(1)=min(IBucketnum(1),ibktx+1)

             ibktmin(2)=max(1,ibkty-1)
             ibktmax(2)=min(IBucketnum(2),ibkty+1)

             ibktmin(3)=max(1,ibktz-1)
             ibktmax(3)=min(IBucketnum(3),ibktz+1)

             do ibkt_i=PBucket(i2g,ibkt2),PBucket(i2g,ibkt2+1)-1
                jq2=sBucket_fsh(i,ibkt2,ibkt_i,2)
                j2 =sBucket_fsh(i,ibkt2,ibkt_i,1)
                do i2=1,nFixcontact
                        if((
     &                  abs((gy_ibm_massive_fsh(i,jq2,j2)
     &                     -xFixcontact(k,2))
     &                       /min_grid_y)
     &                 .le.12.0) .and.
     &                 (abs((gx_ibm_massive_fsh(i,jq2,j2)-
     &                     -xFixcontact(k,1))
     &                       /min_grid_x)
     &                 .le.12.0) .and.
     &                 (abs((gz_ibm_massive_fsh(i,jq2,j2)-
     &                     -xFixcontact(k,3))
     &                       /min_grid_z)
     &                 .le.12.0) ) then

                         temp_ibm1= 
     &                         ((ksh_tmp
     &                     -xFixcontact(k,2))
     &                     /(min_grid_y))

                           call delta_fun(delta_typey,temp_ibm1,fn2)

                          temp_ibm2= 
     &                        ((gx_ibm_massive_fsh(i,jq2,j2)
     &                     -xFixcontact(k,1))
     &                     /(min_grid_x))

                           call delta_fun(delta_typex,temp_ibm2,fn1)

                          if(ndim .gt. 2) then

                             temp_ibm3= 
     &                          ((gz_ibm_massive_fsh(i,jq2,j2)
     &                     -xFixcontact(k,3))
     &                       /(min_grid_z) )
                           call delta_fun(delta_typez,temp_ibm3,fn3)
                          else
                             temp_ibm3=0.0
                             fn3=1.0
                          endif

                         temp3_ibm=
     &                   sqrt((temp_ibm1*min_grid_y)**2
     &                      +(temp_ibm2*min_grid_x)**2
     &                      +(temp_ibm3*min_grid_z)**2)+1.0d-9

                          f_impuls1_fsh(i,jq2,j2)= 
     &                               f_impuls1_fsh(i,jq2,j2)+
     &                               fn1*fn2*fn3
     &                               *ds_ibm_fsh(i,jq2,j2) 
     &                               *ds2_ibm_fsh(i,jq2,j2)
     &                               *impactpen(1)
     &                        /(min_grid_x*min_grid_y*min_grid_z)
     &                        *(gx_ibm_massive_fsh(i,jq2,j2)
     &                         -xFixcontact(k,1))
     &                          /temp3_ibm
                          f_impuls2_fsh(i,jq2,j2)=  
     &                               f_impuls2_fsh(i,jq2,j2)+
     &                               fn1*fn2*fn3
     &                               *ds_ibm_fsh(i,jq2,j2) 
     &                               *ds2_ibm_fsh(i,jq2,j2)
     &                               *impactpen(1)
     &                        /(min_grid_x*min_grid_y*min_grid_z)
     &                         *(ksh_tmp
     &                          -xFixcontact(k,1))/temp3_ibm
                          if(ndim .gt. 2) 
     &                    f_impuls3_fsh(i,jq2,j2)=  
     &                               f_impuls3_fsh(i,jq2,j2)+
     &                               fn1*fn2*fn3
     &                               *ds_ibm_fsh(i,jq2,j2) 
     &                               *ds2_ibm_fsh(i,jq2,j2)
     &                               *impactpen(1)
     &                        /(min_grid_x*min_grid_y*min_grid_z)
     &                        *(gz_ibm_massive_fsh(i,jq2,j2)
     &                          -xFixcontact(k,3))
     &                        /temp3_ibm
                        endif
                  enddo   !i2i
             enddo
           enddo


          if (i2g .le. nr_ibm_f) then

! contact for periodic structures remains
!             if(BoundaryFibShell(i,1,1) .eq. 3) then 
!               jstarttmp=1
!             else
!               jstarttmp=0
!             endif

!             if(BoundaryFibShell(i,2,1) .eq. 3) then 
!               jqstarttmp=1
!             else
!               jqstarttmp=0
!             endif
           do ibkt2=1,NBucketnum

             ibktmp1=mod(ibkt2,IBucketnum(1)*IBucketnum(2))
             if(ibktmp1 .eq. 0) ibktmp1=IBucketnum(1)*IBucketnum(2)

             ibktx=mod(ibktmp1,IBucketnum(1))
             if(ibktx .eq. 0) ibktx=IBucketnum(1)

             ibkty=int((ibktmp1-1)/IBucketnum(1))+1
             ibktz=int((ibkt2-1)/(IBucketnum(1)*IBucketnum(2)))+1

             ibktmin(1)=max(1,ibktx-1)
             ibktmax(1)=min(IBucketnum(1),ibktx+1)

             ibktmin(2)=max(1,ibkty-1)
             ibktmax(2)=min(IBucketnum(2),ibkty+1)

             ibktmin(3)=max(1,ibktz-1)
             ibktmax(3)=min(IBucketnum(3),ibktz+1)

             do ibkt_i=PBucket(i2g,ibkt2),PBucket(i2g,ibkt2+1)-1
                jq2=sBucket_fsh(i,ibkt2,ibkt_i,2)
                j2 =sBucket_fsh(i,ibkt2,ibkt_i,1)

               do i2=1,nr_ibm_fsh
                  i3g=Ilocglb_fsh(i2)
                  if(i3g .le. nr_ibm_fb) then
                  if(i2 .ne. i) then
                    do ibkts1=ibktmin(1),ibktmax(1)
                    do ibkts2=ibktmin(2),ibktmax(2)
                    do ibkts3=ibktmin(3),ibktmax(3)
                      ibkt=
     &                       ibkts1
     &                     +(ibkts2-1)*IBucketnum(1)
     &                     +(ibkts3-1)*IBucketnum(1)*IBucketnum(2)
                      do ibkt2_i=PBucket(i3g,ibkt),PBucket(i3g,ibkt+1)-1
                         jq=sBucket_fsh(i2,ibkt,ibkt2_i,2)
                         j =sBucket_fsh(i2,ibkt,ibkt2_i,1)     

                        ksh_tmp=sqrt(
     &                     (gy_ibm_fsh(i,jq2,j2)-
     &                          gy_ibm_fsh(i2,jq,j))**2+
     &                    (gx_ibm_fsh(i,jq2,j2)-
     &                          gx_ibm_fsh(i2,jq,j))**2+
     &                    (gz_ibm_fsh(i,jq2,j2)-
     &                          gz_ibm_fsh(i2,jq,j))**2)
                        if(ksh_tmp/ddcont .le. 6.0 ) then
                              temp_ibm1=max(ksh_tmp/ddcont-1.0,0.0)
                              call delta_fun(delta_typey,temp_ibm1,fn1)
                              temp3_ibm=ksh_tmp
                              dxcont(1)=temp3_ibm/ddcont
                              dxcont(2)=1.0/(1+exp(10*(dxcont(1)-1.0)))
                              dxcont(3)=impactpen(1)
     &                            +dxcont(2)*impactpen(2)

                              ksh_tmp=0.5*(
     &                               sqrt(f_impulsHis1_fsh(i,jq2,j2)**2
     &                                   +f_impulsHis2_fsh(i,jq2,j2)**2
     &                                   +f_impulsHis3_fsh(i,jq2,j2)**2)
     &                          +1.0*sqrt(f_impulsHis1_fsh(i2,jq,j )**2
     &                                   +f_impulsHis2_fsh(i2,jq,j )**2
     &                                   +f_impulsHis3_fsh(i2,jq,j )**2)
     &                                    )
                              ksh_tmp=max(ksh_tmp,1.0)

                              if(0 .eq. 1) then
                                fn1=1.0/4.0

                                if(temp3_ibm/ddcont>1.0)then
                                  dxcont(1)=ksh_tmp*
     &                             exp(-impactpen(1)*
     &                             (temp3_ibm/ddcont-1.0)/ksh_tmp)
                                else
                                  dxcont(1)=ksh_tmp
     &                             -impactpen(2)*(temp3_ibm/ddcont-1.0)
                                endif
                                dxcont(3)=dxcont(1)   
                              endif                              

                              f_impuls1_fsh(i,jq2,j2)=
     &                                f_impuls1_fsh(i,jq2,j2)+
     &                               fn1*4.0*
     &                               *dxcont(3)*ksh_tmp
     &                               *( gx_ibm_fsh(i,jq2,j2)
     &                                 -gx_ibm_fsh(i2,jq,j))
     &                               /temp3_ibm


                              f_impuls2_fsh(i,jq2,j2)=
     &                                f_impuls2_fsh(i,jq2,j2)+
     &                               fn1*4.0*
     &                               *dxcont(3)*ksh_tmp
     &                              *(gy_ibm_fsh(i,jq2,j2)
     &                               -gy_ibm_fsh(i2,jq,j))
     &                               /temp3_ibm
                              if(ndim .gt. 2) then
  

                                 f_impuls3_fsh(i,jq2,j2)=
     &                               f_impuls3_fsh(i,jq2,j2)+
     &                               fn1*4.0*
     &                              *dxcont(3)*ksh_tmp
     &                              *(gz_ibm_fsh(i,jq2,j2)
     &                               -gz_ibm_fsh(i2,jq,j))
     &                               /temp3_ibm

                              endif
                         endif
                     end do  !ibkt2_i
                     enddo   !ibkts1
                     enddo   !ibkts2
                     enddo   !ibkts3
                  endif
                  endif
               enddo   !i2i
               i2=ibdy
               i2g=ibdyg
                    do ibkts1=ibktmin(1),ibktmax(1)
                    do ibkts2=ibktmin(2),ibktmax(2)
                    do ibkts3=ibktmin(3),ibktmax(3)
                      ibkt=
     &                       ibkts1
     &                     +(ibkts2-1)*IBucketnum(1)
     &                     +(ibkts3-1)*IBucketnum(1)*IBucketnum(2)
                      do ibkt2_i=PBucket(i2g,ibkt),PBucket(i2g,ibkt+1)-1
                         jq=sBucket_fsh(i,ibkt,ibkt2_i,2)
                         j =sBucket_fsh(i,ibkt,ibkt2_i,1)   
                     if( (abs(j2-j) .gt. 8) 
     &                   .and. (    (abs(jq2-jq)  .gt. 8)
     &                          .or.(nq_ibm_r_fsh(i2) .eq. 1 ) ) ) then
                        if((
     &    abs((gy_ibm_massive_fsh(i,jq,j2)-gy_ibm_massive_fsh(i2,jq,j))
     &    /min_grid_y)
     &    .le.6.0) .and.
     &    (abs((gx_ibm_massive_fsh(i,jq,j2)-gx_ibm_massive_fsh(i2,jq,j))
     &    /min_grid_x)
     &    .le.6.0) .and.
     &    (abs((gz_ibm_massive_fsh(i,jq,j2)-gz_ibm_massive_fsh(i2,jq,j))
     &    /min_grid_z)
     &    .le.6.0) ) then
                     ksh_tmp=gx_ibm_massive_fsh(i,jq2,j2)

                     temp_ibm1= 
     &                   ((gy_ibm_massive_fsh(i,jq2,j2)
     &                    -gy_ibm_massive_fsh(i2,jq,j))
     &                /(1.0*min_grid_y) )
                      call delta_fun(delta_typey,temp_ibm1,fn2)

                     temp_ibm2= 
     &                   ((ksh_tmp-gx_ibm_massive_fsh(i2,jq,j))
     &               /(1.0*min_grid_x) )
                      call delta_fun(delta_typex,temp_ibm2,fn1)

                      if(ndim .gt. 2) then
                        temp_ibm3= 
     &                      ((gz_ibm_massive_fsh(i,jq2,j2)
     &                       -gz_ibm_massive_fsh(i2,jq,j))
     &                      /(1.0*min_grid_z) )
                           call delta_fun(delta_typez,temp_ibm3,fn3)
                      else
                         temp_ibm3=0.0;fn3=1.0
                      endif

                        temp3_ibm=
     &                  sqrt((temp_ibm1*min_grid_y)**2

     &                      +(temp_ibm2*min_grid_x)**2
     &                      +(temp_ibm3*min_grid_z)**2)*1.00+1.0d-9

                              dxcont(1)=temp3_ibm/ddcont
                              dxcont(2)=1.0/(1+exp(10*(dxcont(1)-1.0)))
                              dxcont(3)=impactpen(1)
     &                            +dxcont(2)*impactpen(2)


                 f_impuls1_fsh(i,jq2,j2)= f_impuls1_fsh(i,jq2,j2)+
     &                                fn1*fn2*fn3
     &                               *ds_ibm_fsh(i,jq2,j2)

     &                                *ds2_ibm_fsh(i,jq2,j2)
     &                               *dxcont(3)
     &                               /(min_grid_x*min_grid_y*min_grid_z)
     &                               *(ksh_tmp
     &                                -gx_ibm_massive_fsh(i2,jq,j))
     &                                /temp3_ibm
                 f_impuls2_fsh(i,jq2,j2)= f_impuls2_fsh(i,jq2,j2)+
     &                               fn1*fn2*fn3
     &                               *ds_ibm_fsh(i,jq2,j2)

     &                                *ds2_ibm_fsh(i,jq2,j2)
     &                               *dxcont(3)
     &                               /(min_grid_x*min_grid_y*min_grid_z)
     &                               *(gy_ibm_massive_fsh(i,jq2,j2)
     &                                -gy_ibm_massive_fsh(i2,jq,j))
     &                               /temp3_ibm
                 if(ndim .gt. 2)  
     &               f_impuls3_fsh(i,jq2,j2)= f_impuls3_fsh(i,jq2,j2)+
     &                                    fn1*fn2*fn3
     &                                    *ds_ibm_fsh(i,jq2,j2)
     &                                    *ds2_ibm_fsh(i,jq2,j2)
     &                                    *dxcont(3)
     &                                     /(min_grid_x
     &                                      *min_grid_y   
     &                                      *min_grid_z)
     &                                    *(gz_ibm_massive_fsh(i,jq2,j2)
     &                                     -gz_ibm_massive_fsh(i2,jq,j))
     &                                     /temp3_ibm

                         endif
                     endif !j2-j>20
                     end do  !ibkt2_i
                     enddo   !ibkts1
                     enddo   !ibkts2
                     enddo   !ibkts3
             enddo !ibkt_i
             enddo !ibkt2

             if(channelcontacty) then

             do jq2=1,nq_ibm_r_fsh(i)
             do j2=1,ns_ibm_r_fsh(i)

               do i2=1,2  !with channel bndry in y
                     if(i2 .eq. 1) then
                        h_channel=gy(nygrid_ibm)
                        if (gy_ibm_massive_fsh(i,jq2,j2)
     &                      .lt. h_channel) then
                            ksh_tmp=gy_ibm_massive_fsh(i,jq2,j2)
                        else
                           ksh_tmp=h_channel-1.0d-9
                        endif
                     else
                        h_channel=gy(2)
                        if (gy_ibm_massive_fsh(i,jq2,j2)
     &                      .gt. h_channel) then
                            ksh_tmp=gy_ibm_massive_fsh(i,jq2,j2)
                        else
                           ksh_tmp=h_channel+1.0d-9
                        endif
                     endif
                     do j=1,nxgrid_ibm
                       do k=1,nzgrid_ibm
                        if((
     &                  abs((gy_ibm_massive_fsh(i,jq2,j2)-h_channel)
     &                       /min_grid_y)
     &                 .le.12.0) .and.
     &                 (abs((gx_ibm_massive_fsh(i,jq2,j2)-gx(j))
     &                       /min_grid_x)
     &                 .le.12.0) .and.
     &                 (abs((gz_ibm_massive_fsh(i,jq2,j2)-gz(k))
     &                       /min_grid_z)
     &                 .le.12.0) ) then

                         temp_ibm1= 
     &                         ((ksh_tmp-h_channel)
     &                     /(min_grid_y))

                           call delta_fun(delta_typey,temp_ibm1,fn2)

                          temp_ibm2= 
     &                        ((gx_ibm_massive_fsh(i,jq2,j2)-gx(j))
     &                     /(min_grid_x))

                           call delta_fun(delta_typex,temp_ibm2,fn1)

                          if(ndim .gt. 2) then

                             temp_ibm3= 
     &                          ((gz_ibm_massive_fsh(i,jq2,j2)-gz(k))
     &                       /(min_grid_z) )
                           call delta_fun(delta_typez,temp_ibm3,fn3)
                          else
                             temp_ibm3=0.0
                             fn3=1.0
                          endif

                         temp3_ibm=
     &                   sqrt((temp_ibm1*min_grid_y)**2
     &                      +(temp_ibm2*min_grid_x)**2
     &                      +(temp_ibm3*min_grid_z)**2)+1.0d-9

                          f_impuls1_fsh(i,jq2,j2)= 
     &                               f_impuls1_fsh(i,jq2,j2)+
     &                               fn1*fn2*fn3
     &                               *ds_ibm_fsh(i,jq2,j2) 
     &                               *ds2_ibm_fsh(i,jq2,j2)
     &                               *impactpen(1)
     &                        /(min_grid_x*min_grid_y*min_grid_z)
     &                        *(gx_ibm_massive_fsh(i,jq2,j2)-gx(j))
     &                          /temp3_ibm
                          f_impuls2_fsh(i,jq2,j2)=  
     &                               f_impuls2_fsh(i,jq2,j2)+
     &                               fn1*fn2*fn3
     &                               *ds_ibm_fsh(i,jq2,j2) 
     &                               *ds2_ibm_fsh(i,jq2,j2)
     &                               *impactpen(1)
     &                        /(min_grid_x*min_grid_y*min_grid_z)
     &                        *(ksh_tmp-h_channel)/temp3_ibm
                          if(ndim .gt. 2) 
     &                    f_impuls3_fsh(i,jq2,j2)=  
     &                               f_impuls3_fsh(i,jq2,j2)+
     &                               fn1*fn2*fn3
     &                               *ds_ibm_fsh(i,jq2,j2) 
     &                               *ds2_ibm_fsh(i,jq2,j2)
     &                               *impactpen(1)
     &                        /(min_grid_x*min_grid_y*min_grid_z)
     &                        *(gz_ibm_massive_fsh(i,jq2,j2)-gz(k))
     &                        /temp3_ibm
                        endif
                    
                   end do !k=1,nz 
                 end do !j=1,nx
               enddo  !i2=1,2
             end do    !j2
             end do    !jq2
             endif !channelcontacty

             if((channelcontactz) .and. (ndim .gt. 2)) then
             do jq2=1,nq_ibm_r_fsh(i)
             do j2=1,ns_ibm_r_fsh(i)

               do i2=1,2  !with channel bndry in z
                     if(i2 .eq. 1) then
                        h_channel=gz(nzgrid_ibm)
                        if (gz_ibm_massive_fsh(i,jq2,j2).lt. h_channel)
     &                    then
                            ksh_tmp=gz_ibm_massive_fsh(i,jq2,j2)
                        else
                            ksh_tmp=h_channel-1.0d-9
                        endif
                     else
                        h_channel=gz(2)
                        if (gz_ibm_massive_fsh(i,jq2,j2).gt. h_channel)
     &                     then
                            ksh_tmp=gz_ibm_massive_fsh(i,jq2,j2)
                        else
                           ksh_tmp=h_channel+1.0d-9
                        endif
                     endif
                     do j=1,nxgrid_ibm
                       do k=1,nygrid_ibm
                        if((
     &                  abs((gy_ibm_massive_fsh(i,jq2,j2)-gy(k))
     &                  /min_grid_y)
     &                 .le.12.0) .and.
     &                 (abs((gx_ibm_massive_fsh(i,jq2,j2)-gx(j))
     &                  /min_grid_x)
     &                 .le.12.0) .and.
     &                 (abs((gz_ibm_massive_fsh(i,jq2,j2)-h_channel)
     &                  /min_grid_z)
     &                 .le.12.0) ) then

                        temp_ibm1= 
     &                         ((gy_ibm_massive_fsh(i,jq2,j2)-gy(k))
     &                       /(min_grid_y) )
                           call delta_fun(delta_typey,temp_ibm1,fn2)

                        temp_ibm2= 
     &                        ((gx_ibm_massive_fsh(i,jq2,j2)-gx(j))
     &                     /(min_grid_x))
                           call delta_fun(delta_typex,temp_ibm2,fn1)

                        temp_ibm3= 
     &                          ((ksh_tmp-h_channel)
     &                       /(min_grid_z) )
                           call delta_fun(delta_typez,temp_ibm3,fn3)


                         temp3_ibm=
     &                   sqrt((temp_ibm1*min_grid_y)**2
     &                      +(temp_ibm2*min_grid_x)**2
     &                      +(temp_ibm3*min_grid_z)**2)+1.0d-9

                          f_impuls1_fsh(i,jq2,j2)=
     &                               f_impuls1_fsh(i,jq2,j2)+
     &                               fn1*fn2*fn3
     &                               *ds_ibm_fsh(i,jq2,j2)
     &                               *ds2_ibm_fsh(i,jq2,j2)
     &                               *impactpen(1)
     &                        /(min_grid_x*min_grid_y*min_grid_z)
     &                        *(gx_ibm_massive_fsh(i,jq2,j2)-gx(j))
     &                        /temp3_ibm

                          f_impuls2_fsh(i,jq2,j2)=
     &                               f_impuls2_fsh(i,jq2,j2)+
     &                               fn1*fn2*fn3
     &                               *ds_ibm_fsh(i,jq2,j2)
     &                               *ds2_ibm_fsh(i,jq2,j2)
     &                               *impactpen(1)
     &                        /(min_grid_x*min_grid_y*min_grid_z)
     &                        *(gy_ibm_massive_fsh(i,jq2,j2)-gy(k))
     &                        /temp3_ibm

                          f_impuls3_fsh(i,jq2,j2)=
     &                               f_impuls3_fsh(i,jq2,j2)+
     &                               fn1*fn2*fn3
     &                               *ds_ibm_fsh(i,jq2,j2)
     &                               *ds2_ibm_fsh(i,jq2,j2)
     &                               *impactpen(1)
     &                        /(min_grid_x*min_grid_y*min_grid_z)
     &                        *(ksh_tmp-h_channel)/temp3_ibm
                        endif
                    
                   end do !k=1,nz 
                 end do !j=1,nx
               enddo  !i2=1,2
             end do    !j2
             end do    !jq2
             endif !channelcontactz
          endif   !for if ((i .le. nr_ibm_f).and.(i .ge. 1)) then
          endif   !ContactForceFlag(i)

        i2g=ibdyg
        do jq=1,nq_ibm_r_fsh(i)
        do j=1,ns_ibm_r_fsh(i)
           finer_1_ibm_fsh(i,jq,j)= density_coefp(i2g) *
     &    ( gx_ibmo1_fsh(i,jq,j)-gx_ibm_massiveo_fsh(i,jq,j) )/dt2
           finer_2_ibm_fsh(i,jq,j)= density_coefp(i2g) *
     &    ( gy_ibmo1_fsh(i,jq,j)-gy_ibm_massiveo_fsh(i,jq,j) )/dt2
           if(ndim .gt. 2)  
     &     finer_3_ibm_fsh(i,jq,j)= density_coefp(i2g) *
     &    ( gz_ibmo1_fsh(i,jq,j)-gz_ibm_massiveo_fsh(i,jq,j) )/dt2
         end do
         end do

!++++++++++++++++++++ FOR  TEST  OF  AIRBAGE INFLATION : START ++++++++++++++++++++++++++++ 

        if (ExternalPressureFlag(ibdyg)) then

        i=ibdy  
        include "distIBM_normalPressure_fn.Fi" 
        temp_ibm1=temp_ibm2*p_inflation
        do jq=1,nq_ibm_r_fsh(i)
        do j=1,ns_ibm_r_fsh(i)
             fibm1_fsh(i,jq,j)=fibm1_fsh(i,jq,j)
     &          -fibm1pres_fsh(jq,j)
     &          *temp_ibm1
             fibm2_fsh(i,jq,j)=fibm2_fsh(i,jq,j)
     &          -fibm2pres_fsh(jq,j)
     &          *temp_ibm1
             fibm3_fsh(i,jq,j)=fibm3_fsh(i,jq,j)
     &          -fibm3pres_fsh(jq,j)
     &          *temp_ibm1
         end do
         end do
        endif
           i=ibdy

! link forces
      if(.not. allocated(Stiff_link_fsh)) 
     &     allocate (Stiff_link_fsh(nq_ibm_fsh,ns_ibm_fsh)) 
         Stiff_link_fsh=0.0

      i2l=i
! explicit link
         if(1 .eq. 0) then
         do j=1,target_num(i2g)
             k=target_point_num_fsh(i,1,j)
             jq=target_point_num_fsh(i,2,j)
             k2=jq
             temp_ibm1=  
     &           (gx_ibm_massive_fsh(i,jq,k)-target_points_fsh(i,j,1))
             temp_ibm2=  
     &           (gy_ibm_massive_fsh(i,jq,k)-target_points_fsh(i,j,2))
             temp_ibm3=  
     &           (gz_ibm_massive_fsh(i,jq,k)-target_points_fsh(i,j,3))
             include "distIBM_target_k_rampfn.Fi"               
             if(time2 .le. target_t_link_fsh(i,j)) then
                 ksh_tmp=target_k_link_fsh(i,j)*target_timefn
             else
                 ksh_tmp=0.0
             endif
             force_points_fsh(i,j,1)=k_link*temp_ibm1*ksh_tmp
             force_points_fsh(i,j,2)=k_link*temp_ibm2*ksh_tmp
             if(ndim .gt. 2)  
     &          force_points_fsh(i,j,3)=k_link*temp_ibm3*ksh_tmp

             temp_ibm1=target_points_v_fsh(i,j,1)
             temp_ibm2=target_points_v_fsh(i,j,2)
             temp_ibm3=target_points_v_fsh(i,j,3)

             temp_ibm1=vibm1_pre_fsh(i,jq,k)-temp_ibm1
             temp_ibm2=vibm2_pre_fsh(i,jq,k)-temp_ibm2
             temp_ibm3=vibm3_pre_fsh(i,jq,k)-temp_ibm3

             force_points_fsh(i,j,1)=force_points_fsh(i,j,1)+
     &              cs_ibm_target(i2g)*k_link*temp_ibm1*ksh_tmp
             force_points_fsh(i,j,2)=force_points_fsh(i,j,2)+
     &              cs_ibm_target(i2g)*k_link*temp_ibm2*ksh_tmp
             if(ndim .gt. 2)  
     &          force_points_fsh(i,j,3)=force_points_fsh(i,j,3)+
     &              cs_ibm_target(i2g)*k_link*temp_ibm3*ksh_tmp

             jq2=jq
             j2=k
	     fn1=1.d0/(ds_ibm_fsh(i,jq,j2)*ds2_ibm_fsh(i,jq,j2))
                 f_link1_fsh(i,jq2,j2)= f_link1_fsh(i,jq2,j2)+
     &                               fn1*force_points_fsh(i,j,1)
                 f_link2_fsh(i,jq2,j2)= f_link2_fsh(i,jq2,j2)+
     &                               fn1*force_points_fsh(i,j,2)
                 if(ndim .gt. 2)  
     &              f_link3_fsh(i,jq2,j2)= f_link3_fsh(i,jq2,j2)+
     &                               fn1*force_points_fsh(i,j,3)

        enddo  !jq
       else
!implicit link
         do j=1,target_num(i2g)
             k=target_point_num_fsh(i,1,j)
             jq=target_point_num_fsh(i,2,j)
             k2=jq
              temp_ibm1=  
     &           (-target_points_fsh(i,j,1))
             temp_ibm2=  
     &           (-target_points_fsh(i,j,2))
             temp_ibm3=  
     &           (-target_points_fsh(i,j,3))

             include "distIBM_target_k_rampfn.Fi"               
             if(time2 .le. target_t_link_fsh(i,j)) then
                 ksh_tmp=target_k_link_fsh(i,j)*target_timefn
             else
                 ksh_tmp=0.0
             endif
             force_points_fsh(i,j,1)=k_link*temp_ibm1*ksh_tmp
             force_points_fsh(i,j,2)=k_link*temp_ibm2*ksh_tmp
             if(ndim .gt. 2)  
     &          force_points_fsh(i,j,3)=k_link*temp_ibm3*ksh_tmp

             Stiff_points_fsh=k_link*ksh_tmp

             temp_ibm1=target_points_v_fsh(i,j,1)
             temp_ibm2=target_points_v_fsh(i,j,2)
             temp_ibm3=target_points_v_fsh(i,j,3)

             temp_ibm1=-gx_ibm_fsh(i,jq,k)/dt-temp_ibm1
             temp_ibm2=-gy_ibm_fsh(i,jq,k)/dt-temp_ibm2
             temp_ibm3=-gz_ibm_fsh(i,jq,k)/dt-temp_ibm3


             force_points_fsh(i,j,1)=force_points_fsh(i,j,1)+
     &              cs_ibm_target(i2g)*k_link*temp_ibm1*ksh_tmp
             force_points_fsh(i,j,2)=force_points_fsh(i,j,2)+
     &              cs_ibm_target(i2g)*k_link*temp_ibm2*ksh_tmp
             if(ndim .gt. 2)  
     &          force_points_fsh(i,j,3)=force_points_fsh(i,j,3)+
     &              cs_ibm_target(i2g)*k_link*temp_ibm3*ksh_tmp

             Stiff_points_fsh=Stiff_points_fsh+
     &              cs_ibm_target(i2g)*k_link*ksh_tmp/dt

             jq2=jq
             j2=k
	     fn1=1.d0/(ds_ibm_fsh(i,jq,j2)*ds2_ibm_fsh(i,jq,j2))
                 f_link1_fsh(i,jq2,j2)= f_link1_fsh(i,jq2,j2)+
     &                               fn1*force_points_fsh(i,j,1)
                 f_link2_fsh(i,jq2,j2)= f_link2_fsh(i,jq2,j2)+
     &                               fn1*force_points_fsh(i,j,2)
                 if(ndim .gt. 2)  
     &              f_link3_fsh(i,jq2,j2)= f_link3_fsh(i,jq2,j2)+
     &                               fn1*force_points_fsh(i,j,3)

              Stiff_link_fsh(jq2,j2)= Stiff_points_fsh*fn1*dt2  

        enddo  !j
        endif


      if(.not. allocated(aacsrfibershell))  then   
        allocate (iacsrfibershell(ns_ibm_fsh*nq_ibm_fsh+1))   
        allocate(vecRHSfibershell(ns_ibm_fsh*nq_ibm_fsh),
     &           vecXfibershell(ns_ibm_fsh*nq_ibm_fsh) )
        
        ntermiMAXfibershell=ns_ibm_fsh*nq_ibm_fsh*25
        allocate(aacsrfibershell(ntermiMAXfibershell)
     &          ,jacsrfibershell(ntermiMAXfibershell))
      endif
      jacsrfibershell=0
      aacsrfibershell=0.d0
      iacsrfibershell=0
      
      i=ibdy
      i2g=ibdyg

      FlagForceCalculation=1 
       if(e4coef(i2g) .ge. 0) then
       Call  matfibrous_Yue(
     &         ns_ibm_fsh*nq_ibm_fsh,ntermiMAXfibershell
     &        ,iacsrfibershell,jacsrfibershell,aacsrfibershell
     &        ,nq_ibm_r_fsh(i),ns_ibm_r_fsh(i)
     &        ,dt2
     &        ,density_coef(i2g),cs_ibm(i2g),density_coefp(i2g)
     &        ,BoundaryFibShell_fsh(i,1:2,1:2)
     &        ,Stiff_link_fsh(1:nq_ibm_r_fsh(i),1:ns_ibm_r_fsh(i))
     &        ,Siga(1:nq_ibm_r_fsh(i),1:ns_ibm_r_fsh(i),1,1)   
     &        ,Siga(1:nq_ibm_r_fsh(i),1:ns_ibm_r_fsh(i),1,2) 
     &        ,Siga(1:nq_ibm_r_fsh(i),1:ns_ibm_r_fsh(i),2,1) 
     &        ,Siga(1:nq_ibm_r_fsh(i),1:ns_ibm_r_fsh(i),2,2)            
     &        ,gama(1:nq_ibm_r_fsh(i),1:ns_ibm_r_fsh(i),1,1)   
     &        ,gama(1:nq_ibm_r_fsh(i),1:ns_ibm_r_fsh(i),1,2) 
     &        ,gama(1:nq_ibm_r_fsh(i),1:ns_ibm_r_fsh(i),2,1) 
     &        ,gama(1:nq_ibm_r_fsh(i),1:ns_ibm_r_fsh(i),2,2)
     &        ,ds_ibm_fsh(i,1:nq_ibm_r_fsh(i),1:ns_ibm_r_fsh(i))   
     &        ,dsf_ibm_fsh(i,1:nq_ibm_r_fsh(i),1:ns_ibm_r_fsh(i)) 
     &        ,dk_ibm_fsh(i,1:nq_ibm_r_fsh(i),1:ns_ibm_r_fsh(i)) 
     &        ,dkf_ibm_fsh(i,1:nq_ibm_r_fsh(i),1:ns_ibm_r_fsh(i))    
     &        ,ds2_ibm_fsh(i,1:nq_ibm_r_fsh(i),1:ns_ibm_r_fsh(i))   
     &        ,dsf2_ibm_fsh(i,1:nq_ibm_r_fsh(i),1:ns_ibm_r_fsh(i)) 
     &        ,dk2_ibm_fsh(i,1:nq_ibm_r_fsh(i),1:ns_ibm_r_fsh(i)) 
     &        ,dkf2_ibm_fsh(i,1:nq_ibm_r_fsh(i),1:ns_ibm_r_fsh(i))  
     &        ,sigB(1:4,1:nq_ibm_r_fsh(i)+ns_ibm_r_fsh(i),1:3) 
     &        ,e4coef(i2g)            
     &        ,1
     &        ,FlagForceCalculation(1:nq_ibm_r_fsh(i) 
     &                             ,1:ns_ibm_r_fsh(i)))
!      timetemp2=1.0 !(1.d0-exp(-time2/0.05))
       else
       Call  matfibrous_Huang(
     &         ns_ibm_fsh*nq_ibm_fsh,ntermiMAXfibershell
     &        ,iacsrfibershell,jacsrfibershell,aacsrfibershell
     &        ,nq_ibm_r_fsh(i),ns_ibm_r_fsh(i)
     &        ,dt2
     &        ,density_coef(i2g),cs_ibm(i2g),density_coefp(i2g)
     &        ,BoundaryFibShell_fsh(i,1:2,1:2)
     &        ,Stiff_link_fsh(1:nq_ibm_r_fsh(i),1:ns_ibm_r_fsh(i))
     &        ,Siga(1:nq_ibm_r_fsh(i),1:ns_ibm_r_fsh(i),1,1)   
     &        ,Siga(1:nq_ibm_r_fsh(i),1:ns_ibm_r_fsh(i),1,2) 
     &        ,Siga(1:nq_ibm_r_fsh(i),1:ns_ibm_r_fsh(i),2,1) 
     &        ,Siga(1:nq_ibm_r_fsh(i),1:ns_ibm_r_fsh(i),2,2)            
     &        ,gama(1:nq_ibm_r_fsh(i),1:ns_ibm_r_fsh(i),1,1)   
     &        ,gama(1:nq_ibm_r_fsh(i),1:ns_ibm_r_fsh(i),1,2) 
     &        ,gama(1:nq_ibm_r_fsh(i),1:ns_ibm_r_fsh(i),2,1) 
     &        ,gama(1:nq_ibm_r_fsh(i),1:ns_ibm_r_fsh(i),2,2)
     &        ,ds_ibm_fsh(i,1:nq_ibm_r_fsh(i),1:ns_ibm_r_fsh(i))   
     &        ,dsf_ibm_fsh(i,1:nq_ibm_r_fsh(i),1:ns_ibm_r_fsh(i)) 
     &        ,dk_ibm_fsh(i,1:nq_ibm_r_fsh(i),1:ns_ibm_r_fsh(i)) 
     &        ,dkf_ibm_fsh(i,1:nq_ibm_r_fsh(i),1:ns_ibm_r_fsh(i))    
     &        ,ds2_ibm_fsh(i,1:nq_ibm_r_fsh(i),1:ns_ibm_r_fsh(i))   
     &        ,dsf2_ibm_fsh(i,1:nq_ibm_r_fsh(i),1:ns_ibm_r_fsh(i)) 
     &        ,dk2_ibm_fsh(i,1:nq_ibm_r_fsh(i),1:ns_ibm_r_fsh(i)) 
     &        ,dkf2_ibm_fsh(i,1:nq_ibm_r_fsh(i),1:ns_ibm_r_fsh(i))    
     &        ,1)
       endif


        if(ContactForceFlag(i2g)) then
       j2=0
       do jq=1,nq_ibm_r_fsh(i) 
       do j=1,ns_ibm_r_fsh(i) 
            j2=j2+1
            vecXfibershell(j2) = gx_ibm_fsh(i,jq,j)
       end do
       end do
       call ax_cr ( ns_ibm_r_fsh(i)*nq_ibm_r_fsh(i)
     & ,ntermiMAXfibershell
     & ,iacsrfibershell(1:ns_ibm_r_fsh(i)*nq_ibm_r_fsh(i)+1)
     & , jacsrfibershell(1: ntermiMAXfibershell)
     & , aacsrfibershell(1: ntermiMAXfibershell)
     & , vecXfibershell(1:ns_ibm_r_fsh(i)*nq_ibm_r_fsh(i))
     & , vecRHSfibershell(1:ns_ibm_r_fsh(i)*nq_ibm_r_fsh(i))
     &   )
       j2=0

       ksh_tmp=density_coef(i2g)+density_coefp(i2g)
     &        +cs_ibm(i2g)/2.0*dt
       do jq=1,nq_ibm_r_fsh(i) 
       do j=1,ns_ibm_r_fsh(i) 
            j2=j2+1
            f_impulsHis1_fsh(i,jq,j)=
     &      -(  vecRHSfibershell(j2)
     &          -ksh_tmp*gx_ibm_fsh(i,jq,j)
     &       )/dt2
!     &      +(gx_ibm_fsh(i,jq,j)-gx_ibmpre_fsh(i,jq,j))/dt2
       end do
       end do
       vecXfibershell=0.0
       vecRHSfibershell=0.0


       j2=0
       do jq=1,nq_ibm_r_fsh(i) 
       do j=1,ns_ibm_r_fsh(i) 
            j2=j2+1
            vecXfibershell(j2) = gy_ibm_fsh(i,jq,j)
       end do
       end do
       call ax_cr ( ns_ibm_r_fsh(i)*nq_ibm_r_fsh(i)
     & ,ntermiMAXfibershell
     & ,iacsrfibershell(1:ns_ibm_r_fsh(i)*nq_ibm_r_fsh(i)+1)
     & , jacsrfibershell(1: ntermiMAXfibershell)
     & , aacsrfibershell(1: ntermiMAXfibershell)
     & , vecXfibershell(1:ns_ibm_r_fsh(i)*nq_ibm_r_fsh(i))
     & , vecRHSfibershell(1:ns_ibm_r_fsh(i)*nq_ibm_r_fsh(i))
     &   )
       j2=0

       do jq=1,nq_ibm_r_fsh(i) 
       do j=1,ns_ibm_r_fsh(i) 
            j2=j2+1
            f_impulsHis2_fsh(i,jq,j)=
     &      -(   vecRHSfibershell(j2)
     &          -ksh_tmp*gy_ibm_fsh(i,jq,j)
     &       )/dt2
!     &      +(gy_ibm_fsh(i,jq,j)-gy_ibmpre_fsh(i,jq,j))/dt2
       end do
       end do
       vecXfibershell=0.0
       vecRHSfibershell=0.0

       j2=0
       do jq=1,nq_ibm_r_fsh(i) 
       do j=1,ns_ibm_r_fsh(i) 
            j2=j2+1
            vecXfibershell(j2) = gz_ibm_fsh(i,jq,j)
       end do
       end do
       call ax_cr ( ns_ibm_r_fsh(i)*nq_ibm_r_fsh(i)
     & ,ntermiMAXfibershell
     & ,iacsrfibershell(1:ns_ibm_r_fsh(i)*nq_ibm_r_fsh(i)+1)
     & , jacsrfibershell(1: ntermiMAXfibershell)
     & , aacsrfibershell(1: ntermiMAXfibershell)
     & , vecXfibershell(1:ns_ibm_r_fsh(i)*nq_ibm_r_fsh(i))
     & , vecRHSfibershell(1:ns_ibm_r_fsh(i)*nq_ibm_r_fsh(i))
     &   )
       j2=0

       do jq=1,nq_ibm_r_fsh(i) 
       do j=1,ns_ibm_r_fsh(i) 
            j2=j2+1
            f_impulsHis3_fsh(i,jq,j)=
     &       -(  vecRHSfibershell(j2)
     &          -ksh_tmp*gz_ibm_fsh(i,jq,j)
     &       )/dt2
!     &      +(gz_ibm_fsh(i,jq,j)-gz_ibmpre_fsh(i,jq,j))/dt2
       end do
       end do
       vecXfibershell=0.0
       vecRHSfibershell=0.0

       endif

!Solve x direction
       j2=0
       do jq=1,nq_ibm_r_fsh(i) 
       do j=1,ns_ibm_r_fsh(i) 
            j2=j2+1
            if(((j .le. 2                     ).and.
     &          (BoundaryFibShell_fsh(i,1,1) .eq. 0)      ).or.
     &         ((j .ge. ns_ibm_r_fsh(i)-1         ).and.
     &          (BoundaryFibShell_fsh(i,1,2) .eq. 0)      ).or.
     &         ((jq  .le. 2                     ).and.
     &          (BoundaryFibShell_fsh(i,2,1) .eq. 0)      ).or.
     &         ((jq  .ge. nq_ibm_r_fsh(i)-1         ).and.
     &          (BoundaryFibShell_fsh(i,2,2) .eq. 0)      )
     &      )then
                    fibm1_fsh(i,jq,j)=gx_bp_fsh(i,jq,j)
                    f_impulsHis1_fsh(i,jq,j)=0.0

           
            elseif(((j .le. 1                     ).and.
     &          (BoundaryFibShell_fsh(i,1,1) .eq. 2)      ).or.
     &         ((j .ge. ns_ibm_r_fsh(i)         ).and.
     &          (BoundaryFibShell_fsh(i,1,2) .eq. 2)      ).or.
     &         ((jq  .le. 1                     ).and.
     &          (BoundaryFibShell_fsh(i,2,1) .eq. 2)      ).or.
     &         ((jq  .ge. nq_ibm_r_fsh(i)         ).and.
     &          (BoundaryFibShell_fsh(i,2,2) .eq. 2)      )
     &      )then
                    fibm1_fsh(i,jq,j)=gx_bp_fsh(i,jq,j)
                    f_impulsHis1_fsh(i,jq,j)=0.0

            elseif(FlagForceCalculation(jq,j) .eq. 0) then
                    fibm1_fsh(i,jq,j)=0.0
                    f_impulsHis1_fsh(i,jq,j)=0.0 

              else
                    ksh_tmp=-fibm1_fsh(i,jq,j) - f_link1_fsh(i,jq,j)
     &                 +finer_1_ibm_fsh(i,jq,j) 
     &                 +density_coef(i2g)*fr*sin(phi_grav)*cos(the_grav)
     &                 *timetemp2
     &                 +FB_1_IBM_fsh(i,jq,j)
     &                 +Fpiezo1_fsh(i,jq,j)

                    f_impulsHis1_fsh(i,jq,j)=f_impulsHis1_fsh(i,jq,j)
     &                                      +ksh_tmp

                 fibm1_fsh(i,jq,j)=
     &           density_coef(i2g)*gx_ibm_massiveo_fsh(i,jq,j)
     &           +density_coefp(i2g)*gx_ibm_massiveo_fsh(i,jq,j)
     &           +cs_ibm(i2g)*gx_ibmpre_fsh(i,jq,j)*dt/2.0
     &           +dt2*(ksh_tmp+ f_impuls1_fsh(i,jq,j))
               endif
               vecRHSfibershell(j2)=fibm1_fsh(i,jq,j)
               vecXfibershell(j2) = gx_ibm_massive_fsh(i,jq,j)
       end do
       end do



       call pmgmres_ilu_cr (ns_ibm_r_fsh(i)*nq_ibm_r_fsh(i)
     & ,ntermiMAXfibershell
     & ,iacsrfibershell(1:ns_ibm_r_fsh(i)*nq_ibm_r_fsh(i)+1)
     & , jacsrfibershell(1: ntermiMAXfibershell)
     & , aacsrfibershell(1: ntermiMAXfibershell)
     & , vecXfibershell(1:ns_ibm_r_fsh(i)*nq_ibm_r_fsh(i))
     & , vecRHSfibershell(1:ns_ibm_r_fsh(i)*nq_ibm_r_fsh(i))
     & , SolverOutiter,SolverIniter
     & , Solverabstol,Solverreltol,SolverPre,monitorON)

!       call gmres_csrext(
!     &      aacsrfibershell(1: ntermiMAXfibershell)
!     &     ,jacsrfibershell(1: ntermiMAXfibershell)
!     &     ,iacsrfibershell(1: ns_ibm_r(i)*nq_ibm_r(i)+1)
!     &     ,vecRHSfibershell(1:ns_ibm_r(i)*nq_ibm_r(i))
!     &     ,vecXfibershell(1:ns_ibm_r(i)*nq_ibm_r(i))
!     &     ,tol,ns_ibm_r(i)*nq_ibm_r(i),ntermiMAXfibershell)

       j2=0
       do jq=1,nq_ibm_r_fsh(i) 
       do j=1,ns_ibm_r_fsh(i) 
            j2=j2+1
            gx_ibm_massive_fsh(i,jq,j)=vecXfibershell(j2)
       end do
       end do
       vecXfibershell=0.0
       vecRHSfibershell=0.0
!Solve y direction
       j2=0
       do jq=1,nq_ibm_r_fsh(i) 
       do j=1,ns_ibm_r_fsh(i) 
            j2=j2+1
            if(((j .le. 2                     ).and.
     &          (BoundaryFibShell_fsh(i,1,1) .eq. 0)      ).or.
     &         ((j .ge. ns_ibm_r_fsh(i)-1         ).and.
     &          (BoundaryFibShell_fsh(i,1,2) .eq. 0)      ).or.
     &         ((jq  .le. 2                     ).and.
     &          (BoundaryFibShell_fsh(i,2,1) .eq. 0)      ).or.
     &         ((jq  .ge. nq_ibm_r_fsh(i)-1         ).and.
     &          (BoundaryFibShell_fsh(i,2,2) .eq. 0)      )
     &      )then
                    fibm2_fsh(i,jq,j)=gy_bp_fsh(i,jq,j)
                    f_impulsHis2_fsh(i,jq,j)=0.0

            elseif(((j .le. 1                     ).and.
     &          (BoundaryFibShell_fsh(i,1,1) .eq. 2)      ).or.
     &         ((j .ge. ns_ibm_r_fsh(i)         ).and.
     &          (BoundaryFibShell_fsh(i,1,2) .eq. 2)      ).or.
     &         ((jq  .le. 1                     ).and.
     &          (BoundaryFibShell_fsh(i,2,1) .eq. 2)      ).or.
     &         ((jq  .ge. nq_ibm_r_fsh(i)         ).and.
     &          (BoundaryFibShell_fsh(i,2,2) .eq. 2)      )
     &      )then
                    fibm2_fsh(i,jq,j)=gy_bp_fsh(i,jq,j)
                    f_impulsHis2_fsh(i,jq,j)=0.0

            elseif(FlagForceCalculation(jq,j) .eq. 0) then
                    fibm2_fsh(i,jq,j)=0.0
                    f_impulsHis2_fsh(i,jq,j)=0.0 

              else
                    ksh_tmp=-fibm2_fsh(i,jq,j) - f_link2_fsh(i,jq,j)
     &                 + finer_2_ibm_fsh(i,jq,j)  
     &                 +density_coef(i2g)*fr*sin(phi_grav)*sin(the_grav)
     &                  *timetemp2                 
     &                 +FB_2_IBM_fsh(i,jq,j)
     &                 +Fpiezo2_fsh(i,jq,j)

                    f_impulsHis2_fsh(i,jq,j)=f_impulsHis2_fsh(i,jq,j)                 
     &                                      +ksh_tmp
                 fibm2_fsh(i,jq,j)=
     &            density_coef(i2g)*gy_ibm_massiveo_fsh(i,jq,j)
     &           +density_coefp(i2g)*gy_ibm_massiveo_fsh(i,jq,j)
     &           +cs_ibm(i2g)*gy_ibmpre_fsh(i,jq,j)*dt/2.0
     &           + dt2*(ksh_tmp +f_impuls2_fsh(i,jq,j))                 

               endif
               vecRHSfibershell(j2)=fibm2_fsh(i,jq,j)
               vecXfibershell(j2) = gy_ibm_massive_fsh(i,jq,j)
       end do
       end do

       call pmgmres_ilu_cr(ns_ibm_r_fsh(i)*nq_ibm_r_fsh(i)
     & ,ntermiMAXfibershell
     & ,iacsrfibershell(1: ns_ibm_r_fsh(i)*nq_ibm_r_fsh(i)+1)
     & , jacsrfibershell(1: ntermiMAXfibershell)
     & , aacsrfibershell(1: ntermiMAXfibershell)
     & , vecXfibershell(1:ns_ibm_r_fsh(i)*nq_ibm_r_fsh(i))
     & , vecRHSfibershell(1:ns_ibm_r_fsh(i)*nq_ibm_r_fsh(i))
     & , SolverOutiter,SolverIniter
     & , Solverabstol,Solverreltol,SolverPre,monitorON)

!       call gmres_csrext(
!     &      aacsrfibershell(1: ntermiMAXfibershell)
!     &     ,jacsrfibershell(1: ntermiMAXfibershell)
!     &     ,iacsrfibershell(1: ns_ibm_r(i)*nq_ibm_r(i)+1)
!     &     ,vecRHSfibershell(1:ns_ibm_r(i)*nq_ibm_r(i))
!     &     ,vecXfibershell(1:ns_ibm_r(i)*nq_ibm_r(i))
!     &     ,tol,ns_ibm_r(i)*nq_ibm_r(i),ntermiMAXfibershell)

       j2=0
       do jq=1,nq_ibm_r_fsh(i) 
       do j=1,ns_ibm_r_fsh(i) 
            j2=j2+1
            gy_ibm_massive_fsh(i,jq,j)=vecXfibershell(j2)
       end do
       end do

!Solve z direction
       if(ndim .gt. 2) then
       vecXfibershell=0.0
       vecRHSfibershell=0.0

       j2=0
       do jq=1,nq_ibm_r_fsh(i) 
       do j=1,ns_ibm_r_fsh(i) 
            j2=j2+1
            if(((j .le. 2                     ).and.
     &          (BoundaryFibShell_fsh(i,1,1) .eq. 0)      ).or.
     &         ((j .ge. ns_ibm_r_fsh(i)-1         ).and.
     &          (BoundaryFibShell_fsh(i,1,2) .eq. 0)      ).or.
     &         ((jq  .le. 2                     ).and.
     &          (BoundaryFibShell_fsh(i,2,1) .eq. 0)      ).or.
     &         ((jq  .ge. nq_ibm_r_fsh(i)-1         ).and.
     &          (BoundaryFibShell_fsh(i,2,2) .eq. 0)      )
     &      )then
                      fibm3_fsh(i,jq,j)=gz_bp_fsh(i,jq,j)
                      f_impulsHis3_fsh(i,jq,j)=0.0

            elseif(((j .le. 1                     ).and.
     &          (BoundaryFibShell_fsh(i,1,1) .eq. 2)      ).or.
     &         ((j .ge. ns_ibm_r_fsh(i)         ).and.
     &          (BoundaryFibShell_fsh(i,1,2) .eq. 2)      ).or.
     &         ((jq  .le. 1                     ).and.
     &          (BoundaryFibShell_fsh(i,2,1) .eq. 2)      ).or.
     &         ((jq  .ge. nq_ibm_r_fsh(i)         ).and.
     &          (BoundaryFibShell_fsh(i,2,2) .eq. 2)      )
     &      )then
                      fibm3_fsh(i,jq,j)=gz_bp_fsh(i,jq,j)
                      f_impulsHis3_fsh(i,jq,j)=0.0
            elseif(FlagForceCalculation(jq,j) .eq. 0) then
                    fibm3_fsh(i,jq,j)=0.0
                    f_impulsHis3_fsh(i,jq,j)=0.0 
              else
                    ksh_tmp=-fibm3_fsh(i,jq,j) -f_link3_fsh(i,jq,j)
     &                 +finer_3_ibm_fsh(i,jq,j)  
     &                 +density_coef(i2g)*fr*cos(phi_grav)
     &                  *timetemp2
     &                 +FB_3_IBM_fsh(i,jq,j)
     &                 +Fpiezo3_fsh(i,jq,j)

                    f_impulsHis3_fsh(i,jq,j)=f_impulsHis3_fsh(i,jq,j)                 
     &                                      +ksh_tmp
                  fibm3_fsh(i,jq,j)=
     &           density_coef(i2g)*gz_ibm_massiveo_fsh(i,jq,j)
     &           +density_coefp(i2g)*gz_ibm_massiveo_fsh(i,jq,j)
     &           +cs_ibm(i2g)*gz_ibmpre_fsh(i,jq,j)*dt/2.0
     &           + dt2*(ksh_tmp +f_impuls3_fsh(i,jq,j))
               endif
               vecRHSfibershell(j2)=fibm3_fsh(i,jq,j)
               vecXfibershell(j2) = gz_ibm_massive_fsh(i,jq,j)
       end do
       end do

       call pmgmres_ilu_cr(ns_ibm_r_fsh(i)*nq_ibm_r_fsh(i)
     & ,ntermiMAXfibershell
     & ,iacsrfibershell(1: ns_ibm_r_fsh(i)*nq_ibm_r_fsh(i)+1)
     & , jacsrfibershell(1: ntermiMAXfibershell)
     & , aacsrfibershell(1: ntermiMAXfibershell)
     & , vecXfibershell(1:ns_ibm_r_fsh(i)*nq_ibm_r_fsh(i))
     & , vecRHSfibershell(1:ns_ibm_r_fsh(i)*nq_ibm_r_fsh(i))
     & , SolverOutiter,SolverIniter
     & , Solverabstol,Solverreltol,SolverPre,monitorON)

!       call gmres_csrext(
!     &      aacsrfibershell(1: ntermiMAXfibershell)
!     &     ,jacsrfibershell(1: ntermiMAXfibershell)
!     &     ,iacsrfibershell(1: ns_ibm_r(i)*nq_ibm_r(i)+1)
!     &     ,vecRHSfibershell(1:ns_ibm_r(i)*nq_ibm_r(i))
!     &     ,vecXfibershell(1:ns_ibm_r(i)*nq_ibm_r(i))
!     &     ,tol,ns_ibm_r(i)*nq_ibm_r(i),ntermiMAXfibershell)

       j2=0
       do jq=1,nq_ibm_r_fsh(i) 
       do j=1,ns_ibm_r_fsh(i) 
            j2=j2+1
            gz_ibm_massive_fsh(i,jq,j)=vecXfibershell(j2)
       end do
       end do
      end if 


           if(Electromechanical(i2g)) then
           if(Piezo_Formulation_Flag(i2g) .eq. 0) then

           do jq=1,nq_ibm_r_fsh(i)
           do j=1,ns_ibm_r_fsh(i)
               GXtmp(1,jq,j)=gx_ibm_massive_fsh(i,jq,j)
               GXtmp(2,jq,j)=gy_ibm_massive_fsh(i,jq,j)
               GXtmp(3,jq,j)=gz_ibm_massive_fsh(i,jq,j)
           enddo
           enddo

           do jq=1,nq_ibm_r_fsh(i)
            if (BoundaryFibShell_fsh(i,1,1) .eq. 3) then
             do j=1-(Ns_IBMB_fsh+1),0,1
               jbndy=ns_ibm_r_fsh(i)+j
               GXtmp(1:3,jq,j)=GXtmp(1:3,jq,jbndy)
             enddo
            else
             do j=0,1-(1+Ns_IBMB_fsh),-1

               jbndy=j+1
               GXtmp(1:3,jq,j)=
     &            2.0*GXtmp(1:3,jq,jbndy)-GXtmp(1:3,jq,jbndy+1)
             enddo 
            endif
            if (BoundaryFibShell_fsh(i,1,2) .eq. 3) then
             do j=ns_ibm_r_fsh(i)+1,ns_ibm_r_fsh(i)+(1+Ns_IBMB_fsh),1
               jbndy=-ns_ibm_r_fsh(i)+j
               GXtmp(1:3,jq,j)=GXtmp(1:3,jq,jbndy)
             enddo
            else
             do j=ns_ibm_r_fsh(i)+1,ns_ibm_r_fsh(i)+(1+Ns_IBMB_fsh),1
               jbndy=j-1
               GXtmp(1:3,jq,j)=
     &            2.0*GXtmp(1:3,jq,jbndy)-GXtmp(1:3,jq,jbndy-1)
             enddo 


            endif
          enddo


           do j=1-(1+Ns_IBMB_fsh),ns_ibm_r_fsh(i)+(1+Ns_IBMB_fsh)
            if (BoundaryFibShell_fsh(i,2,1) .eq. 3) then
             do jq=1-(Nq_IBMB_fsh+1),0,1
               jqbndy=nq_ibm_r_fsh(i)+jq
               GXtmp(1:3,jq,j)=GXtmp(1:3,jqbndy,j)
             enddo
            else
             do jq=0,1-(Nq_IBMB_fsh+1),-1
               jqbndy=jq+1
               GXtmp(1:3,jq,j)=
     &            2.0*GXtmp(1:3,jqbndy,j)-GXtmp(1:3,jqbndy+1,j)
             enddo 
            endif
            if (BoundaryFibShell_fsh(i,2,2) .eq. 3) then
             do jq=nq_ibm_r_fsh(i)+1,nq_ibm_r_fsh(i)+(Nq_IBMB_fsh+1),1
               jqbndy=-nq_ibm_r_fsh(i)+jq
               GXtmp(1:3,jq,j)=GXtmp(1:3,jqbndy,j)
             enddo
            else
             do jq=nq_ibm_r_fsh(i)+1,nq_ibm_r_fsh(i)+(Nq_IBMB_fsh+1),1
               jqbndy=jq-1
               GXtmp(1:3,jq,j)=
     &            2.0*GXtmp(1:3,jqbndy,j)-GXtmp(1:3,jqbndy-1,j)
             enddo 
            endif
          enddo

           i=ibdy

           temp_piezo=0.0
           do jq=1,nq_ibm_r_fsh(i)
           do j=1,ns_ibm_r_fsh(i)
              DX_ip_j(1:3)=
     &         (GXtmp(1:3,jq+1,j)-GXtmp(1:3,jq,j))/dsf_IBM_fsh(i,jq,j) 
              DX_im_j(1:3)=
     &         (GXtmp(1:3,jq,j)-GXtmp(1:3,jq-1,j))/dsf_IBM_fsh(i,jq-1,j) 

              DXX_i_j(1:3)=( DX_ip_j(1:3)-DX_im_j(1:3))
     &                     /ds_ibm_fsh(i,jq,j)
 
              DY_i_jp(1:3)=
     &         (GXtmp(1:3,jq,j+1)-GXtmp(1:3,jq,j))/dsf2_IBM_fsh(i,jq,j) 

              DY_i_jm(1:3)=
     &         (GXtmp(1:3,jq,j)-GXtmp(1:3,jq,j-1))
     &                     /dsf2_IBM_fsh(i,jq,j-1) 

              DYY_i_j(1:3)=( DY_i_jp(1:3)-DY_i_jm(1:3))
     &                     /ds2_ibm_fsh(i,jq,j)


              dXP1cont(1,1:3)=0.5*(DX_im_j(1:3)+DX_ip_j(1:3))
              dXP1cont(2,1:3)=0.5*(DY_i_jm(1:3)+DY_i_jp(1:3))
              call crossvec( 
     &             Normalcont1(1:3),dXP1cont(1,1:3),dXP1cont(2,1:3))

              do k=1,3
                ndot_ibm_fsh(i,jq,j)=
     &             piezo_Coef_fsh(i,jq,j,3)*DXX_i_j(k)*Normalcont1(k)
     &            +piezo_Coef_fsh(i,jq,j,4)*DYY_i_j(k)*Normalcont1(k)
              enddo
              

              DY_ip_j(1:3)=0.25*( 
     &           GXtmp(1:3,jq,j)
     &          +GXtmp(1:3,jq,j+1)
     &          +GXtmp(1:3,jq+1,j)
     &          +GXtmp(1:3,jq+1,j+1))            
              DY_im_j(1:3)=0.25*( 
     &           GXtmp(1:3,jq,j) 
     &          +GXtmp(1:3,jq,j+1) 
     &          +GXtmp(1:3,jq-1,j) 
     &          +GXtmp(1:3,jq-1,j+1))

              DX_i_jp(1:3)=0.25*( 
     &           GXtmp(1:3,jq,j) 
     &          +GXtmp(1:3,jq,j-1) 
     &          +GXtmp(1:3,jq+1,j) 
     &          +GXtmp(1:3,jq+1,j-1))     
              DX_i_jm(1:3)=0.25*( 
     &           GXtmp(1:3,jq,j) 
     &          +GXtmp(1:3,jq,j-1) 
     &          +GXtmp(1:3,jq-1,j) 
     &          +GXtmp(1:3,jq-1,j-1))



              DXY_i_j(1:3)=(DY_ip_j(1:3)-DY_im_j(1:3))
     &                     /dk_ibm_fsh(i,jq,j)
              DYX_i_j(1:3)=(DX_i_jp(1:3)-DX_i_jm(1:3))
     &                     /dk_ibm_fsh(i,jq,j-1)
              DYY_i_j(1:3)=(DXY_i_j(1:3)-DYX_i_j(1:3)) 
     &                      /ds2_ibm_fsh(i,jq,j)

              DXY_i_j(1:3)=(DY_ip_j(1:3)-DX_i_jp(1:3))
     &                     /dk2_ibm_fsh(i,jq,j)
              DYX_i_j(1:3)=(DY_im_j(1:3)-DX_i_jm(1:3))
     &                     /dk2_ibm_fsh(i,jq-1,j)
              DXX_i_j(1:3)=(DXY_i_j(1:3)-DYX_i_j(1:3)) 
     &                      /ds_ibm_fsh(i,jq,j)

              do k=1,3
                ndot_ibm_fsh(i,jq,j)=ndot_ibm_fsh(i,jq,j)
     &            +piezo_Coef_fsh(i,jq,j,5)
     &                *(DXX_i_j(k)+DYY_i_j(k))*Normalcont1(k)
              enddo

              ndot_ibm_fsh(i,jq,j)=ndot_ibm_fsh(i,jq,j)
     &                            -ndot_ibm_fsh0(i,jq,j)


              temp_ibm1=(ndot_ibm_fsh(i,jq,j)
     &             -2.0*ndotold_ibm_fsh(i,jq,j)
     &             +ndotpre_ibm_fsh(i,jq,j))/dt2

              temp_ibm1=piezo_Coef_fsh(i,jq,j,1)*temp_ibm1

              temp_piezo=temp_piezo+temp_ibm1
              if(Piezo_Dist_Flag(i2g)) then
              temp_ibm1=-temp_ibm1
     &             +piezo_Coef_fsh(i,jq,j,0)
     &             *vPiezoold_fsh(i,jq,j)/dt
     &             +piezo_Coef_fsh(i,jq,j,1)
     &             *(2.0*vPiezoold_fsh(i,jq,j)
     &                  -vPiezopre_fsh(i,jq,j))/dt2

              temp_ibm2=piezo_Coef_fsh(i,jq,j,2)
     &                 +piezo_Coef_fsh(i,jq,j,0)/dt
     &                 +piezo_Coef_fsh(i,jq,j,1)/dt2
              vPiezo_fsh(i,jq,j)=temp_ibm1/temp_ibm2
              endif !Piezo_Dist_Flag(i2g)
           enddo
           enddo
           if(Piezo_Dist_Flag(i2g)) then  
           else !Piezo_Dist_Flag(i2g)~1  
              temp_ibm1=-temp_piezo
     &             +piezo_damp(i2)
     &             *vPiezoold_fsh(i,1,1)/dt
     &             +piezo_beta(i2g)
     &             *(2.0*vPiezoold_fsh(i,1,1)
     &                  -vPiezopre_fsh(i,1,1))/dt2

              temp_ibm2=piezo_gamma(i2g)
     &                 +piezo_damp(i2g)/dt
     &                 +piezo_beta(i2g)/dt2
              temp_ibm2=temp_ibm1/temp_ibm2
              do jq=1,nq_ibm_r_fsh(i)
              do j=1,ns_ibm_r_fsh(i)
                 vPiezo_fsh(i,jq,j)=temp_ibm2
              enddo
              enddo
           endif !Piezo_Dist_Flag(i2g)
    
           elseif (Piezo_Formulation_Flag(i2g) .eq. 1) then
           temp_piezo=0.0
           do jq=2,nq_ibm_r_fsh(i)-1
           do j=2,ns_ibm_r_fsh(i)-1

              ndot_ibm_fsh(i,jq,j)=VECpiezo_tmp(3,18,jq,j)
              ndot_ibm_fsh(i,jq,j)=ndot_ibm_fsh(i,jq,j)
     &                            -ndot_ibm_fsh0(i,jq,j)

              temp_ibm1=(ndot_ibm_fsh(i,jq,j)
     &             -2.0*ndotold_ibm_fsh(i,jq,j)
     &             +ndotpre_ibm_fsh(i,jq,j))/dt2
              temp_ibm1=piezo_Coef_fsh(i,jq,j,1)*temp_ibm1

              temp_piezo=temp_piezo+temp_ibm1
              if(Piezo_Dist_Flag(i2g)) then
              temp_ibm1=-temp_ibm1
     &             +piezo_Coef_fsh(i,jq,j,0)
     &             *vPiezoold_fsh(i,jq,j)/dt
     &             +piezo_Coef_fsh(i,jq,j,1)
     &             *(2.0*vPiezoold_fsh(i,jq,j)
     &                  -vPiezopre_fsh(i,jq,j))/dt2

              temp_ibm2=piezo_Coef_fsh(i,jq,j,2)
     &                 +piezo_Coef_fsh(i,jq,j,0)/dt
     &                 +piezo_Coef_fsh(i,jq,j,1)/dt2
              vPiezo_fsh(i,jq,j)=temp_ibm1/temp_ibm2
              endif !Piezo_Dist_Flag(i2g)
           enddo
           enddo
           if(Piezo_Dist_Flag(i2g)) then  
           else !Piezo_Dist_Flag(i2g)~1  
              temp_ibm1=-temp_piezo
     &             +piezo_damp(i2)
     &             *vPiezoold_fsh(i,1,1)/dt
     &             +piezo_beta(i2g)
     &             *(2.0*vPiezoold_fsh(i,1,1)
     &                  -vPiezopre_fsh(i,1,1))/dt2

              temp_ibm2=piezo_gamma(i2g)
     &                 +piezo_damp(i2g)/dt
     &                 +piezo_beta(i2g)/dt2
              temp_ibm2=temp_ibm1/temp_ibm2
              do jq=1,nq_ibm_r_fsh(i)
              do j=1,ns_ibm_r_fsh(i)
                 vPiezo_fsh(i,jq,j)=temp_ibm2
              enddo
              enddo
           endif !Piezo_Dist_Flag(i2g)

           else ! Piezo_Formulation_Flag(i2g) ~= 0 or 1
              write(*,*) 'Wrong Piezo_Formulation_Flag for ',i2g
              STOP
           endif!Piezo_Formulation_Flag(i2g)
          endif !Electromechanical(i2g)

!============Genalpha_timesolver Genralized Alpha version
      elseif(Genalpha_timesolver(ibdyg) .eq. 5) then

        if(Electromechanical(i2g).and.ImplicitElecMech(i2g)) then
          if(.not. allocated(aamatPiezo_fsh))
     &       allocate (aamatPiezo_fsh(ns_ibm_fsh*nq_ibm_fsh)) 
        endif

        if(.not. allocated(aamat_fsh))  then   
          allocate (aamat_fsh(ns_ibm_fsh*nq_ibm_fsh,3,3)) 
        endif
        
        if(.not. allocated(ForceOut))  then   
          allocate (ForceOut(ns_ibm_fsh*nq_ibm_fsh*3)) 
        endif

        ibdy=Iglbloc_fsh(ibdyg)
        i   =ibdy
        i2g =ibdyg

        timeMarchcoef(1)= 1.0-alphaf_Coef(ibdyg)
        timeMarchcoef(2)=(1.0-alpham_Coef(ibdyg))/(dt2*beta_Coef(ibdyg))
        timeMarchcoef(3)=(1.0-alphaf_Coef(ibdyg))*gamma_Coef(ibdyg)
     &                  /(dt*beta_Coef(ibdyg))

        timeMarchcoef(4)=(1.0-alpham_Coef(ibdyg))/(dt2*beta_Coef(ibdyg))
        timeMarchcoef(5)=(1.0-alpham_Coef(ibdyg))/(dt*beta_Coef(ibdyg))
        timeMarchcoef(6)=(1.0-alpham_Coef(ibdyg)-2.0*beta_Coef(ibdyg))
     &                  /(2.0*beta_Coef(ibdyg))

        timeMarchcoef(7)=(1.0-alphaf_Coef(ibdyg))*gamma_Coef(ibdyg)
     &                  /(dt*beta_Coef(ibdyg))
        timeMarchcoef(8)=(
     &                  (1.0-alphaf_Coef(ibdyg))*gamma_Coef(ibdyg)
     &                   -beta_Coef(ibdyg)
     &                   )
     &                  /beta_Coef(ibdyg)

        timeMarchcoef(9)=(
     &                   (1.0-alphaf_Coef(ibdyg))
     &                  *(gamma_Coef(ibdyg)-2.0*beta_Coef(ibdyg)) )
     &                  /(2.0*beta_Coef(ibdyg))*dt

        timeMarchcoef(10)=gamma_Coef(ibdyg)/(dt*beta_Coef(ibdyg))
        timeMarchcoef(11)=-(gamma_Coef(ibdyg)/beta_Coef(ibdyg)-1.0)
        timeMarchcoef(12)=
     &                  -(0.5*gamma_Coef(ibdyg)/beta_Coef(ibdyg)-1.0)*dt

        timeMarchcoef(13)=1.0/(dt2*beta_Coef(ibdyg))
        timeMarchcoef(14)=-1.0/(beta_Coef(ibdyg)*dt)
        timeMarchcoef(15)=-(0.5/beta_Coef(ibdyg)-1.0)

        time_alphaf=time2+(1.0-alphaf_Coef(ibdyg))*dt


        do jq=1,nq_ibm_r_fsh(i)
           do j=1,ns_ibm_r_fsh(i)
               X_n_fsh(jq,j,1)=gx_ibm_massive_fsh(ibdy,jq,j)
               X_n_fsh(jq,j,2)=gy_ibm_massive_fsh(ibdy,jq,j)
               X_n_fsh(jq,j,3)=gz_ibm_massive_fsh(ibdy,jq,j)
               dX_n_fsh(jq,j,1)=vibm1_fsh(ibdy,jq,j)
               dX_n_fsh(jq,j,2)=vibm2_fsh(ibdy,jq,j)
               dX_n_fsh(jq,j,3)=vibm3_fsh(ibdy,jq,j)
               ddX_n_fsh(jq,j,1)=aibm1_fsh(ibdy,jq,j)
               ddX_n_fsh(jq,j,2)=aibm2_fsh(ibdy,jq,j)
               ddX_n_fsh(jq,j,3)=aibm3_fsh(ibdy,jq,j)
           enddo
        enddo

        do jq=1,nq_ibm_r_fsh(i)
           do j=1,ns_ibm_r_fsh(i)
              X_np1_fsh(jq,j,1:3) =  X_n_fsh(jq,j,1:3)
              dX_np1_fsh(jq,j,1:3)= dX_n_fsh(jq,j,1:3)
              ddX_np1_fsh(jq,j,1:3)=ddX_n_fsh(jq,j,1:3)

              ddX_in_fsh(jq,j,1:3)=timeMarchcoef(4)* X_n_fsh(jq,j,1:3)
     &                      +timeMarchcoef(5)* dX_n_fsh(jq,j,1:3)
     &                      +timeMarchcoef(6)*ddX_n_fsh(jq,j,1:3)

              dX_in_fsh(jq,j,1:3)=timeMarchcoef(7)*X_n_fsh(jq,j,1:3)
     &                      +timeMarchcoef(8)*dX_n_fsh(jq,j,1:3)
     &                      +timeMarchcoef(9)*ddX_n_fsh(jq,j,1:3)
           enddo
        enddo      

        if(Electromechanical(i2g)) then 
          if (ImplicitElecMech(i2g)) then
           do jq=1,nq_ibm_r_fsh(i)
            do j=1,ns_ibm_r_fsh(i)
              XvPiezo_n_fsh(jq,j,1)=vPiezo_fsh(ibdy,jq,j)
              XvPiezo_n_fsh(jq,j,2)=dvPiezo_fsh(ibdy,jq,j)
              XvPiezo_n_fsh(jq,j,3)=ddvPiezo_fsh(ibdy,jq,j)

              XvPiezo_np1_fsh(jq,j,1:3)= XvPiezo_n_fsh(jq,j,1:3)

              XvPiezo_in_fsh(jq,j,3)=
     &                       timeMarchcoef(4)*XvPiezo_n_fsh(jq,j,1)
     &                      +timeMarchcoef(5)*XvPiezo_n_fsh(jq,j,2)
     &                      +timeMarchcoef(6)*XvPiezo_n_fsh(jq,j,3)

              XvPiezo_in_fsh(jq,j,2)=
     &                       timeMarchcoef(7)*XvPiezo_n_fsh(jq,j,1)
     &                      +timeMarchcoef(8)*XvPiezo_n_fsh(jq,j,2)
     &                      +timeMarchcoef(9)*XvPiezo_n_fsh(jq,j,3)

            enddo
           enddo
          else 
           do jq=1,nq_ibm_r_fsh(i)
            do j=1,ns_ibm_r_fsh(i)
              XvPiezo_n_fsh(jq,j,1)=vPiezo_fsh(ibdy,jq,j)
              XvPiezo_na_fsh(jq,j,1)=vPiezo_fsh(ibdy,jq,j)
            enddo
           enddo 
          endif
        endif

!===================  ITERATIONS
      Do iter=1,Genalpha_niter(ibdyg)
         if(monitorON)   write(*,*) '   === INER ===  ',iter
         if(iter .eq. 1) then 
            coef_iter=1.0
         else
            coef_iter=0.0      
         endif  
         aamat_fsh=0.0
         ForceOut=0.0
         aamatPiezo_fsh=0.0

        do jq=1,nq_ibm_r_fsh(i)
           do j=1,ns_ibm_r_fsh(i)
             ddX_na_fsh(jq,j,1:3)= (1.0-alpham_Coef(ibdyg))
     &                      *ddX_np1_fsh(jq,j,1:3)
     &                      +alpham_Coef(ibdyg)* ddX_n_fsh(jq,j,1:3)
             dX_na_fsh(jq,j,1:3)= (1.0-alphaf_Coef(ibdyg))
     &                      *dX_np1_fsh(jq,j,1:3)
     &                      +alphaf_Coef(ibdyg)* dX_n_fsh(jq,j,1:3)
             X_na_fsh(jq,j,1:3)= (1.0-alphaf_Coef(ibdyg))
     &                      *X_np1_fsh(jq,j,1:3)
     &                      +alphaf_Coef(ibdyg)* X_n_fsh(jq,j,1:3)
           enddo
        enddo      
!! calculate residule
        i=ibdy
        i2l=i
        fibm1_fsh(i,1:nq_ibm_fsh,1:ns_ibm_fsh)=0.0
        fibm2_fsh(i,1:nq_ibm_fsh,1:ns_ibm_fsh)=0.0
        fibm3_fsh(i,1:nq_ibm_fsh,1:ns_ibm_fsh)=0.0
        ffluidsum1_fsh(i,1:nq_ibm_fsh,1:ns_ibm_fsh)=0.0
        ffluidsum2_fsh(i,1:nq_ibm_fsh,1:ns_ibm_fsh)=0.0
        ffluidsum3_fsh(i,1:nq_ibm_fsh,1:ns_ibm_fsh)=0.0


        f_impuls1_fsh(i,1:nq_ibm_fsh,1:ns_ibm_fsh)=0.d0
        f_impuls2_fsh(i,1:nq_ibm_fsh,1:ns_ibm_fsh)=0.d0
        f_impuls3_fsh(i,1:nq_ibm_fsh,1:ns_ibm_fsh)=0.d0
        f_impulsHis1_fsh(i,1:nq_ibm_fsh,1:ns_ibm_fsh)=0.d0
        f_impulsHis2_fsh(i,1:nq_ibm_fsh,1:ns_ibm_fsh)=0.d0
        f_impulsHis3_fsh(i,1:nq_ibm_fsh,1:ns_ibm_fsh)=0.d0

        force_points_fsh(i,1:Ns_IBM_fsh*Nq_IBM_fsh,1:3)=0.d0
        f_link1_fsh(i,1:nq_ibm_fsh,1:ns_ibm_fsh)=0.0
        f_link2_fsh(i,1:nq_ibm_fsh,1:ns_ibm_fsh)=0.0
        f_link3_fsh(i,1:nq_ibm_fsh,1:ns_ibm_fsh)=0.0

       i2g=Ilocglb_fsh(ibdy)
       ImplicitFSI_coef=0.0
       if(FluidForceFlag(i2g)) then
        ImplicitFSI_coef=(alpha_ibm*delta_t+beta_ibm)*timetemp2
       do jq=1,nq_ibm_r_fsh(i)
        do j=1,ns_ibm_r_fsh(i)
           fk_mass1_fsh(i,jq,j)=fk_mass1o_fsh(i,jq,j)
     &          +alpha_ibm*delta_t*(uibm1_fsh(i,jq,j)-dX_na_fsh(jq,j,1))
     &                   *timetemp2
            fk_mass2_fsh(i,jq,j)=fk_mass2o_fsh(i,jq,j)
     &          +alpha_ibm*delta_t*(uibm2_fsh(i,jq,j)-dX_na_fsh(jq,j,2))
     &                   *timetemp2

            ffluidsum1_fsh(i,jq,j)= fk_mass1_fsh(i,jq,j)
     &                   +beta_ibm*(uibm1_fsh(i,jq,j)-dX_na_fsh(jq,j,1))
     &                   *timetemp2

            ffluidsum2_fsh(i,jq,j)= fk_mass2_fsh(i,jq,j)
     &                   +beta_ibm*(uibm2_fsh(i,jq,j)-dX_na_fsh(jq,j,2))
     &                   *timetemp2
            if(ndim .gt. 2) then
            fk_mass3_fsh(i,jq,j)=fk_mass3o_fsh(i,jq,j)
     &          +alpha_ibm*delta_t*(uibm3_fsh(i,jq,j)-dX_na_fsh(jq,j,3))
     &                   *timetemp2
            ffluidsum3_fsh(i,jq,j)= fk_mass3_fsh(i,jq,j)
     &                   +beta_ibm*(uibm3_fsh(i,jq,j)-dX_na_fsh(jq,j,3))
     &                   *timetemp2
            endif

         end do
        end do

       do jq=1,nq_ibm_r_fsh(i)
         do j=1,ns_ibm_r_fsh(i)

              fibm1_fsh(i,jq,j)=fibm1_fsh(i,jq,j)+ffluidsum1_fsh(i,jq,j)
              fibm2_fsh(i,jq,j)=fibm2_fsh(i,jq,j)+ffluidsum2_fsh(i,jq,j)
              if(ndim .gt. 2) 
     &        fibm3_fsh(i,jq,j)=fibm3_fsh(i,jq,j)+ffluidsum3_fsh(i,jq,j)

          end do
        end do
        endif  

        call boundary_ibm_generalalpha_fsh(
     &       i2g
     &      ,Xtar_na_fsh
     &      ,dXtar_na_fsh
     &      ,X0_np1_fsh)

        do npg=1,target_num(i2g)
             j=target_point_num_fsh(i,1,npg)
             jq=target_point_num_fsh(i,2,npg)
           Xtar_na_fsh(npg,1:3)= alphaf_Coef(ibdyg)
     &                        *target_points_fsh(i,npg,1:3)
     &                      +timeMarchcoef(6)*Xtar_na_fsh(npg,1:3)
          dXtar_na_fsh(npg,1:3)= alphaf_Coef(ibdyg)
     &                        *target_points_v_fsh(i,npg,1:3)
     &                      +timeMarchcoef(6)*dXtar_na_fsh(npg,1:3)
        end do

        fibm1pres_fsh=0.0
        fibm2pres_fsh=0.0
        fibm3pres_fsh=0.0

        do jq=1,nq_ibm_r_fsh(i)
           do j=1,ns_ibm_r_fsh(i)
               GXtmp(1,jq,j)=X_na_fsh(jq,j,1)
               GXtmp(2,jq,j)=X_na_fsh(jq,j,2)
               GXtmp(3,jq,j)=X_na_fsh(jq,j,3)
           enddo
         enddo
        do jq=1,nq_ibm_r_fsh(i)
           do j=1,ns_ibm_r_fsh(i)
               dGXtmp(1,jq,j)=
     &         propDamp(2,i2g)*
     &         (timeMarchcoef(3)*
     &          X_np1_fsh(jq,j,1)-dX_in_fsh(jq,j,1))
               dGXtmp(2,jq,j)=
     &         propDamp(2,i2g)*
     &         (timeMarchcoef(3)*
     &          X_np1_fsh(jq,j,2)-dX_in_fsh(jq,j,2))
               dGXtmp(3,jq,j)=
     &         propDamp(2,i2g)*
     &         (timeMarchcoef(3)*
     &          X_np1_fsh(jq,j,3)-dX_in_fsh(jq,j,3))
           enddo
         enddo



          if(Electromechanical(i2g)) then 
           if(.not. allocated(vnPiezo_fsh)) 
     &         allocate (vnPiezo_fsh(3,nq_ibm_fsh,ns_ibm_fsh)) 
           vnPiezo_fsh=0.0
           if(Piezo_Formulation_Flag(i2g) .eq. 1) then 
             if(.not. allocated(VECpiezo_tmp)) 
     &         allocate (VECpiezo_tmp(3,30,nq_ibm_fsh,ns_ibm_fsh)) 
           else
             if(.not. allocated(VECpiezo_tmp)) 
     &         allocate (VECpiezo_tmp(3,1,nq_ibm_fsh,ns_ibm_fsh)) 
           endif
           if (ImplicitElecMech(i2g)) then
             do jq=1,nq_ibm_r_fsh(i)
               do j=1,ns_ibm_r_fsh(i)
                 XvPiezo_na_fsh(jq,j,3)= (1.0-alpham_Coef(ibdyg))
     &                      *XvPiezo_np1_fsh(jq,j,3)
     &                      +alpham_Coef(ibdyg)*XvPiezo_n_fsh(jq,j,3)
                 XvPiezo_na_fsh(jq,j,2)= (1.0-alphaf_Coef(ibdyg))
     &                      *XvPiezo_np1_fsh(jq,j,2)
     &                      +alphaf_Coef(ibdyg)* XvPiezo_n_fsh(jq,j,2)
                 XvPiezo_na_fsh(jq,j,1)= (1.0-alphaf_Coef(ibdyg))
     &                      *XvPiezo_np1_fsh(jq,j,1)
     &                      +alphaf_Coef(ibdyg)* XvPiezo_n_fsh(jq,j,1)
              enddo
            enddo 
           endif

          endif

           do jq=1,nq_ibm_r_fsh(i)
            if (BoundaryFibShell_fsh(i,1,1) .eq. 3) then
             do j=1-(Ns_IBMB_fsh+1),0,1
               jbndy=ns_ibm_r_fsh(i)+j
               GXtmp(1:3,jq,j)=GXtmp(1:3,jq,jbndy)
               dGXtmp(1:3,jq,j)=dGXtmp(1:3,jq,jbndy)
             enddo
            else
             do j=0,1-(1+Ns_IBMB_fsh),-1

               jbndy=j+1
               GXtmp(1:3,jq,j)=
     &            2.0*GXtmp(1:3,jq,jbndy)-GXtmp(1:3,jq,jbndy+1)
               dGXtmp(1:3,jq,j)=
     &            2.0*dGXtmp(1:3,jq,jbndy)-dGXtmp(1:3,jq,jbndy+1)
             enddo 
            endif
            if (BoundaryFibShell_fsh(i,1,2) .eq. 3) then
             do j=ns_ibm_r_fsh(i)+1,ns_ibm_r_fsh(i)+(1+Ns_IBMB_fsh),1
               jbndy=-ns_ibm_r_fsh(i)+j
               GXtmp(1:3,jq,j)=GXtmp(1:3,jq,jbndy)
               dGXtmp(1:3,jq,j)=dGXtmp(1:3,jq,jbndy)
             enddo
            else
             do j=ns_ibm_r_fsh(i)+1,ns_ibm_r_fsh(i)+(1+Ns_IBMB_fsh),1
               jbndy=j-1
               GXtmp(1:3,jq,j)=
     &            2.0*GXtmp(1:3,jq,jbndy)-GXtmp(1:3,jq,jbndy-1)
               dGXtmp(1:3,jq,j)=
     &            2.0*dGXtmp(1:3,jq,jbndy)-dGXtmp(1:3,jq,jbndy-1)
             enddo 
            endif
          enddo


           do j=1-(1+Ns_IBMB_fsh),ns_ibm_r_fsh(i)+(1+Ns_IBMB_fsh)
            if (BoundaryFibShell_fsh(i,2,1) .eq. 3) then
             do jq=1-(Nq_IBMB_fsh+1),0,1
               jqbndy=nq_ibm_r_fsh(i)+jq
               GXtmp(1:3,jq,j)=GXtmp(1:3,jqbndy,j)
               dGXtmp(1:3,jq,j)=dGXtmp(1:3,jqbndy,j)
             enddo
            else
             do jq=0,1-(Nq_IBMB_fsh+1),-1
               jqbndy=jq+1
               GXtmp(1:3,jq,j)=
     &            2.0*GXtmp(1:3,jqbndy,j)-GXtmp(1:3,jqbndy+1,j)
               dGXtmp(1:3,jq,j)=
     &            2.0*dGXtmp(1:3,jqbndy,j)-dGXtmp(1:3,jqbndy+1,j)
             enddo 
            endif
            if (BoundaryFibShell_fsh(i,2,2) .eq. 3) then
             do jq=nq_ibm_r_fsh(i)+1,nq_ibm_r_fsh(i)+(Nq_IBMB_fsh+1),1
               jqbndy=-nq_ibm_r_fsh(i)+jq
               GXtmp(1:3,jq,j)=GXtmp(1:3,jqbndy,j)
               dGXtmp(1:3,jq,j)=dGXtmp(1:3,jqbndy,j)
             enddo
            else
             do jq=nq_ibm_r_fsh(i)+1,nq_ibm_r_fsh(i)+(Nq_IBMB_fsh+1),1
               jqbndy=jq-1
               GXtmp(1:3,jq,j)=
     &            2.0*GXtmp(1:3,jqbndy,j)-GXtmp(1:3,jqbndy-1,j)
               dGXtmp(1:3,jq,j)=
     &            2.0*dGXtmp(1:3,jqbndy,j)-dGXtmp(1:3,jqbndy-1,j)
             enddo 
            endif
          enddo

           i=ibdy


           do jq=1,nq_ibm_r_fsh(i)
              jq_pm(2)=jq+1
              jq_pm(1)=jq-1
              if(jq.eq. nq_ibm_r_fsh(i)) then
                 if (BoundaryFibShell_fsh(i,2,2) .eq. 3) then
                    jqbndy=jq
                 else
                    jqbndy=1
                 endif 
                 jq_pm(2)=jqbndy
              elseif(jq.eq. 1) then
                 if (BoundaryFibShell_fsh(i,2,1) .eq. 3) then
                    jqbndy=nq_ibm_r_fsh(i)
                 else
                    jqbndy=jq
                 endif 
                 jq_pm(1)=jqbndy
              endif
           do j=1,ns_ibm_r_fsh(i)
              j_pm(2)=j+1
              j_pm(1)=j-1
              if(j.eq. ns_ibm_r_fsh(i)) then
                 if (BoundaryFibShell_fsh(i,1,2) .eq. 3) then
                    jbndy=j
                 else
                    jbndy=1
                 endif 
                 j_pm(2)=jbndy
              elseif(j.eq. 1) then
                 if (BoundaryFibShell_fsh(i,1,1) .eq. 3) then
                    jbndy=ns_ibm_r_fsh(i)
                 else
                    jbndy=j
                 endif
                 j_pm(1)=jbndy 
              endif

              DX_ip_j(1:3)=
     &         (GXtmp(1:3,jq+1,j)-GXtmp(1:3,jq,j))/dsf_IBM_fsh(i,jq,j)   !x+1/2,y

              do noi=1,nMem_Coef_fsh(i)
              kmem_i_j(noi,1)=
     &         (Mem_Coef_fsh(i,jq      ,j,noi)
     &         +Mem_Coef_fsh(i,jq_pm(2),j,noi))/2.0
              kmem_i_j(noi,2)=
     &         (Mem_Coef_fsh(i,jq,j      ,noi)
     &         +Mem_Coef_fsh(i,jq,j_pm(2),noi))/2.0
              kmem_i_j(noi,3)=
     &         (Mem_Coef_fsh(i,jq      ,j      ,noi)
     &         +Mem_Coef_fsh(i,jq_pm(2),j      ,noi)
     &         +Mem_Coef_fsh(i,jq      ,j_pm(2),noi)
     &         +Mem_Coef_fsh(i,jq_pm(2),j_pm(2),noi))/4.0
              enddo

              do noi=1,1
               kbend_i_j=
     &         (Ben_Coef_fsh(i,jq      ,j      ,3)
     &         +Ben_Coef_fsh(i,jq_pm(2),j      ,3)
     &         +Ben_Coef_fsh(i,jq      ,j_pm(2),3)
     &         +Ben_Coef_fsh(i,jq_pm(2),j_pm(2),3))/4.0
              enddo

              if(e4coef(i2g) .ge. 0.0) then
              DX_im_j(1:3)=
     &         (GXtmp(1:3,jq,j)-GXtmp(1:3,jq-1,j))/dsf_IBM_fsh(i,jq-1,j) !x-1/2,y

              DX_i_jp(1:3)=
     &         (GXtmp(1:3,jq+1,j+1)-GXtmp(1:3,jq,j+1))
     &                     /dsf_IBM_fsh(i,jq,j+1)                       !x+1/2,y+1

              DX_im_jp(1:3)=
     &         (GXtmp(1:3,jq,j+1)-GXtmp(1:3,jq-1,j+1))
     &                     /dsf_IBM_fsh(i,jq-1,j+1)                     !x-1/2,y+1


              DX_i_jm(1:3)=0.25*(
     &          DX_ip_j(1:3)+DX_im_j(1:3)+DX_i_jp(1:3)+DX_im_jp(1:3) )   !x,y+1/2


              DY_i_jp(1:3)=
     &         (GXtmp(1:3,jq,j+1)-GXtmp(1:3,jq,j))/dsf2_IBM_fsh(i,jq,j) !x,y+1/2

              DY_i_jm(1:3)=
     &         (GXtmp(1:3,jq,j)-GXtmp(1:3,jq,j-1))
     &                     /dsf2_IBM_fsh(i,jq,j-1)                      !x,y-1/2

              DY_ip_j(1:3)=
     &        (GXtmp(1:3,jq+1,j+1)-GXtmp(1:3,jq+1,j))
     &                     /dsf2_IBM_fsh(i,jq+1,j)                      !x+1,y+1/2

              DY_ip_jm(1:3)=
     &        (GXtmp(1:3,jq+1,j)-GXtmp(1:3,jq+1,j-1))
     &                     /dsf2_IBM_fsh(i,jq+1,j-1)                    !x+1,y-1/2 

              DY_im_j(1:3)=0.25*(
     &         DY_i_jp(1:3)+DY_i_jm(1:3)+DY_ip_j(1:3)+DY_ip_jm(1:3) )   !x+1/2,y


                 if(e4coef(i2g) .lt. 50.0) then              
                     Siga(jq,j,1,1)=kmem_i_j(1,1)
     &              *( 
     &           (1.0-1.0/sqrt(dot_product(DX_ip_j(1:3),DX_ip_j(1:3))))
     &              +e4coef(i2g)
     &          *(1.0-1.0/sqrt(dot_product(DY_im_j(1:3),DY_im_j(1:3))))        
     &                  -Tzero_fsh(i,jq,j,1,1)  )

                     Siga_d(jq,j,1)=kmem_i_j(1,1)
     &              /sqrt(dot_product(DX_ip_j(1:3),DX_ip_j(1:3)))**3
                     Siga_d(jq,j,2)=kmem_i_j(1,1)*e4coef(i2g)
     &              /sqrt(dot_product(DY_im_j(1:3),DY_im_j(1:3)))**3
                 elseif(e4coef(i2g) .le. 100.0) then   
                     temp_ibm3= e4coef(i2g)-50.0          
                     Siga(jq,j,1,1)=kmem_i_j(1,1)
     &              *( 
     &           (1.0-1.0/sqrt(dot_product(DX_ip_j(1:3),DX_ip_j(1:3))))
     &             +temp_ibm3
     &          *( (sqrt(dot_product(DY_im_j(1:3),DY_im_j(1:3)))-1.0)        
     &            /(sqrt(dot_product(DX_ip_j(1:3),DX_ip_j(1:3)))) )
     &                  -Tzero_fsh(i,jq,j,1,1)  )

                     Siga_d(jq,j,1)=kmem_i_j(1,1)
     &              /sqrt(dot_product(DX_ip_j(1:3),DX_ip_j(1:3)))**3
     &              +kmem_i_j(1,1)*temp_ibm3
     &            *(sqrt(dot_product(DY_im_j(1:3),DY_im_j(1:3)))-1.0)        
     &             /(-sqrt(dot_product(DX_ip_j(1:3),DX_ip_j(1:3))))**3
                     Siga_d(jq,j,2)=kmem_i_j(1,1)*temp_ibm3
     &              /sqrt(dot_product(DY_im_j(1:3),DY_im_j(1:3)))
     &            /(sqrt(dot_product(DX_ip_j(1:3),DX_ip_j(1:3))))
                 else
                     temp_ibm1=(dot_product(DX_ip_j(1:3),DX_ip_j(1:3))
     &                         -1.0)/2.0  
                     temp_ibm2=(dot_product(DY_im_j(1:3),DY_im_j(1:3))
     &                         -1.0)/2.0  
                     ksh_tmp=kmem_i_j(1,1)*temp_ibm1**2
     &                      +2.0*kmem_i_j(4,1)*temp_ibm1*temp_ibm2
     &                      +kmem_i_j(2,1)*temp_ibm2**2
                     Siga(jq,j,1,1)=kmem_i_j(5,1)*exp(ksh_tmp)
     &                             *( kmem_i_j(1,1)*temp_ibm1
     &                               +kmem_i_j(4,1)*temp_ibm2)

                     Siga_d(jq,j,1)=kmem_i_j(5,1)*exp(ksh_tmp)                         
     &                             *( kmem_i_j(1,1)
     &                               +(kmem_i_j(1,1)*2.0*temp_ibm1 
     &                                +2.0*kmem_i_j(4,1)*temp_ibm2)
     &                                *(kmem_i_j(1,1)*temp_ibm1
     &                                 +kmem_i_j(4,1)*temp_ibm2) 
     &                               )

                     Siga_d(jq,j,2)=kmem_i_j(5,1)*exp(ksh_tmp)                         
     &                             *( kmem_i_j(4,1)
     &                               +(kmem_i_j(2,1)*2.0*temp_ibm2 
     &                                +2.0*kmem_i_j(4,1)*temp_ibm1)
     &                                *(kmem_i_j(1,1)*temp_ibm1
     &                                 +kmem_i_j(4,1)*temp_ibm2) 
     &                               )
                 endif
               else
                  Siga(jq,j,1,1)=kmem_i_j(1,1)
     &                       *(dot_product(DX_ip_j(1:3),DX_ip_j(1:3))
     &                         -Tzero_fsh(i,jq,j,1,1))

                  Siga_d(jq,j,1)=2.0*kmem_i_j(1,1)
                  Siga_d(jq,j,2)=0.0

                  DX_im_j(1:3)=
     &                  (GXtmp(1:3,jq,j)-GXtmp(1:3,jq-1,j))
     &                  /dsf_IBM_fsh(i,jq-1,j) 
               endif

              if(MaterialTypeIBM(i2g).eq. 1) then
                  DXX_i_j(1:3)=( DX_ip_j(1:3)-DX_im_j(1:3))
     &                     /ds_ibm_fsh(i,jq,j)

                  gama(jq,j,1,1)=Ben_Coef_fsh(i,jq,j,1)
     &                       *(dot_product(DXX_i_j(1:3),DXX_i_j(1:3))
     &                         -Bzero_fsh(i,jq,j,1,1))
                  gama_d(jq,j,1)=Ben_Coef_fsh(i,jq,j,1)*2.0
              else
                  gama(jq,j,1,1)=Ben_Coef_fsh(i,jq,j,1)
                  gama_d(jq,j,1)=0.0
              endif

              if(e4coef(i2g).ge. 0.0)then
                 if(e4coef(i2g) .lt. 50.0) then 
                   Siga(jq,j,2,2)=kmem_i_j(2,2)
     &              *( 
     &           (1.0-1.0/sqrt(dot_product(DY_i_jp(1:3),DY_i_jp(1:3))))
     &            +e4coef(i2g)
     &          *(1.0-1.0/sqrt(dot_product(DX_i_jm(1:3),DX_i_jm(1:3))))        
     &                  -Tzero_fsh(i,jq,j,2,2)   )

                   Siga_d(jq,j,3)=kmem_i_j(2,2)*e4coef(i2g)
     &              /sqrt(dot_product(DX_i_jm(1:3),DX_i_jm(1:3)))**3
                   Siga_d(jq,j,4)=kmem_i_j(2,2)
     &              /sqrt(dot_product(DY_i_jp(1:3),DY_i_jp(1:3)))**3

                  elseif(e4coef(i2g) .le. 100.0) then   
                     temp_ibm3= e4coef(i2g)-50.0          
                     Siga(jq,j,2,2)=kmem_i_j(2,2)
     &              *( 
     &           (1.0-1.0/sqrt(dot_product(DY_i_jp(1:3),DY_i_jp(1:3))))
     &             +temp_ibm3
     &          *( (sqrt(dot_product(DX_i_jm(1:3),DX_i_jm(1:3)))-1.0)        
     &            /(sqrt(dot_product(DY_i_jp(1:3),DY_i_jp(1:3)))) )
     &                  -Tzero_fsh(i,jq,j,2,2)  )

                     Siga_d(jq,j,4)=kmem_i_j(2,2)
     &              /sqrt(dot_product(DY_i_jp(1:3),DY_i_jp(1:3)))**3
     &              +kmem_i_j(2,2)*temp_ibm3
     &             *(sqrt(dot_product(DX_i_jm(1:3),DX_i_jm(1:3)))-1.0)        
     &             /(-sqrt(dot_product(DY_i_jp(1:3),DY_i_jp(1:3))))**3

                     Siga_d(jq,j,3)=kmem_i_j(2,2)*temp_ibm3
     &              /sqrt(dot_product(DX_i_jm(1:3),DX_i_jm(1:3)))
     &            /(sqrt(dot_product(DY_i_jp(1:3),DY_i_jp(1:3))))
                 else
                     temp_ibm1=(dot_product(DX_i_jm(1:3),DX_i_jm(1:3))
     &                         -1.0)/2.0  
                     temp_ibm2=(dot_product(DY_i_jp(1:3),DY_i_jp(1:3))
     &                         -1.0)/2.0  
                     ksh_tmp=kmem_i_j(1,2)*temp_ibm1**2
     &                      +2.0*kmem_i_j(4,2)*temp_ibm1*temp_ibm2
     &                      +kmem_i_j(2,2)*temp_ibm2**2
                     Siga(jq,j,2,2)=kmem_i_j(5,2)*exp(ksh_tmp)
     &                             *( kmem_i_j(1,2)*temp_ibm1
     &                               +kmem_i_j(4,2)*temp_ibm2)

                     Siga_d(jq,j,3)=kmem_i_j(5,2)*exp(ksh_tmp)                         
     &                             *( kmem_i_j(1,2)
     &                               +(kmem_i_j(1,2)*2.0*temp_ibm1 
     &                                +2.0*kmem_i_j(4,2)*temp_ibm2)
     &                                *(kmem_i_j(1,2)*temp_ibm1
     &                                 +kmem_i_j(4,2)*temp_ibm2) 
     &                               )

                     Siga_d(jq,j,4)=kmem_i_j(5,2)*exp(ksh_tmp)                         
     &                             *( kmem_i_j(4,2)
     &                               +(kmem_i_j(2,2)*2.0*temp_ibm2 
     &                                +2.0*kmem_i_j(4,2)*temp_ibm1)
     &                                *(kmem_i_j(1,2)*temp_ibm1
     &                                 +kmem_i_j(4,2)*temp_ibm2) 
     &                               )

                 endif

              else
                 DY_i_jp(1:3)=
     &            (GXtmp(1:3,jq,j+1)-GXtmp(1:3,jq,j))
     &            /dsf2_IBM_fsh(i,jq,j) 

                 Siga(jq,j,2,2)=kmem_i_j(2,2)
     &                       *(dot_product(DY_i_jp(1:3),DY_i_jp(1:3))
     &                         -Tzero_fsh(i,jq,j,2,2))

                  Siga_d(jq,j,3)=0.0
                  Siga_d(jq,j,4)=2.0*kmem_i_j(2,2)

                 DY_i_jm(1:3)=
     &            (GXtmp(1:3,jq,j)-GXtmp(1:3,jq,j-1))
     &            /dsf2_IBM_fsh(i,jq,j-1) 
              endif
              if(MaterialTypeIBM(i2g).eq. 1) then
              DYY_i_j(1:3)=( DY_i_jp(1:3)-DY_i_jm(1:3))
     &                     /ds2_ibm_fsh(i,jq,j)

              gama(jq,j,2,2)=Ben_Coef_fsh(i,jq,j,2)
     &                       *(dot_product(DYY_i_j(1:3),DYY_i_j(1:3))
     &                         -Bzero_fsh(i,jq,j,2,2))
              gama_d(jq,j,2)=Ben_Coef_fsh(i,jq,j,2)*2.0
              else
              gama(jq,j,2,2)=Ben_Coef_fsh(i,jq,j,2)
              gama_d(jq,j,2)=0.0
              endif

              DY_ip_j(1:3)=
     &        (GXtmp(1:3,jq+1,j+1)-GXtmp(1:3,jq+1,j))
     &                     /dsf2_IBM_fsh(i,jq+1,j) 
              DY_im_j(1:3)=
     &         (GXtmp(1:3,jq,j+1)-GXtmp(1:3,jq,j))/dsf2_IBM_fsh(i,jq,j) 

              DX_i_jp(1:3)=
     &         (GXtmp(1:3,jq+1,j+1)-GXtmp(1:3,jq,j+1))
     &                     /dsf_IBM_fsh(i,jq,j+1) 
              DX_i_jm(1:3)=
     &         (GXtmp(1:3,jq+1,j)-GXtmp(1:3,jq,j))
     &                     /dsf_IBM_fsh(i,jq,j) 

              if(MaterialTypeIBM(i2g).eq. 1) then
              DXY_i_j(1:3)=( DY_ip_j(1:3)-DY_im_j(1:3))
     &                     /dk_ibm_fsh(i,jq,j)

              gama(jq,j,1,2)=kbend_i_j
     &                       *(dot_product(DXY_i_j(1:3),DXY_i_j(1:3))
     &                         -Bzero_fsh(i,jq,j,1,2))

              DYX_i_j(1:3)=( DX_ip_j(1:3)-DX_im_j(1:3))
     &                     /dk2_ibm_fsh(i,jq,j)

              gama(jq,j,2,1)=kbend_i_j
     &                       *(dot_product(DYX_i_j(1:3),DYX_i_j(1:3))
     &                         -Bzero_fsh(i,jq,j,2,1))

              gama_d(jq,j,3)=2.0*kbend_i_j
              else
              gama(jq,j,1,2)=kbend_i_j
              gama(jq,j,2,1)=kbend_i_j
              gama_d(jq,j,3)=0.0
              endif

              temp_ibm1=0.0
              do noj=1,3
                temp_ibm1=temp_ibm1+0.25d0*
     &         (DX_i_jp(noj)+DX_i_jm(noj))*(DY_ip_j(noj)+DY_im_j(noj))
              enddo

              Siga(jq,j,2,1)=kmem_i_j(3,3)*(
     &          temp_ibm1
     &         -Tzero_fsh(i,jq,j,2,1))
              Siga(jq,j,1,2)=Siga(jq,j,2,1)
              Siga_d(jq,j,5)=kmem_i_j(3,3)

              dXP1cont(1,1:3)=0.5*(DX_im_j(1:3)+DX_ip_j(1:3))
              dXP1cont(2,1:3)=0.5*(DY_i_jm(1:3)+DY_i_jp(1:3))
              call crossvec( 
     &             Normalcont1(1:3),dXP1cont(1,1:3),dXP1cont(2,1:3))

              fibm1pres_fsh(jq,j)=Normalcont1(1)
              fibm2pres_fsh(jq,j)=Normalcont1(2)
              fibm3pres_fsh(jq,j)=Normalcont1(3)

              if(Electromechanical(i2g)) then 
               if(Piezo_Formulation_Flag(i2g) .eq. 0) then
                    vnPiezo_fsh(1:3,jq,j)=Normalcont1(1:3)
     &                                   *XvPiezo_na_fsh(jq,j,1)
               elseif(Piezo_Formulation_Flag(i2g) .eq. 1) then
                    vnPiezo_fsh(1:3,jq,j)=Normalcont1(1:3)  
               else
                    print*, 'Wrong Piezo_Formulation_Flag'
                    stop
               endif             
              endif
           enddo
           enddo

           if(e4coef(i2g).gt.0.0) then
           do j=1,ns_ibm_r_fsh(i)
! boundary 1
           jq=1
              DX_im_j(1:3)=
     &         (   -GXtmp(1:3,jq+2,j)
     &         +4.0*GXtmp(1:3,jq+1,j)
     &         -3.0*GXtmp(1:3,jq,j)   )
     &         /(3.0*dsf_IBM_fsh(i,jq,j)-dsf_IBM_fsh(i,jq+1,j) )        !x,y

           jq=1
              DX_ip_j(1:3)=
     &         (   -GXtmp(1:3,jq+2,j+1)
     &         +4.0*GXtmp(1:3,jq+1,j+1)
     &         -3.0*GXtmp(1:3,jq,j+1)   )
     &         /(3.0*dsf_IBM_fsh(i,jq,j+1)-dsf_IBM_fsh(i,jq+1,j+1) )        !x,y+1

              DX_ip_j(1:3)=0.5*(DX_ip_j(1:3)+DX_im_j(1:3))

              DY_ip_j(1:3)=
     &         (GXtmp(1:3,jq,j+1)-GXtmp(1:3,jq,j))/dsf2_IBM_fsh(i,jq,j) !x,y+1/2

              sigB(1,j,1)=0.0
              sigB(1,j,3)=Mem_Coef_fsh(i,jq,j,3)
     &              *(dot_product(DX_ip_j(1:3),DY_ip_j(1:3))
     &                  -TzeroB_fsh(i,1,j,3)  )
              SigB_d(1,j,3)=Mem_Coef_fsh(i,jq,j,3)

              if(e4coef(i2g) .lt. 50.0) then   
              sigB(1,j,2)=Mem_Coef_fsh(i,jq,j,2)
     &              *( 
     &            (1.0-1.0/sqrt(dot_product(DY_ip_j(1:3),DY_ip_j(1:3))))
     &        +e4coef(i2g)
     &           *(1.0-1.0/sqrt(dot_product(DX_ip_j(1:3),DX_ip_j(1:3))))        
     &                  -TzeroB_fsh(i,1,j,2)  )

              SigB_d(1,j,2)=Mem_Coef_fsh(i,jq,j,2)
     &              /sqrt(dot_product(DY_ip_j(1:3),DY_ip_j(1:3)))**3
              SigB_d(1,j,1)=Mem_Coef_fsh(i,jq,j,2)*e4coef(i2g)
     &              /sqrt(dot_product(DX_ip_j(1:3),DX_ip_j(1:3)))**3


              elseif(e4coef(i2g) .le. 100.0) then   
                     temp_ibm3= e4coef(i2g)-50.0          
                     sigB(1,j,2)=Mem_Coef_fsh(i,jq,j,2)
     &              *( 
     &           (1.0-1.0/sqrt(dot_product(DY_ip_j(1:3),DY_ip_j(1:3))))
     &             +temp_ibm3
     &          *( (sqrt(dot_product(DX_ip_j(1:3),DX_ip_j(1:3)))-1.0)        
     &            /(sqrt(dot_product(DY_ip_j(1:3),DY_ip_j(1:3)))) )
     &                  -TzeroB_fsh(i,1,j,2)  )

                 SigB_d(1,j,2)=Mem_Coef_fsh(i,jq,j,2)
     &              /sqrt(dot_product(DY_ip_j(1:3),DY_ip_j(1:3)))**3
     &              +Mem_Coef_fsh(i,jq,j,2)*temp_ibm3
     &             *(sqrt(dot_product(DX_ip_j(1:3),DX_ip_j(1:3)))-1.0)        
     &             /(-sqrt(dot_product(DY_ip_j(1:3),DY_ip_j(1:3))))**3
                 SigB_d(1,j,1)=Mem_Coef_fsh(i,jq,j,2)*temp_ibm3
     &              /sqrt(dot_product(DX_ip_j(1:3),DX_ip_j(1:3)))
     &            /(sqrt(dot_product(DY_ip_j(1:3),DY_ip_j(1:3))))

              endif

! boundary 2
           jq=nq_ibm_r_fsh(i)
              DX_im_j(1:3)=
     &         (    GXtmp(1:3,jq-2,j)
     &         -4.0*GXtmp(1:3,jq-1,j)
     &         +3.0*GXtmp(1:3,jq,j)   )
     &         /(3.0*dsf_IBM_fsh(i,jq-1,j)- dsf_IBM_fsh(i,jq-2,j) )

           jq=nq_ibm_r_fsh(i)
              DX_ip_j(1:3)=
     &         (   +GXtmp(1:3,jq-2,j+1)
     &         -4.0*GXtmp(1:3,jq-1,j+1)
     &         +3.0*GXtmp(1:3,jq,j+1)   )
     &         /(3.0*dsf_IBM_fsh(i,jq-1,j+1)-dsf_IBM_fsh(i,jq-2,j+1) )        !x,y+1

              DX_ip_j(1:3)=0.5*(DX_ip_j(1:3)+DX_im_j(1:3))

              DY_ip_j(1:3)=
     &         (GXtmp(1:3,jq,j+1)-GXtmp(1:3,jq,j))/dsf2_IBM_fsh(i,jq,j) !x,y+1/2

              sigB(2,j,1)=0.0
              sigB(2,j,3)=Mem_Coef_fsh(i,jq,j,3)
     &              *(dot_product(DX_ip_j(1:3),DY_ip_j(1:3))
     &                  -TzeroB_fsh(i,2,j,3)  )
              SigB_d(2,j,3)=Mem_Coef_fsh(i,jq,j,3)
              if(e4coef(i2g) .lt. 50.0) then

              sigB(2,j,2)=Mem_Coef_fsh(i,jq,j,2)
     &              *( 
     &            (1.0-1.0/sqrt(dot_product(DY_ip_j(1:3),DY_ip_j(1:3))))
     &        +e4coef(i2g)
     &           *(1.0-1.0/sqrt(dot_product(DX_ip_j(1:3),DX_ip_j(1:3)))) 
     &                  -TzeroB_fsh(i,2,j,2)  )

              SigB_d(2,j,2)=Mem_Coef_fsh(i,jq,j,2)
     &              /sqrt(dot_product(DY_ip_j(1:3),DY_ip_j(1:3)))**3
              SigB_d(2,j,1)=Mem_Coef_fsh(i,jq,j,2)*e4coef(i2g)
     &              /sqrt(dot_product(DX_ip_j(1:3),DX_ip_j(1:3)))**3

              elseif(e4coef(i2g) .le. 100.0) then   
                     temp_ibm3= e4coef(i2g)-50.0          
                     sigB(2,j,2)=Mem_Coef_fsh(i,jq,j,2)
     &              *( 
     &           (1.0-1.0/sqrt(dot_product(DY_ip_j(1:3),DY_ip_j(1:3))))
     &             +temp_ibm3
     &          *( (sqrt(dot_product(DX_ip_j(1:3),DX_ip_j(1:3)))-1.0)        
     &            /(sqrt(dot_product(DY_ip_j(1:3),DY_ip_j(1:3)))) )
     &                  -TzeroB_fsh(i,2,j,2)  )

                 SigB_d(2,j,2)=Mem_Coef_fsh(i,jq,j,2)
     &              /sqrt(dot_product(DY_ip_j(1:3),DY_ip_j(1:3)))**3
     &              +Mem_Coef_fsh(i,jq,j,2)*temp_ibm3
     &             *(sqrt(dot_product(DX_ip_j(1:3),DX_ip_j(1:3)))-1.0)        
     &             /(-sqrt(dot_product(DY_ip_j(1:3),DY_ip_j(1:3))))**3
                 SigB_d(2,j,1)=Mem_Coef_fsh(i,jq,j,2)*temp_ibm3
     &              /sqrt(dot_product(DX_ip_j(1:3),DX_ip_j(1:3)))
     &            /(sqrt(dot_product(DY_ip_j(1:3),DY_ip_j(1:3))))
              endif
           enddo


           do jq=1,nq_ibm_r_fsh(i)
! boundary 3
           j=1
              DY_i_jm(1:3)=
     &         (   -GXtmp(1:3,jq,j+2)
     &         +4.0*GXtmp(1:3,jq,j+1)
     &         -3.0*GXtmp(1:3,jq,j)   )
     &         /(3.0*dsf2_IBM_fsh(i,jq,j)-dsf2_IBM_fsh(i,jq,j+1))   !x+1/2,y

              DY_i_jp(1:3)=
     &         (   -GXtmp(1:3,jq+1,j+2)
     &         +4.0*GXtmp(1:3,jq+1,j+1)
     &         -3.0*GXtmp(1:3,jq+1,j)   )
     &         /(3.0*dsf2_IBM_fsh(i,jq+1,j)-dsf2_IBM_fsh(i,jq+1,j+1))   !x+1/2,y


              DY_i_jp(1:3)=
     &           0.5*(DY_i_jm(1:3)+DY_i_jp(1:3))
              DX_ip_j(1:3)=
     &         (GXtmp(1:3,jq+1,j)-GXtmp(1:3,jq,j))/dsf_IBM_fsh(i,jq,j) !x,y+1/2



              sigB(3,jq,2)=0.0
              sigB(3,jq,3)=Mem_Coef_fsh(i,jq,j,3)
     &              *(dot_product(DX_ip_j(1:3),DY_i_jp(1:3))
     &                  -TzeroB_fsh(i,3,jq,3)  )

              SigB_d(3,jq,3)=Mem_Coef_fsh(i,jq,j,3)

              if(e4coef(i2g) .lt. 50.0) then 
              sigB(3,jq,1)=Mem_Coef_fsh(i,jq,j,1)
     &              *( 
     &         (1.0-1.0/sqrt(dot_product(DX_ip_j(1:3),DX_ip_j(1:3))))
     &        +e4coef(i2g)
     &        *(1.0-1.0/sqrt(dot_product(DY_i_jp(1:3),DY_i_jp(1:3))))        
     &                  -TzeroB_fsh(i,3,jq,1)  )

              SigB_d(3,jq,1)=Mem_Coef_fsh(i,jq,j,1)
     &              /sqrt(dot_product(DX_ip_j(1:3),DX_ip_j(1:3)))**3
              SigB_d(3,jq,2)=Mem_Coef_fsh(i,jq,j,1)*e4coef(i2g)
     &              /sqrt(dot_product(DY_i_jp(1:3),DY_i_jp(1:3)))**3

              elseif(e4coef(i2g) .le. 100.0) then   
                     temp_ibm3= e4coef(i2g)-50.0          
                     sigB(3,jq,1)=Mem_Coef_fsh(i,jq,j,1)
     &              *( 
     &           (1.0-1.0/sqrt(dot_product(DX_ip_j(1:3),DX_ip_j(1:3))))
     &             +temp_ibm3
     &          *( (sqrt(dot_product(DY_i_jp(1:3),DY_i_jp(1:3)))-1.0)        
     &            /(sqrt(dot_product(DX_ip_j(1:3),DX_ip_j(1:3)))) )
     &                  -TzeroB_fsh(i,3,jq,1)  )

                 SigB_d(3,jq,1)=Mem_Coef_fsh(i,jq,j,1)
     &              /sqrt(dot_product(DX_ip_j(1:3),DX_ip_j(1:3)))**3
     &              +Mem_Coef_fsh(i,jq,j,1)*temp_ibm3
     &             *(sqrt(dot_product(DY_i_jp(1:3),DY_i_jp(1:3)))-1.0)        
     &             /(-sqrt(dot_product(DX_ip_j(1:3),DX_ip_j(1:3))))**3
                 SigB_d(3,jq,2)=Mem_Coef_fsh(i,jq,j,1)*temp_ibm3
     &              /sqrt(dot_product(DY_i_jp(1:3),DY_i_jp(1:3)))
     &            /(sqrt(dot_product(DX_ip_j(1:3),DX_ip_j(1:3))))
              endif
! boundary 4
           j=ns_ibm_r_fsh(i)
              DY_i_jm(1:3)=
     &         (    GXtmp(1:3,jq,j-2)
     &         -4.0*GXtmp(1:3,jq,j-1)
     &         +3.0*GXtmp(1:3,jq,j)   )
     &         /(3.0*dsf2_IBM_fsh(i,jq,j-1)-dsf2_IBM_fsh(i,jq,j-2))   !x+1/2,y

              DY_i_jp(1:3)=
     &         (    GXtmp(1:3,jq+1,j-2)
     &         -4.0*GXtmp(1:3,jq+1,j-1)
     &         +3.0*GXtmp(1:3,jq+1,j)   )
     &         /(3.0*dsf2_IBM_fsh(i,jq+1,j-1)-dsf2_IBM_fsh(i,jq+1,j-2))   !x+1/2,y

              DY_i_jp(1:3)=
     &           0.5*(DY_i_jm(1:3)+DY_i_jp(1:3))
              DX_ip_j(1:3)=
     &         (GXtmp(1:3,jq+1,j)-GXtmp(1:3,jq,j))/dsf_IBM_fsh(i,jq,j) !x,y+1/2


              sigB(4,jq,2)=0.0
              sigB(4,jq,3)=Mem_Coef_fsh(i,jq,j,3)
     &              *(dot_product(DX_ip_j(1:3),DY_i_jp(1:3))
     &                  -TzeroB_fsh(i,4,jq,3)  )

              SigB_d(4,jq,3)=Mem_Coef_fsh(i,jq,j,3)

              if(e4coef(i2g) .lt. 50.0) then 
              sigB(4,jq,1)=Mem_Coef_fsh(i,jq,j,1)
     &              *( 
     &         (1.0-1.0/sqrt(dot_product(DX_ip_j(1:3),DX_ip_j(1:3))))
     &        +e4coef(i2g)
     &        *(1.0-1.0/sqrt(dot_product(DY_i_jp(1:3),DY_i_jp(1:3))))        
     &                  -TzeroB_fsh(i,4,jq,1)  )

              SigB_d(4,jq,1)=Mem_Coef_fsh(i,jq,j,1)
     &              /sqrt(dot_product(DX_ip_j(1:3),DX_ip_j(1:3)))**3
              SigB_d(4,jq,2)=Mem_Coef_fsh(i,jq,j,1)*e4coef(i2g)
     &              /sqrt(dot_product(DY_i_jp(1:3),DY_i_jp(1:3)))**3

              elseif(e4coef(i2g) .le. 100.0) then   
                     temp_ibm3= e4coef(i2g)-50.0          
                     sigB(4,jq,1)=Mem_Coef_fsh(i,jq,j,1)
     &              *( 
     &           (1.0-1.0/sqrt(dot_product(DX_ip_j(1:3),DX_ip_j(1:3))))
     &             +temp_ibm3
     &          *( (sqrt(dot_product(DY_i_jp(1:3),DY_i_jp(1:3)))-1.0)        
     &            /(sqrt(dot_product(DX_ip_j(1:3),DX_ip_j(1:3)))) )
     &                  -TzeroB_fsh(i,4,jq,1)  )

                 SigB_d(4,jq,1)=Mem_Coef_fsh(i,jq,j,1)
     &              /sqrt(dot_product(DX_ip_j(1:3),DX_ip_j(1:3)))**3
     &              +Mem_Coef_fsh(i,jq,j,1)*temp_ibm3
     &             *(sqrt(dot_product(DY_i_jp(1:3),DY_i_jp(1:3)))-1.0)        
     &             /(-sqrt(dot_product(DX_ip_j(1:3),DX_ip_j(1:3))))**3
                 SigB_d(4,jq,2)=Mem_Coef_fsh(i,jq,j,1)*temp_ibm3
     &              /sqrt(dot_product(DY_i_jp(1:3),DY_i_jp(1:3)))
     &            /(sqrt(dot_product(DX_ip_j(1:3),DX_ip_j(1:3))))
              endif

           enddo

           endif

          if(Electromechanical(i2g)) then 
            if(Piezo_Formulation_Flag(i2g) .eq. 0) then
             do jq=2,nq_ibm_r_fsh(i)-1
             do j=2,ns_ibm_r_fsh(i)-1
              DX_ip_j(1:3)=
     &         ( piezo_Coef_fsh(i,jq+1,j,3)*vnPiezo_fsh(1:3,jq+1,j) 
     &          -piezo_Coef_fsh(i,jq,j,3)*vnPiezo_fsh(1:3,jq,j)) 
     &          /dsf_IBM_fsh(i,jq,j) 
              DX_im_j(1:3)=
     &         ( piezo_Coef_fsh(i,jq,j,3)*vnPiezo_fsh(1:3,jq,j) 
     &          -piezo_Coef_fsh(i,jq-1,j,3)*vnPiezo_fsh(1:3,jq-1,j)) 
     &          /dsf_IBM_fsh(i,jq-1,j) 

              DXX_i_j(1:3)=( DX_ip_j(1:3)-DX_im_j(1:3))
     &                     /ds_ibm_fsh(i,jq,j)


              DY_i_jp(1:3)=
     &         ( piezo_Coef_fsh(i,jq,j+1,4)*vnPiezo_fsh(1:3,jq,j+1) 
     &          -piezo_Coef_fsh(i,jq,j,4)*vnPiezo_fsh(1:3,jq,j)) 
     &          /dsf2_IBM_fsh(i,jq,j) 

              DY_i_jm(1:3)=
     &         ( piezo_Coef_fsh(i,jq,j,4)*vnPiezo_fsh(1:3,jq,j) 
     &          -piezo_Coef_fsh(i,jq,j-1,4)*vnPiezo_fsh(1:3,jq,j-1))
     &                     /dsf2_IBM_fsh(i,jq,j-1) 

              DYY_i_j(1:3)=( DY_i_jp(1:3)-DY_i_jm(1:3))
     &                     /ds2_ibm_fsh(i,jq,j)

              Fpiezo1_fsh(i,jq,j)=DXX_i_j(1)+DYY_i_j(1)
              Fpiezo2_fsh(i,jq,j)=DXX_i_j(2)+DYY_i_j(2)
              Fpiezo3_fsh(i,jq,j)=DXX_i_j(3)+DYY_i_j(3)

              DY_ip_j(1:3)=0.25*( 
     &           piezo_Coef_fsh(i,jq,j,5)*vnPiezo_fsh(1:3,jq,j)
     &          +piezo_Coef_fsh(i,jq,j+1,5)*vnPiezo_fsh(1:3,jq,j+1)
     &          +piezo_Coef_fsh(i,jq+1,j,5)*vnPiezo_fsh(1:3,jq+1,j)
     &          +piezo_Coef_fsh(i,jq+1,j+1,5)*vnPiezo_fsh(1:3,jq+1,j+1))            
              DY_im_j(1:3)=0.25*( 
     &           piezo_Coef_fsh(i,jq,j,5)*vnPiezo_fsh(1:3,jq,j) 
     &          +piezo_Coef_fsh(i,jq,j+1,5)*vnPiezo_fsh(1:3,jq,j+1) 
     &          +piezo_Coef_fsh(i,jq-1,j,5)*vnPiezo_fsh(1:3,jq-1,j) 
     &          +piezo_Coef_fsh(i,jq-1,j+1,5)*vnPiezo_fsh(1:3,jq-1,j+1))

              DX_i_jp(1:3)=0.25*( 
     &           piezo_Coef_fsh(i,jq,j,5)*vnPiezo_fsh(1:3,jq,j) 
     &          +piezo_Coef_fsh(i,jq,j-1,5)*vnPiezo_fsh(1:3,jq,j-1) 
     &          +piezo_Coef_fsh(i,jq+1,j,5)*vnPiezo_fsh(1:3,jq+1,j) 
     &          +piezo_Coef_fsh(i,jq+1,j-1,5)*vnPiezo_fsh(1:3,jq+1,j-1))     
              DX_i_jm(1:3)=0.25*( 
     &           piezo_Coef_fsh(i,jq,j,5)*vnPiezo_fsh(1:3,jq,j) 
     &          +piezo_Coef_fsh(i,jq,j-1,5)*vnPiezo_fsh(1:3,jq,j-1) 
     &          +piezo_Coef_fsh(i,jq-1,j,5)*vnPiezo_fsh(1:3,jq-1,j) 
     &          +piezo_Coef_fsh(i,jq-1,j-1,5)*vnPiezo_fsh(1:3,jq-1,j-1))



              DXY_i_j(1:3)=(DY_ip_j(1:3)-DY_im_j(1:3))
     &                     /dk_ibm_fsh(i,jq,j)
              DYX_i_j(1:3)=(DX_i_jp(1:3)-DX_i_jm(1:3))

     &                     /dk_ibm_fsh(i,jq,j-1)
              DYY_i_j(1:3)=(DXY_i_j(1:3)-DYX_i_j(1:3)) 
     &                      /ds2_ibm_fsh(i,jq,j)

              DXY_i_j(1:3)=(DY_ip_j(1:3)-DX_i_jp(1:3))
     &                     /dk2_ibm_fsh(i,jq,j)
              DYX_i_j(1:3)=(DY_im_j(1:3)-DX_i_jm(1:3))
     &                     /dk2_ibm_fsh(i,jq-1,j)
              DXX_i_j(1:3)=(DXY_i_j(1:3)-DYX_i_j(1:3)) 
     &                      /ds_ibm_fsh(i,jq,j)

              Fpiezo1_fsh(i,jq,j)=Fpiezo1_fsh(i,jq,j) 
     &                           +DXX_i_j(1)+DYY_i_j(1)
              Fpiezo2_fsh(i,jq,j)=Fpiezo2_fsh(i,jq,j) 
     &                           +DXX_i_j(2)+DYY_i_j(2)
              Fpiezo3_fsh(i,jq,j)=Fpiezo3_fsh(i,jq,j) 
     &                           +DXX_i_j(3)+DYY_i_j(3)
                 
             enddo
             enddo
            elseif(Piezo_Formulation_Flag(i2g) .eq. 1) then
             do jq=1,nq_ibm_r_fsh(i)
             do j=1,ns_ibm_r_fsh(i)

!central canculation
              DY_i_jp(1:3)=
     &         (GXtmp(1:3,jq,j+1)-GXtmp(1:3,jq,j))
     &                     /dsf2_IBM_fsh(i,jq,j) 
              DY_i_jm(1:3)=
     &         (GXtmp(1:3,jq,j)-GXtmp(1:3,jq,j-1))
     &                     /dsf2_IBM_fsh(i,jq,j-1) 

              X22piezo(1:3)=( DY_i_jp(1:3)-DY_i_jm(1:3))
     &                     /ds2_ibm_fsh(i,jq,j) 
              X2piezo(1:3)=( DY_i_jp(1:3)+DY_i_jm(1:3))
     &                     /2.0

              DX_ip_j(1:3)=
     &         (GXtmp(1:3,jq+1,j)-GXtmp(1:3,jq,j))
     &                     /dsf_IBM_fsh(i,jq,j) 
              DX_im_j(1:3)=
     &         (GXtmp(1:3,jq,j)-GXtmp(1:3,jq-1,j))
     &                     /dsf_IBM_fsh(i,jq-1,j) 

              X11piezo(1:3)=( DX_ip_j(1:3)-DX_im_j(1:3))
     &                     /ds_ibm_fsh(i,jq,j) 
              X1piezo(1:3)=( DX_ip_j(1:3)+DX_im_j(1:3))
     &                     /2.0


              DY_ip_j(1:3)=
     &        (GXtmp(1:3,jq+1,j+1)-GXtmp(1:3,jq+1,j))
     &                     /dsf2_IBM_fsh(i,jq+1,j) 
              DY_im_j(1:3)=
     &         (GXtmp(1:3,jq,j+1)-GXtmp(1:3,jq,j))
     &                     /dsf2_IBM_fsh(i,jq,j) 

              DX_i_jp(1:3)=
     &         (GXtmp(1:3,jq+1,j+1)-GXtmp(1:3,jq,j+1))
     &                     /dsf_IBM_fsh(i,jq,j+1) 
              DX_i_jm(1:3)=
     &         (GXtmp(1:3,jq+1,j)-GXtmp(1:3,jq,j))
     &                     /dsf_IBM_fsh(i,jq,j) 


              DXY_i_j(1:3)=( DY_ip_j(1:3)-DY_im_j(1:3))
     &                     /dk_ibm_fsh(i,jq,j)
              DYX_i_j(1:3)=( DX_ip_j(1:3)-DX_im_j(1:3))
     &                     /dk2_ibm_fsh(i,jq,j)

              DY_ip_j(1:3)=
     &        (GXtmp(1:3,jq,j+1)-GXtmp(1:3,jq,j))
     &                     /dsf2_IBM_fsh(i,jq,j) 
              DY_im_j(1:3)=
     &         (GXtmp(1:3,jq-1,j+1)-GXtmp(1:3,jq-1,j))
     &                     /dsf2_IBM_fsh(i,jq-1,j) 

              DX_i_jp(1:3)=
     &         (GXtmp(1:3,jq,j+1)-GXtmp(1:3,jq-1,j+1))
     &                     /dsf_IBM_fsh(i,jq-1,j+1) 
              DX_i_jm(1:3)=
     &         (GXtmp(1:3,jq,j)-GXtmp(1:3,jq-1,j))
     &                     /dsf_IBM_fsh(i,jq-1,j) 


              DXY_i_j(1:3)=
     &                     DXY_i_j(1:3)
     &                     +( DY_ip_j(1:3)-DY_im_j(1:3))
     &                     /dk_ibm_fsh(i,jq-1,j)
              DYX_i_j(1:3)=
     &                     DYX_i_j(1:3)
     &                     +( DX_ip_j(1:3)-DX_im_j(1:3))
     &                     /dk2_ibm_fsh(i,jq-1,j)

              DY_ip_j(1:3)=
     &        (GXtmp(1:3,jq+1,j)-GXtmp(1:3,jq+1,j-1))
     &                     /dsf2_IBM_fsh(i,jq+1,j-1) 
              DY_im_j(1:3)=
     &         (GXtmp(1:3,jq,j)-GXtmp(1:3,jq,j-1))
     &                     /dsf2_IBM_fsh(i,jq,j-1) 

              DX_i_jp(1:3)=
     &         (GXtmp(1:3,jq+1,j)-GXtmp(1:3,jq,j))
     &                     /dsf_IBM_fsh(i,jq,j) 
              DX_i_jm(1:3)=
     &         (GXtmp(1:3,jq+1,j-1)-GXtmp(1:3,jq,j-1))
     &                     /dsf_IBM_fsh(i,jq,j-1) 


              DXY_i_j(1:3)=
     &                     DXY_i_j(1:3)
     &                     +( DY_ip_j(1:3)-DY_im_j(1:3))
     &                     /dk_ibm_fsh(i,jq,j-1)
              DYX_i_j(1:3)=
     &                     DYX_i_j(1:3)
     &                     +( DX_ip_j(1:3)-DX_im_j(1:3))
     &                     /dk2_ibm_fsh(i,jq,j-1)


              DY_ip_j(1:3)=
     &        (GXtmp(1:3,jq,j)-GXtmp(1:3,jq,j-1))
     &                     /dsf2_IBM_fsh(i,jq,j-1) 
              DY_im_j(1:3)=
     &         (GXtmp(1:3,jq-1,j)-GXtmp(1:3,jq-1,j-1))
     &                     /dsf2_IBM_fsh(i,jq-1,j-1) 

              DX_i_jp(1:3)=
     &         (GXtmp(1:3,jq,j)-GXtmp(1:3,jq-1,j))
     &                     /dsf_IBM_fsh(i,jq-1,j) 
              DX_i_jm(1:3)=
     &         (GXtmp(1:3,jq,j-1)-GXtmp(1:3,jq-1,j-1))
     &                     /dsf_IBM_fsh(i,jq-1,j-1) 


              DXY_i_j(1:3)=
     &                     DXY_i_j(1:3)
     &                     +( DY_ip_j(1:3)-DY_im_j(1:3))
     &                     /dk_ibm_fsh(i,jq-1,j-1)
              DYX_i_j(1:3)=
     &                     DYX_i_j(1:3)
     &                     +( DX_ip_j(1:3)-DX_im_j(1:3))
     &                     /dk2_ibm_fsh(i,jq-1,j-1)

              X12piezo(1:3)=0.25*( (DXY_i_j(1:3)+DYX_i_j(1:3))/2.0)


              normalpiezo(1:3)=vnPiezo_fsh(1:3,jq,j)

              Epiezo=dot_product(X1piezo(1:3),X1piezo(1:3))             !E=X_1 . X_1
              Fpiezo=dot_product(X1piezo(1:3),X2piezo(1:3))             !F=X_1 . X_2
              Gpiezo=dot_product(X2piezo(1:3),X2piezo(1:3))             !G=X_2 . X_2

              Lpiezo=dot_product(X11piezo(1:3),normalpiezo(1:3))        !L=X_11 . n
              Mpiezo=dot_product(X12piezo(1:3),normalpiezo(1:3))        !M=X_12 . n
              Npiezo=dot_product(X22piezo(1:3),normalpiezo(1:3))        !N=X_22 . n
           
              Hnpiezo=Epiezo*Npiezo-2.0*Fpiezo*Mpiezo+Gpiezo*Lpiezo     !Hn=EN-2FM+GL
              Hdpiezo=2.0*(Epiezo*Gpiezo-Fpiezo**2)                     !Hd=2(EG-F^2)

              Ppiezo=piezo_Coef_fsh(i,jq,j,3)*XvPiezo_na_fsh(jq,j,1)
     &               /Hdpiezo                                           !P=\alpha V /H_d
              Rpiezo=Ppiezo*Hnpiezo/Hdpiezo                             !R=P H_n/H_d

              VECpiezo_tmp(1:3,1,jq,j)=X1piezo(1:3)                     !1:X1
              VECpiezo_tmp(1:3,2,jq,j)=X2piezo(1:3)                     !2:X2
              VECpiezo_tmp(1:3,3,jq,j)=X11piezo(1:3)                    !3:X11
              VECpiezo_tmp(1:3,4,jq,j)=X22piezo(1:3)                    !4:X22
              VECpiezo_tmp(1:3,5,jq,j)=X12piezo(1:3)                    !5:X12
              VECpiezo_tmp(1:3,6,jq,j)=Ppiezo*(/Epiezo,Gpiezo,Fpiezo/)  !6:[E P,G P,F P]
              VECpiezo_tmp(1:3,7,jq,j)=Npiezo*Ppiezo*X1piezo(1:3)       !7:N P X_1
              VECpiezo_tmp(1:3,8,jq,j)=Epiezo*Ppiezo*normalpiezo(1:3)   !8:E P n
              VECpiezo_tmp(1:3,9,jq,j)=Mpiezo*Ppiezo*X1piezo(1:3)       !9:M P X_1
              VECpiezo_tmp(1:3,10,jq,j)=Mpiezo*Ppiezo*X2piezo(1:3)      !10:M P X_2
              VECpiezo_tmp(1:3,11,jq,j)=Fpiezo*Ppiezo*normalpiezo(1:3)  !11:F P n
              VECpiezo_tmp(1:3,12,jq,j)=Lpiezo*Ppiezo*X2piezo(1:3)      !12:L P X_2
              VECpiezo_tmp(1:3,13,jq,j)=Gpiezo*Ppiezo*normalpiezo(1:3)  !13:G P n
              VECpiezo_tmp(1:3,14,jq,j)=Gpiezo*Rpiezo*X1piezo(1:3)      !14:G R X_1
              VECpiezo_tmp(1:3,15,jq,j)=Epiezo*Rpiezo*X2piezo(1:3)      !15:E R X_2                           
              VECpiezo_tmp(1:3,16,jq,j)=Fpiezo*Rpiezo*X1piezo(1:3)      !16:F R X_1
              VECpiezo_tmp(1:3,17,jq,j)=Fpiezo*Rpiezo*X2piezo(1:3)      !17:F R X_2   
              VECpiezo_tmp(1:3,18,jq,j)=(/Hnpiezo
     &                                   ,Hdpiezo
     &                                   ,Hnpiezo/Hdpiezo/)             !18:Hn,Hd,\kappa=Hn/Hd

              VECpiezo_tmp(1:3,26,jq,j)=normalpiezo(1:3)                !26: nrmalpiezo
              VECpiezo_tmp(1:3,27,jq,j)=Rpiezo*(/Epiezo,Gpiezo,Fpiezo/) !27:[E R,G R,F R]
              VECpiezo_tmp(1:3,28,jq,j)=Ppiezo*(/Lpiezo,Mpiezo,Npiezo/) !28:[E R,G R,F R]
              VECpiezo_tmp(1:3,29,jq,j)=Ppiezo*(/Epiezo,Gpiezo,Fpiezo/)  !6:[E P,G P,F P]
 
             Enddo
             Enddo
             do jq=1,nq_ibm_r_fsh(i)
             do j=1,ns_ibm_r_fsh(i)
                normalpiezo(1:3)=vnPiezo_fsh(1:3,jq,j)

                DY_i_jp(1:3)=VECpiezo_tmp(1:3,1,jq,j)
                DY_i_jm(1:3)=VECpiezo_tmp(1:3,2,jq,j)

                call crossvec_noscale(DX_im_j(1:3)
     &                               ,DY_i_jp(1:3), DY_i_jm(1:3))
                temp_ibm1
     &              =sqrt(DX_im_j(1)**2+DX_im_j(2)**2+DX_im_j(3)**2)

                Qmatpiezo(1,1:3)=(/1.0-normalpiezo(1)**2
     &                            ,normalpiezo(1)*normalpiezo(2)
     &                            ,normalpiezo(1)*normalpiezo(3)/)

                Qmatpiezo(2,1:3)=(/normalpiezo(2)*normalpiezo(1)
     &                            ,1.0-normalpiezo(2)**2
     &                            ,normalpiezo(2)*normalpiezo(3)/)

                Qmatpiezo(3,1:3)=(/normalpiezo(3)*normalpiezo(1)
     &                            ,normalpiezo(3)*normalpiezo(2)
     &                            ,1.0-normalpiezo(3)**2/)
                Qmatpiezo(1:3,1:3)=Qmatpiezo(1:3,1:3)/temp_ibm1         !Q_ij=(1-n_i n_j)/|X_1 x X_2 |

                VECpiezo_tmp(1:3,19,jq,j)=                              !19: Q GP X11 
     &                            MATMUL(Qmatpiezo
     &                                  ,VECpiezo_tmp(2,6,jq,j)
     &                                  *VECpiezo_tmp(1:3,3,jq,j))            
                VECpiezo_tmp(1:3,20,jq,j)=                              !20: Q EP X22 
     &                            MATMUL(Qmatpiezo
     &                                  ,VECpiezo_tmp(1,6,jq,j)
     &                                  *VECpiezo_tmp(1:3,4,jq,j))
                VECpiezo_tmp(1:3,21,jq,j)=                              !21: Q FP X12 
     &                            MATMUL(Qmatpiezo
     &                                  ,VECpiezo_tmp(3,6,jq,j)
     &                                  *VECpiezo_tmp(1:3,5,jq,j))       
             Enddo
             Enddo
             do jq=2,nq_ibm_r_fsh(i)-1
             do j=2,ns_ibm_r_fsh(i)-1
                
              DX_ip_j(1:3)=VECpiezo_tmp(1:3,19,jq+1,j)
              DX_im_j(1:3)=VECpiezo_tmp(1:3,19,jq-1,j)

              DX_i_j (1:3)=VECpiezo_tmp(1:3,19,jq  ,j)

              DX_i_jp(1:3)=VECpiezo_tmp(1:3,19,jq,j+1)
              DX_i_jm(1:3)=VECpiezo_tmp(1:3,19,jq,j-1)

              DY_im_j(1:3)=
     &         (DX_i_j (1:3)-DX_im_j (1:3))/dsf_IBM_fsh(i,jq-1,j) 

              DY_ip_j(1:3)=
     &         (DX_ip_j (1:3)-DX_i_j (1:3))/dsf_IBM_fsh(i,jq,j)  

              DXX_i_j(1:3)=( DY_ip_j(1:3)-DY_im_j(1:3))
     &                     /ds_ibm_fsh(i,jq,j)
              
              DY_im_j(1:3)=
     &         (DX_i_j (1:3)-DX_i_jm (1:3))/dsf2_IBM_fsh(i,jq-1,j) 

              DY_ip_j(1:3)=
     &         (DX_i_jp (1:3)-DX_i_j (1:3))/dsf2_IBM_fsh(i,jq,j)  

              DYY_i_j(1:3)=( DY_ip_j(1:3)-DY_im_j(1:3))
     &                     /ds2_ibm_fsh(i,jq,j)

              call bracketA(Qmatpiezo(1:3,1:3),VECpiezo_tmp(1:3,2,jq,j))
              call bracketA(Pmatpiezo(1:3,1:3),VECpiezo_tmp(1:3,1,jq,j))
              Pmatpiezo(1:3,1:3)=transpose(Pmatpiezo(1:3,1:3))

              VECpiezo_tmp(1:3,22,jq,j)=                                !22: w1
     &                    matmul(
     &                       Qmatpiezo(1:3,1:3)
     &                      ,DXX_i_j(1:3))
              VECpiezo_tmp(1:3,22,jq,j)=  
     &                    VECpiezo_tmp(1:3,22,jq,j) 
     &                   +matmul(
     &                       Pmatpiezo(1:3,1:3)
     &                      ,DYY_i_j(1:3))

              DX_ip_j(1:3)=VECpiezo_tmp(1:3,20,jq+1,j)
              DX_im_j(1:3)=VECpiezo_tmp(1:3,20,jq-1,j)

              DX_i_j (1:3)=VECpiezo_tmp(1:3,20,jq  ,j)

              DX_i_jp(1:3)=VECpiezo_tmp(1:3,20,jq,j+1)
              DX_i_jm(1:3)=VECpiezo_tmp(1:3,20,jq,j-1)

              DY_im_j(1:3)=
     &         (DX_i_j (1:3)-DX_im_j (1:3))/dsf_IBM_fsh(i,jq-1,j) 

              DY_ip_j(1:3)=
     &         (DX_ip_j (1:3)-DX_i_j (1:3))/dsf_IBM_fsh(i,jq,j)   

              DXX_i_j(1:3)=( DY_ip_j(1:3)-DY_im_j(1:3))
     &                     /ds_ibm_fsh(i,jq,j)
              
              DY_im_j(1:3)=
     &         (DX_i_j (1:3)-DX_i_jm (1:3))/dsf2_IBM_fsh(i,jq-1,j) 

              DY_ip_j(1:3)=
     &         (DX_i_jp (1:3)-DX_i_j (1:3))/dsf2_IBM_fsh(i,jq,j)  

              DYY_i_j(1:3)=( DY_ip_j(1:3)-DY_im_j(1:3))
     &                     /ds2_ibm_fsh(i,jq,j)

              VECpiezo_tmp(1:3,23,jq,j)=                                !23: w2
     &                    matmul(
     &                       Qmatpiezo(1:3,1:3)
     &                      ,DXX_i_j(1:3))
              VECpiezo_tmp(1:3,23,jq,j)=  
     &                    VECpiezo_tmp(1:3,23,jq,j) 
     &                   +matmul(
     &                       Pmatpiezo(1:3,1:3)
     &                      ,DYY_i_j(1:3))


              DX_ip_j(1:3)=VECpiezo_tmp(1:3,21,jq+1,j)
              DX_im_j(1:3)=VECpiezo_tmp(1:3,21,jq-1,j)

              DX_i_j (1:3)=VECpiezo_tmp(1:3,21,jq  ,j)

              DX_i_jp(1:3)=VECpiezo_tmp(1:3,21,jq,j+1)
              DX_i_jm(1:3)=VECpiezo_tmp(1:3,21,jq,j-1)

              DY_im_j(1:3)=
     &         (DX_i_j (1:3)-DX_im_j (1:3))/dsf_IBM_fsh(i,jq-1,j) 

              DY_ip_j(1:3)=
     &         (DX_ip_j (1:3)-DX_i_j (1:3))/dsf_IBM_fsh(i,jq,j)  

              DXX_i_j(1:3)=( DY_ip_j(1:3)-DY_im_j(1:3))
     &                     /ds_ibm_fsh(i,jq,j)
              
              DY_im_j(1:3)=
     &         (DX_i_j (1:3)-DX_i_jm (1:3))/dsf2_IBM_fsh(i,jq-1,j) 

              DY_ip_j(1:3)=
     &         (DX_i_jp (1:3)-DX_i_j (1:3))/dsf2_IBM_fsh(i,jq,j)   

              DYY_i_j(1:3)=( DY_ip_j(1:3)-DY_im_j(1:3))
     &                     /ds2_ibm_fsh(i,jq,j)

              VECpiezo_tmp(1:3,24,jq,j)=                                !24: w3
     &                    matmul(
     &                       Qmatpiezo(1:3,1:3)
     &                      ,DXX_i_j(1:3))
              VECpiezo_tmp(1:3,24,jq,j)=  
     &                    VECpiezo_tmp(1:3,24,jq,j) 
     &                   +matmul(
     &                       Pmatpiezo(1:3,1:3)
     &                      ,DYY_i_j(1:3))
             Enddo
             Enddo
             do jq=2,nq_ibm_r_fsh(i)-1
             do j=2,ns_ibm_r_fsh(i)-1
              

              DX_ip_j(1:3)=VECpiezo_tmp(1:3,7,jq+1,j)
              DX_im_j(1:3)=VECpiezo_tmp(1:3,7,jq-1,j)
              DX_i_j (1:3)=VECpiezo_tmp(1:3,7,jq  ,j)


              DY_im_j(1:3)=
     &         (DX_i_j (1:3)-DX_im_j (1:3))/dsf_IBM_fsh(i,jq-1,j) 

              DY_ip_j(1:3)=
     &         (DX_ip_j (1:3)-DX_i_j (1:3))/dsf_IBM_fsh(i,jq,j)   

              DY_i_j(1:3)=( DY_ip_j(1:3)+DY_im_j(1:3))
     &                     /2.0
              VectempPiezo(1:3)=-2.0*DY_i_j(1:3)                        !-2(NPX_1)_1


              DX_i_j (1:3)=VECpiezo_tmp(1:3,8,jq  ,j)
              DX_i_jp(1:3)=VECpiezo_tmp(1:3,8,jq,j+1)
              DX_i_jm(1:3)=VECpiezo_tmp(1:3,8,jq,j-1)

              DY_im_j(1:3)=
     &         (DX_i_j (1:3)-DX_i_jm (1:3))/dsf2_IBM_fsh(i,jq,j-1) 

              DY_ip_j(1:3)=
     &         (DX_i_jp (1:3)-DX_i_j (1:3))/dsf2_IBM_fsh(i,jq,j)   

              DYY_i_j(1:3)=( DY_ip_j(1:3)-DY_im_j(1:3))
     &                     /ds2_ibm_fsh(i,jq,j)

              VectempPiezo(1:3)=VectempPiezo(1:3)+DYY_i_j(1:3)          !+(EPn)_22

  
              VectempPiezo(1:3)=VectempPiezo(1:3)                       !-w1
     &                         -VECpiezo_tmp(1:3,22,jq,j)


              DX_i_j (1:3)=VECpiezo_tmp(1:3,9,jq  ,j)
              DX_i_jp(1:3)=VECpiezo_tmp(1:3,9,jq,j+1)
              DX_i_jm(1:3)=VECpiezo_tmp(1:3,9,jq,j-1)

              DY_im_j(1:3)=
     &         (DX_i_j (1:3)-DX_i_jm (1:3))/dsf2_IBM_fsh(i,jq,j-1) 

              DY_ip_j(1:3)=
     &         (DX_i_jp (1:3)-DX_i_j (1:3))/dsf2_IBM_fsh(i,jq,j)   
              DY_i_j(1:3)=( DY_ip_j(1:3)+DY_im_j(1:3))
     &                     /2.0

              VectempPiezo(1:3)=VectempPiezo(1:3)                       !+2(X_1MP)_2
     &                         +2.0*DY_i_j(1:3)


              DX_ip_j(1:3)=VECpiezo_tmp(1:3,10,jq+1,j)
              DX_im_j(1:3)=VECpiezo_tmp(1:3,10,jq-1,j)
              DX_i_j (1:3)=VECpiezo_tmp(1:3,10,jq  ,j)


              DY_im_j(1:3)=
     &         (DX_i_j (1:3)-DX_im_j (1:3))/dsf_IBM_fsh(i,jq-1,j) 

              DY_ip_j(1:3)=
     &         (DX_ip_j (1:3)-DX_i_j (1:3))/dsf_IBM_fsh(i,jq,j)   

              DY_i_j(1:3)=( DY_ip_j(1:3)+DY_im_j(1:3))
     &                     /2.0

              VectempPiezo(1:3)=VectempPiezo(1:3)                       !+2(X_2MP)_1
     &                         +2.0*DY_i_j(1:3)


              DX_im_jm(1:3)=VECpiezo_tmp(1:3,11,jq-1,j-1)
              DX_im_j(1:3)=VECpiezo_tmp(1:3,11,jq-1,j)
              DX_im_jp(1:3)=VECpiezo_tmp(1:3,11,jq-1,j+1)
              DX_i_jm(1:3)=VECpiezo_tmp(1:3,11,jq,j-1)
              DX_i_j(1:3)=VECpiezo_tmp(1:3,11,jq,j)
              DX_i_jp(1:3)=VECpiezo_tmp(1:3,11,jq,j+1)
              DX_ip_jm(1:3)=VECpiezo_tmp(1:3,11,jq+1,j-1)
              DX_ip_j(1:3)=VECpiezo_tmp(1:3,11,jq+1,j)
              DX_ip_jp(1:3)=VECpiezo_tmp(1:3,11,jq+1,j+1)

              DY_im_j(1:3)=
     &         (DX_i_j (1:3)-DX_i_jm (1:3))/dsf2_IBM_fsh(i,jq,j-1) 

              DY_ip_j(1:3)=
     &         (DX_i_jp (1:3)-DX_i_j (1:3))/dsf2_IBM_fsh(i,jq,j) 
  
              DY_i_j(1:3)=( DY_ip_j(1:3)+DY_im_j(1:3))
     &                     /2.0
  
              DY_im_j(1:3)=
     &         (DX_im_j (1:3)-DX_im_jm (1:3))/dsf2_IBM_fsh(i,jq-1,j-1) 

              DY_ip_j(1:3)=
     &         (DX_im_jp (1:3)-DX_im_j (1:3))/dsf2_IBM_fsh(i,jq-1,j) 
  
              DY_i_jm(1:3)=( DY_ip_j(1:3)+DY_im_j(1:3))
     &                     /2.0

              DY_im_j(1:3)=
     &         (DX_ip_j (1:3)-DX_ip_jm (1:3))/dsf2_IBM_fsh(i,jq+1,j-1) 

              DY_ip_j(1:3)=
     &         (DX_ip_jp (1:3)-DX_ip_j (1:3))/dsf2_IBM_fsh(i,jq+1,j) 
  
              DY_i_jp(1:3)=( DY_ip_j(1:3)+DY_im_j(1:3))
     &                     /2.0

              DY_im_j(1:3)=
     &         (DY_i_j (1:3)-DY_i_jm (1:3))/dsf_IBM_fsh(i,jq-1,j) 

              DY_ip_j(1:3)=
     &         (DY_i_jp (1:3)-DY_i_j (1:3))/dsf_IBM_fsh(i,jq,j)   

              DY_i_j(1:3)=( DY_ip_j(1:3)+DY_im_j(1:3))
     &                     /2.0

              VectempPiezo(1:3)=VectempPiezo(1:3)                       !+(FPn)_21
     &                         +DY_i_j(1:3)

              DY_im_j(1:3)=
     &         (DX_i_j (1:3)-DX_im_j (1:3))/dsf_IBM_fsh(i,jq-1,j) 

              DY_ip_j(1:3)=
     &         (DX_ip_j (1:3)-DX_i_j (1:3))/dsf_IBM_fsh(i,jq,j) 
  
              DY_i_j(1:3)=( DY_ip_j(1:3)+DY_im_j(1:3))
     &                     /2.0
  
              DY_im_j(1:3)=
     &         (DX_i_jm (1:3)-DX_im_jm (1:3))/dsf_IBM_fsh(i,jq-1,j-1) 

              DY_ip_j(1:3)=
     &         (DX_ip_jm (1:3)-DX_i_jm (1:3))/dsf_IBM_fsh(i,jq,j-1) 
  
              DY_i_jm(1:3)=( DY_ip_j(1:3)+DY_im_j(1:3))
     &                     /2.0

              DY_im_j(1:3)=
     &         (DX_i_jp (1:3)-DX_im_jp (1:3))/dsf_IBM_fsh(i,jq-1,j+1) 

              DY_ip_j(1:3)=
     &         (DX_ip_jp (1:3)-DX_i_jp (1:3))/dsf_IBM_fsh(i,jq,j+1) 
  
              DY_i_jp(1:3)=( DY_ip_j(1:3)+DY_im_j(1:3))
     &                     /2.0

              DY_im_j(1:3)=
     &         (DY_i_j (1:3)-DY_i_jm (1:3))/dsf2_IBM_fsh(i,jq,j-1) 

              DY_ip_j(1:3)=
     &         (DY_i_jp (1:3)-DY_i_j (1:3))/dsf2_IBM_fsh(i,jq,j)   

              DY_i_j(1:3)=( DY_ip_j(1:3)+DY_im_j(1:3))
     &                     /2.0

              VectempPiezo(1:3)=VectempPiezo(1:3)                       !+(FPn)_12
     &                         +DY_i_j(1:3)


              VectempPiezo(1:3)=VectempPiezo(1:3)                       !+2*w3
     &                         +2.0*VECpiezo_tmp(1:3,24,jq,j)

              DX_i_j (1:3)=VECpiezo_tmp(1:3,12,jq  ,j)
              DX_i_jp(1:3)=VECpiezo_tmp(1:3,12,jq,j+1)
              DX_i_jm(1:3)=VECpiezo_tmp(1:3,12,jq,j-1)

              DY_im_j(1:3)=
     &         (DX_i_j (1:3)-DX_i_jm (1:3))/dsf2_IBM_fsh(i,jq,j-1) 

              DY_ip_j(1:3)=
     &         (DX_i_jp (1:3)-DX_i_j (1:3))/dsf2_IBM_fsh(i,jq,j)   

              DY_i_j(1:3)=( DY_ip_j(1:3)+DY_im_j(1:3))
     &                     /2.0

              VectempPiezo(1:3)=VectempPiezo(1:3)-2*DY_i_j(1:3)         !-2(LPX_2)_2


              DX_ip_j(1:3)=VECpiezo_tmp(1:3,13,jq+1,j)
              DX_im_j(1:3)=VECpiezo_tmp(1:3,13,jq-1,j)
              DX_i_j (1:3)=VECpiezo_tmp(1:3,13,jq  ,j)

              DY_im_j(1:3)=
     &         (DX_i_j (1:3)-DX_im_j (1:3))/dsf_IBM_fsh(i,jq-1,j) 

              DY_ip_j(1:3)=
     &         (DX_ip_j (1:3)-DX_i_j (1:3))/dsf_IBM_fsh(i,jq,j)   

              DYY_i_j(1:3)=( DY_ip_j(1:3)-DY_im_j(1:3))
     &                     /ds_ibm_fsh(i,jq,j)

              VectempPiezo(1:3)=VectempPiezo(1:3)                       !+(GPn)_11
     &                         +DYY_i_j(1:3)                        

              VectempPiezo(1:3)=VectempPiezo(1:3)                       !-w2
     &                         -VECpiezo_tmp(1:3,23,jq,j)

              DX_ip_j(1:3)=VECpiezo_tmp(1:3,14,jq+1,j)
              DX_im_j(1:3)=VECpiezo_tmp(1:3,14,jq-1,j)
              DX_i_j (1:3)=VECpiezo_tmp(1:3,14,jq  ,j)

              DY_im_j(1:3)=
     &         (DX_i_j (1:3)-DX_im_j (1:3))/dsf_IBM_fsh(i,jq-1,j) 

              DY_ip_j(1:3)=
     &         (DX_ip_j (1:3)-DX_i_j (1:3))/dsf_IBM_fsh(i,jq,j)   

              DY_i_j(1:3)=( DY_ip_j(1:3)+DY_im_j(1:3))
     &                     /2.0

              VectempPiezo(1:3)=VectempPiezo(1:3)                       !+4(GRX_1)_1
     &                         +4.0*DY_i_j(1:3)                        

              DX_i_j (1:3)=VECpiezo_tmp(1:3,15,jq  ,j)
              DX_i_jp(1:3)=VECpiezo_tmp(1:3,15,jq,j+1)
              DX_i_jm(1:3)=VECpiezo_tmp(1:3,15,jq,j-1)

              DY_im_j(1:3)=
     &         (DX_i_j (1:3)-DX_i_jm (1:3))/dsf2_IBM_fsh(i,jq,j-1) 

              DY_ip_j(1:3)=
     &         (DX_i_jp (1:3)-DX_i_j (1:3))/dsf2_IBM_fsh(i,jq,j)   

              DY_i_j(1:3)=( DY_ip_j(1:3)+DY_im_j(1:3))
     &                     /2.0

              VectempPiezo(1:3)=VectempPiezo(1:3)                       !+4(ERX_2)_2
     &                         +4.0*DY_i_j(1:3)                        

              DX_i_j (1:3)=VECpiezo_tmp(1:3,16,jq  ,j)
              DX_i_jp(1:3)=VECpiezo_tmp(1:3,16,jq,j+1)
              DX_i_jm(1:3)=VECpiezo_tmp(1:3,16,jq,j-1)

              DY_im_j(1:3)=
     &         (DX_i_j (1:3)-DX_i_jm (1:3))/dsf2_IBM_fsh(i,jq,j-1) 

              DY_ip_j(1:3)=
     &         (DX_i_jp (1:3)-DX_i_j (1:3))/dsf2_IBM_fsh(i,jq,j)   

              DY_i_j(1:3)=( DY_ip_j(1:3)+DY_im_j(1:3))
     &                     /2.0

              VectempPiezo(1:3)=VectempPiezo(1:3)                       !+4(ERX_2)_2
     &                         -4.0*DY_i_j(1:3)                        

              DX_ip_j(1:3)=VECpiezo_tmp(1:3,17,jq+1,j)
              DX_im_j(1:3)=VECpiezo_tmp(1:3,17,jq-1,j)
              DX_i_j (1:3)=VECpiezo_tmp(1:3,17,jq  ,j)

              DY_im_j(1:3)=
     &         (DX_i_j (1:3)-DX_im_j (1:3))/dsf_IBM_fsh(i,jq-1,j) 

              DY_ip_j(1:3)=
     &         (DX_ip_j (1:3)-DX_i_j (1:3))/dsf_IBM_fsh(i,jq,j)   

              DY_i_j(1:3)=( DY_ip_j(1:3)+DY_im_j(1:3))
     &                     /2.0

              VectempPiezo(1:3)=VectempPiezo(1:3)                       !+4(GRX_1)_1
     &                         -4.0*DY_i_j(1:3)  


               Fpiezo1_fsh(i,jq,j)=                 !+(EPn)_22
     &                          VectempPiezo(1) 
               Fpiezo2_fsh(i,jq,j)=                 !+(EPn)_22
     &                          VectempPiezo(2) 
               Fpiezo3_fsh(i,jq,j)=                 !+(EPn)_22
     &                          VectempPiezo(3) 
             Enddo
             Enddo
            endif
          endif
        if(ndim .gt. 2) then
          ddcont=(min_grid_x*min_grid_y*min_grid_z)**(1.0/3.0)
        else
          ddcont=sqrt(min_grid_x*min_grid_y)
        endif
        i=ibdy

        if(ContactForceFlag(i2g)) then
           include "distIBM_Contact_Coeffn.Fi"   
           if(contacttype .ne. -1) then
             write(*,*) 'this version is not implemented yet!'
             STOP
           endif
           do ibkt2=1,NBucketnum

             ibktmp1=mod(ibkt2,IBucketnum(1)*IBucketnum(2))
             if(ibktmp1 .eq. 0) ibktmp1=IBucketnum(1)*IBucketnum(2)

             ibktx=mod(ibktmp1,IBucketnum(1))
             if(ibktx .eq. 0) ibktx=IBucketnum(1)

             ibkty=int((ibktmp1-1)/IBucketnum(1))+1
             ibktz=int((ibkt2-1)/(IBucketnum(1)*IBucketnum(2)))+1

             ibktmin(1)=max(1,ibktx-1)
             ibktmax(1)=min(IBucketnum(1),ibktx+1)

             ibktmin(2)=max(1,ibkty-1)
             ibktmax(2)=min(IBucketnum(2),ibkty+1)

             ibktmin(3)=max(1,ibktz-1)
             ibktmax(3)=min(IBucketnum(3),ibktz+1)

             do ibkt_i=PBucket(i2g,ibkt2),PBucket(i2g,ibkt2+1)-1
                jq2=sBucket_fsh(i,ibkt2,ibkt_i,2)
                j2 =sBucket_fsh(i,ibkt2,ibkt_i,1)
                do i2=1,nFixcontact
                        if((
     &                 (abs((GXtmp(1,jq2,j2)-
     &                     -xFixcontact(k,1))
     &                       /min_grid_x)
     &                 .le.12.0) .and.
     &                  abs((GXtmp(2,jq2,j2)
     &                     -xFixcontact(k,2))
     &                       /min_grid_y)
     &                 .le.12.0) .and.
     &                 (abs((GXtmp(3,jq2,j2)-
     &                     -xFixcontact(k,3))
     &                       /min_grid_z)
     &                 .le.12.0) ) then

                         temp_ibm1= 
     &                      (GXtmp(2,jq2,j2)
     &                     -xFixcontact(k,2))
     &                     /(min_grid_y)

                           call delta_fun(delta_typey,temp_ibm1,fn2)

                          temp_ibm2= 
     &                     (GXtmp(1,jq2,j2)
     &                     -xFixcontact(k,1))
     &                     /(min_grid_x)

                           call delta_fun(delta_typex,temp_ibm2,fn1)

                          if(ndim .gt. 2) then

                             temp_ibm3= 
     &                       (GXtmp(3,jq2,j2)
     &                     -xFixcontact(k,3))
     &                       /(min_grid_z) 
                           call delta_fun(delta_typez,temp_ibm3,fn3)
                          else
                             temp_ibm3=0.0
                             fn3=1.0
                          endif

                         temp3_ibm=
     &                   sqrt((temp_ibm1*min_grid_y)**2
     &                      +(temp_ibm2*min_grid_x)**2
     &                      +(temp_ibm3*min_grid_z)**2)+1.0d-9

                          f_impuls1_fsh(i,jq2,j2)= 
     &                               f_impuls1_fsh(i,jq2,j2)+
     &                               fn1*fn2*fn3
     &                               *ds_ibm_fsh(i,jq2,j2) 
     &                               *ds2_ibm_fsh(i,jq2,j2)
     &                               *impactpen(1)
     &                        /(min_grid_x*min_grid_y*min_grid_z)
     &                        *(GXtmp(1,jq2,j2)
     &                         -xFixcontact(k,1))
     &                          /temp3_ibm
                          f_impuls2_fsh(i,jq2,j2)=  
     &                               f_impuls2_fsh(i,jq2,j2)+
     &                               fn1*fn2*fn3
     &                               *ds_ibm_fsh(i,jq2,j2) 
     &                               *ds2_ibm_fsh(i,jq2,j2)
     &                               *impactpen(1)
     &                        /(min_grid_x*min_grid_y*min_grid_z)
     &                         *(GXtmp(2,jq2,j2)
     &                          -xFixcontact(k,1))/temp3_ibm
                          if(ndim .gt. 2) 
     &                    f_impuls3_fsh(i,jq2,j2)=  
     &                               f_impuls3_fsh(i,jq2,j2)+
     &                               fn1*fn2*fn3
     &                               *ds_ibm_fsh(i,jq2,j2) 
     &                               *ds2_ibm_fsh(i,jq2,j2)
     &                               *impactpen(1)
     &                        /(min_grid_x*min_grid_y*min_grid_z)
     &                        *(GXtmp(3,jq2,j2)
     &                          -xFixcontact(k,3))
     &                        /temp3_ibm
                        endif
                  enddo   !i2i
             enddo
         enddo


          if (i2g .le. nr_ibm_f) then

! c      contact for periodic structures remains
!             if(BoundaryFibShell(i,1,1) .eq. 3) then 
!               jstarttmp=1
!             else
!               jstarttmp=0
!             endif

!             if(BoundaryFibShell(i,2,1) .eq. 3) then 
!               jqstarttmp=1
!             else
!               jqstarttmp=0
!             endif
           do ibkt2=1,NBucketnum

             ibktmp1=mod(ibkt2,IBucketnum(1)*IBucketnum(2))
             if(ibktmp1 .eq. 0) ibktmp1=IBucketnum(1)*IBucketnum(2)

             ibktx=mod(ibktmp1,IBucketnum(1))
             if(ibktx .eq. 0) ibktx=IBucketnum(1)

             ibkty=int((ibktmp1-1)/IBucketnum(1))+1
             ibktz=int((ibkt2-1)/(IBucketnum(1)*IBucketnum(2)))+1

             ibktmin(1)=max(1,ibktx-1)
             ibktmax(1)=min(IBucketnum(1),ibktx+1)

             ibktmin(2)=max(1,ibkty-1)
             ibktmax(2)=min(IBucketnum(2),ibkty+1)

             ibktmin(3)=max(1,ibktz-1)
             ibktmax(3)=min(IBucketnum(3),ibktz+1)

             do ibkt_i=PBucket(i2g,ibkt2),PBucket(i2g,ibkt2+1)-1
                jq2=sBucket_fsh(i,ibkt2,ibkt_i,2)
                j2 =sBucket_fsh(i,ibkt2,ibkt_i,1)

               do i2=1,nr_ibm_fsh
                  i3g=Ilocglb_fsh(i2)
                  if(i3g .le. nr_ibm_fb) then
                  if(i2 .ne. i) then
                    do ibkts1=ibktmin(1),ibktmax(1)
                    do ibkts2=ibktmin(2),ibktmax(2)
                    do ibkts3=ibktmin(3),ibktmax(3)
                      ibkt=
     &                       ibkts1
     &                     +(ibkts2-1)*IBucketnum(1)
     &                     +(ibkts3-1)*IBucketnum(1)*IBucketnum(2)
                      do ibkt2_i=PBucket(i3g,ibkt),PBucket(i3g,ibkt+1)-1
                         jq=sBucket_fsh(i2,ibkt,ibkt2_i,2)
                         j =sBucket_fsh(i2,ibkt,ibkt2_i,1)     

                        ksh_tmp=sqrt(
     &                     (GXtmp(2,jq2,j2)-
     &                          gy_ibm_fsh(i2,jq,j))**2+
     &                    (GXtmp(1,jq2,j2)-
     &                          gx_ibm_fsh(i2,jq,j))**2+
     &                    (GXtmp(3,jq2,j2)-
     &                          gz_ibm_fsh(i2,jq,j))**2)

                        dncont=-1.0
                        temp_ibm2=time_alphaf  

                        if( (ksh_tmp/ddcont .le. 10.0) 
     &                .and. (temp_ibm2 .gt. 0.05)      ) then
                              temp_ibm1=max(ksh_tmp/ddcont,0.0)
                              call delta_fun(delta_typey,temp_ibm1,fn1)
                              temp3_ibm=ksh_tmp
                              dxcont(1)=temp_ibm1
                              dxcont(2)=1.0/(1+exp(10*(dxcont(1)-0.0)))
                              dxcont(3)=impactpen(1)
     &                            +dxcont(2)*impactpen(2)
                              dxcont(3)=dxcont(3)*dncont

!                              ksh_tmp=0.5*(
!     &                               sqrt(f_impulsHis1_fsh(i,jq2,j2)**2
!     &                                   +f_impulsHis2_fsh(i,jq2,j2)**2
!     &                                   +f_impulsHis3_fsh(i,jq2,j2)**2)
!     &                          +1.0*sqrt(f_impulsHis1_fsh(i2,jq,j )**2
!     &                                   +f_impulsHis2_fsh(i2,jq,j )**2
!     &                                   +f_impulsHis3_fsh(i2,jq,j )**2)
!     &                                    )
!                              ksh_tmp=max(ksh_tmp,1.0)
                              ksh_tmp=1.0 

                              f_impuls1_fsh(i,jq2,j2)=
     &                                f_impuls1_fsh(i,jq2,j2)+
     &                               fn1*2.0
     &                               *ds_ibm_fsh(i,jq2,j2) 
     &                               *ds2_ibm_fsh(i,jq2,j2)
     &                               *dxcont(3)*ksh_tmp
     &                               *( GXtmp(1,jq2,j2)
     &                                 -gx_ibm_fsh(i2,jq,j))
     &                               /temp3_ibm


                              f_impuls2_fsh(i,jq2,j2)=
     &                                f_impuls2_fsh(i,jq2,j2)+
     &                               fn1*2.0
     &                               *ds_ibm_fsh(i,jq2,j2) 
     &                               *ds2_ibm_fsh(i,jq2,j2)
     &                               *dxcont(3)*ksh_tmp
     &                              *(GXtmp(2,jq2,j2)
     &                               -gy_ibm_fsh(i2,jq,j))
     &                               /temp3_ibm
                              if(ndim .gt. 2) then
  

                                 f_impuls3_fsh(i,jq2,j2)=
     &                               f_impuls3_fsh(i,jq2,j2)+
     &                               fn1*2.0
     &                               *ds_ibm_fsh(i,jq2,j2) 
     &                               *ds2_ibm_fsh(i,jq2,j2)
     &                              *dxcont(3)*ksh_tmp
     &                              *(GXtmp(3,jq2,j2)
     &                               -gz_ibm_fsh(i2,jq,j))
     &                               /temp3_ibm

                              endif
                         endif
                     end do  !ibkt2_i
                     enddo   !ibkts1
                     enddo   !ibkts2
                     enddo   !ibkts3
                  endif
                  endif
               enddo   !i2i

               i2=ibdy
               i2g=ibdyg
                    do ibkts1=ibktmin(1),ibktmax(1)
                    do ibkts2=ibktmin(2),ibktmax(2)
                    do ibkts3=ibktmin(3),ibktmax(3)
                      ibkt=
     &                       ibkts1
     &                     +(ibkts2-1)*IBucketnum(1)
     &                     +(ibkts3-1)*IBucketnum(1)*IBucketnum(2)
                      do ibkt2_i=PBucket(i2g,ibkt)
     &                          ,PBucket(i2g,ibkt+1)-1
                         jq=sBucket_fsh(i,ibkt,ibkt2_i,2)
                         j =sBucket_fsh(i,ibkt,ibkt2_i,1)   
                         if(   (abs(j2 -j ) .gt. 8) 
     &                    .and. (     (abs(jq2-jq) .gt. 8)
     &                    .or.(nq_ibm_r_fsh(i2) .eq. 1 ) ) ) then

                            temp_ibm1=GXtmp(2,jq2,j2)-GXtmp(2,jq,j)
                            temp_ibm2=GXtmp(1,jq2,j2)-GXtmp(1,jq,j)
                            if(ndim .gt. 2) then
                              temp_ibm3=GXtmp(3,jq2,j2)-GXtmp(3,jq,j)
                            else
                              temp_ibm3=0.0
                            endif

                            ksh_tmp=sqrt(
     &                        temp_ibm1**2+
     &                        temp_ibm2**2+
     &                        temp_ibm3**2)

                              dncont=-1.0
                              temp_ibm2=time_alphaf  
                        if( (ksh_tmp/ddcont   .le. 10.0) 
     &                  .and. (temp_ibm2 .gt. 0.05) ) then
                              temp_ibm1= 
     &                           max(ksh_tmp*dncont/ddcont,0.0)
                              call delta_fun(delta_typey,temp_ibm1,fn1)
                              temp3_ibm=ksh_tmp
                              dxcont(1)=temp_ibm1 
                              dxcont(2)=1.0/(1+exp(10*(dxcont(1)-1.0)))
                              dxcont(3)=impactpen(1)
     &                            +dxcont(2)*impactpen(2)
                              dxcont(3)=dxcont(3)*dncont

                               ksh_tmp=1.0

                               f_impuls1_fsh(i,jq2,j2)=
     &                                f_impuls1_fsh(i,jq2,j2)+
     &                               fn1*2.0
     &                               *ds_ibm_fsh(i,jq2,j2) 
     &                               *ds2_ibm_fsh(i,jq2,j2)
     &                               *dxcont(3)*ksh_tmp
     &                               *( GXtmp(1,jq2,j2)
     &                                 -GXtmp(1,jq,j))
     &                               /temp3_ibm


                               f_impuls2_fsh(i,jq2,j2)=
     &                                f_impuls2_fsh(i,jq2,j2)+
     &                               fn1*2.0
     &                               *ds_ibm_fsh(i,jq2,j2) 
     &                               *ds2_ibm_fsh(i,jq2,j2)
     &                               *dxcont(3)*ksh_tmp
     &                              *(GXtmp(2,jq2,j2)
     &                               -GXtmp(2,jq,j)) 
     &                               /temp3_ibm
                               if(ndim .gt. 2) 
     &                            f_impuls3_fsh(i,jq2,j2)=
     &                               f_impuls3_fsh(i,jq2,j2)+
     &                               fn1*2.0
     &                               *ds_ibm_fsh(i,jq2,j2) 
     &                               *ds2_ibm_fsh(i,jq2,j2)
     &                              *dxcont(3)*ksh_tmp
     &                              *(GXtmp(3,jq2,j2)
     &                               -GXtmp(3,jq,j))
     &                               /temp3_ibm

                        endif

                     endif !j2-j>8
                     end do  !ibkt2_i
                     enddo   !ibkts1
                     enddo   !ibkts2
                     enddo   !ibkts3
             enddo !ibkt_i
             enddo !ibkt2

             if(contactplanesFlag(ibdyg)) then
               do ibkt2=1,Ncontactplanes(ibdyg) 
                contactplane_point(1:3)= 
     &                       contactplanesPara(ibdyg,ibkt2,1:3)
                contactplane_n(1:3)=
     &                       contactplanesPara(ibdyg,ibkt2,4:6)

                dncont=0.0
                do i2=1,3
                   dncont=dncont+contactplane_n(i2) 
     &                          *contactplane_point(i2)
                enddo
                contactplane_n(4)=-dncont  !plane defined as ax+by+cz+d=0, here we save d
               temp_ibm2=s_function((time_alphaf-contact_time_fsh(i,1))
     &                              /contact_time_fsh(i,2) )
                                
               temp_ibm2=time_alphaf

               do jq=1,nq_ibm_r_fsh(i)
               do j=1,ns_ibm_r_fsh(i)

                   ksh_tmp=contactplane_n(1) 
     &                   *GXtmp(1,jq,j) 
     &                   +contactplane_n(2) 
     &                   *GXtmp(2,jq,j) 
     &                   +contactplane_n(3) 
     &                   *GXtmp(3,jq,j) 
     &                   +contactplane_n(4)
                  ksh_tmp=-ksh_tmp
                  tmpv3(3)=0.0
                  if(abs(ksh_tmp)/ddcont   .le. 15.0) then

                      tmpv3(1)=
     &                impactpen(1)/contact_coef_fsh(i,ibkt2,jq,j)/ddcont
                      if(ksh_tmp .gt. 0) then
                          tmpv3(2)=
     &                      0.5*tmpv3(1)*contact_coef_fsh(i,ibkt2,jq,j)
     &                      +tmpv3(1)*ksh_tmp
                          tmpv2(2)=-tmpv3(1)
                      elseif(ksh_tmp 
     &                        .gt. -contact_coef_fsh(i,ibkt2,jq,j)) then
                          tmpv3(2)=
     &                     tmpv3(1)/(2.0*contact_coef_fsh(i,ibkt2,jq,j))
     &                      *(ksh_tmp+contact_coef_fsh(i,ibkt2,jq,j))**2
                          tmpv2(2)=
     &                      -tmpv3(1)/(contact_coef_fsh(i,ibkt2,jq,j))
     &                         *(ksh_tmp+contact_coef_fsh(i,ibkt2,jq,j))
                      else
                          tmpv3(2)=0.0
                          tmpv2(2)=0.0
                      endif
                      ksh_tmp=tmpv3(2)
!     &                      *ds_ibm_fsh(i,jq,j) 
!     &                      *ds2_ibm_fsh(i,jq,j)

                      f_impuls1_fsh(i,jq,j)=
     &                  f_impuls1_fsh(i,jq,j)+ksh_tmp
     &                               *contactplane_n(1)
                      f_impuls2_fsh(i,jq,j)=
     &                  f_impuls2_fsh(i,jq,j)+ksh_tmp
     &                               *contactplane_n(2)
                      f_impuls3_fsh(i,jq,j)=
     &                  f_impuls3_fsh(i,jq,j)+ksh_tmp
     &                               *contactplane_n(3)

                      ksh_tmp=timeMarchcoef(1)*tmpv2(2)
!     &                      *ds_ibm_fsh(i,jq,j) 
!     &                      *ds2_ibm_fsh(i,jq,j)
                      do j2=1,3
                           tmpv2(1)=contactplane_n(j)
                            do k=1,3
                             tmpv2(3)=contactplane_n(k)
                              aamat_fsh((jq-1)*ns_ibm_r_fsh(i)+j,j2,k)
     &                       =aamat_fsh((jq-1)*ns_ibm_r_fsh(i)+j,j2,k)
     &                           -ksh_tmp*tmpv2(1)*tmpv2(3)
                           enddo
                      enddo

                   endif
                enddo !j
                enddo !jq
             enddo !ibkt2
            endif !contactplanesFlag

            if(channelcontacty) then

             do jq2=1,nq_ibm_r_fsh(i)
             do j2=1,ns_ibm_r_fsh(i)

               do i2=1,2  !with channel bndry in y
                     if(i2 .eq. 1) then
                        h_channel=gy(nygrid_ibm)
                        if (GXtmp(2,jq2,j2)
     &                      .lt. h_channel) then
                            ksh_tmp=GXtmp(2,jq2,j2)
                        else
                           ksh_tmp=h_channel-1.0d-9
                        endif
                     else
                        h_channel=gy(2)
                        if (GXtmp(2,jq2,j2)
     &                      .gt. h_channel) then
                            ksh_tmp=GXtmp(2,jq2,j2)
                        else
                           ksh_tmp=h_channel+1.0d-9
                        endif
                     endif
                     do j=1,nxgrid_ibm
                       do k=1,nzgrid_ibm
                        if((
     &                  abs((GXtmp(2,jq2,j2)-h_channel)
     &                       /min_grid_y)
     &                 .le.12.0) .and.
     &                 (abs((GXtmp(1,jq2,j2)-gx(j))
     &                       /min_grid_x)
     &                 .le.12.0) .and.
     &                 (abs((GXtmp(3,jq2,j2)-gz(k))
     &                       /min_grid_z)
     &                 .le.12.0) ) then

                         temp_ibm1= 
     &                      abs((ksh_tmp-h_channel)
     &                     /(min_grid_y))

                           call delta_fun(delta_typey,temp_ibm1,fn2)

                          temp_ibm2= 
     &                     abs((GXtmp(1,jq2,j2)-gx(j))
     &                     /(min_grid_x))

                           call delta_fun(delta_typex,temp_ibm2,fn1)

                          if(ndim .gt. 2) then

                             temp_ibm3= 
     &                       abs((GXtmp(3,jq2,j2)-gz(k))
     &                       /(min_grid_z) )
                           call delta_fun(delta_typez,temp_ibm3,fn3)
                          else
                             temp_ibm3=0.0
                             fn3=1.0
                          endif

                         temp3_ibm=
     &                   sqrt((temp_ibm1*min_grid_y)**2
     &                      +(temp_ibm2*min_grid_x)**2
     &                      +(temp_ibm3*min_grid_z)**2)+1.0d-9

                          f_impuls1_fsh(i,jq2,j2)= 
     &                               f_impuls1_fsh(i,jq2,j2)+
     &                               fn1*fn2*fn3
     &                               *ds_ibm_fsh(i,jq2,j2) 
     &                               *ds2_ibm_fsh(i,jq2,j2)
     &                               *impactpen(1)
     &                        /(min_grid_x*min_grid_y*min_grid_z)
     &                        *(GXtmp(1,jq2,j2)-gx(j))
     &                          /temp3_ibm
                          f_impuls2_fsh(i,jq2,j2)=  
     &                               f_impuls2_fsh(i,jq2,j2)+
     &                               fn1*fn2*fn3
     &                               *ds_ibm_fsh(i,jq2,j2) 
     &                               *ds2_ibm_fsh(i,jq2,j2)
     &                               *impactpen(1)
     &                        /(min_grid_x*min_grid_y*min_grid_z)
     &                        *(ksh_tmp-h_channel)/temp3_ibm
                          if(ndim .gt. 2) 
     &                    f_impuls3_fsh(i,jq2,j2)=  
     &                               f_impuls3_fsh(i,jq2,j2)+
     &                               fn1*fn2*fn3
     &                               *ds_ibm_fsh(i,jq2,j2) 
     &                               *ds2_ibm_fsh(i,jq2,j2)
     &                               *impactpen(1)
     &                        /(min_grid_x*min_grid_y*min_grid_z)
     &                        *(GXtmp(3,jq2,j2)-gz(k))
     &                        /temp3_ibm
                        endif
                    
                   end do !k=1,nz 
                 end do !j=1,nx
               enddo  !i2=1,2
             end do    !j2
             end do    !jq2
             endif !channelcontacty

             if((channelcontactz) .and. (ndim .gt. 2)) then
             do jq2=1,nq_ibm_r_fsh(i)
             do j2=1,ns_ibm_r_fsh(i)

               do i2=1,2  !with channel bndry in z
                     if(i2 .eq. 1) then
                        h_channel=gz(nzgrid_ibm)
                        if (GXtmp(3,jq2,j2).lt. h_channel)
     &                    then
                            ksh_tmp=GXtmp(3,jq2,j2)
                        else
                            ksh_tmp=h_channel-1.0d-9
                        endif
                     else
                        h_channel=gz(2)
                        if (GXtmp(3,jq2,j2).gt. h_channel)
     &                     then
                            ksh_tmp=GXtmp(3,jq2,j2)
                        else
                           ksh_tmp=h_channel+1.0d-9
                        endif
                     endif
                     do j=1,nxgrid_ibm
                       do k=1,nygrid_ibm
                        if((
     &                  abs((GXtmp(2,jq2,j2)-gy(k))
     &                  /min_grid_y)
     &                 .le.12.0) .and.
     &                 (abs((GXtmp(1,jq2,j2)-gx(j))
     &                  /min_grid_x)
     &                 .le.12.0) .and.
     &                 (abs((GXtmp(3,jq2,j2)-h_channel)
     &                  /min_grid_z)
     &                 .le.12.0) ) then

                        temp_ibm1= 
     &                      abs((GXtmp(2,jq2,j2)-gy(k))
     &                       /(min_grid_y) )
                           call delta_fun(delta_typey,temp_ibm1,fn2)

                        temp_ibm2= 
     &                     abs((GXtmp(1,jq2,j2)-gx(j))
     &                     /(min_grid_x))
                           call delta_fun(delta_typex,temp_ibm2,fn1)

                        temp_ibm3= 
     &                       abs((ksh_tmp-h_channel)
     &                       /(min_grid_z) )
                           call delta_fun(delta_typez,temp_ibm3,fn3)


                         temp3_ibm=
     &                   sqrt((temp_ibm1*min_grid_y)**2
     &                      +(temp_ibm2*min_grid_x)**2
     &                      +(temp_ibm3*min_grid_z)**2)+1.0d-9

                          f_impuls1_fsh(i,jq2,j2)=
     &                               f_impuls1_fsh(i,jq2,j2)+
     &                               fn1*fn2*fn3
     &                               *ds_ibm_fsh(i,jq2,j2)
     &                               *ds2_ibm_fsh(i,jq2,j2)
     &                               *impactpen(1)
     &                        /(min_grid_x*min_grid_y*min_grid_z)
     &                        *(GXtmp(1,jq2,j2)-gx(j))
     &                        /temp3_ibm

                          f_impuls2_fsh(i,jq2,j2)=
     &                               f_impuls2_fsh(i,jq2,j2)+
     &                               fn1*fn2*fn3
     &                               *ds_ibm_fsh(i,jq2,j2)
     &                               *ds2_ibm_fsh(i,jq2,j2)
     &                               *impactpen(1)
     &                        /(min_grid_x*min_grid_y*min_grid_z)
     &                        *(GXtmp(2,jq2,j2)-gy(k))
     &                        /temp3_ibm

                          f_impuls3_fsh(i,jq2,j2)=
     &                               f_impuls3_fsh(i,jq2,j2)+
     &                               fn1*fn2*fn3
     &                               *ds_ibm_fsh(i,jq2,j2)
     &                               *ds2_ibm_fsh(i,jq2,j2)
     &                               *impactpen(1)
     &                        /(min_grid_x*min_grid_y*min_grid_z)
     &                        *(ksh_tmp-h_channel)/temp3_ibm
                        endif
                    
                   end do !k=1,nz 
                 end do !j=1,nx
               enddo  !i2=1,2
             end do    !j2
             end do    !jq2
             endif !channelcontactz
          endif   !for if ((i .le. nr_ibm_f).and.(i .ge. 1)) then
          endif   !ContactForceFlag(i)

!        i2g=ibdyg
!        do jq=1,nq_ibm_r_fsh(i)
!        do j=1,ns_ibm_r_fsh(i)
!           finer_1_ibm_fsh(i,jq,j)= density_coefp(i2g) *
!     &    ( gx_ibmo1_fsh(i,jq,j)-gx_ibm_massiveo_fsh(i,jq,j) )/dt2
!           finer_2_ibm_fsh(i,jq,j)= density_coefp(i2g) *
!     &    ( gy_ibmo1_fsh(i,jq,j)-gy_ibm_massiveo_fsh(i,jq,j) )/dt2
!           if(ndim .gt. 2)  
!     &     finer_3_ibm_fsh(i,jq,j)= density_coefp(i2g) *
!     &    ( gz_ibmo1_fsh(i,jq,j)-gz_ibm_massiveo_fsh(i,jq,j) )/dt2
!         end do
!         end do

!++++++++++++++++++++ FOR  TEST  OF  AIRBAGE INFLATION : START ++++++++++++++++++++++++++++ 

        if (ExternalPressureFlag(ibdyg)) then

        i=ibdy  
        include "distIBM_normalPressure_fn.Fi" 
        temp_ibm1=temp_ibm2*p_inflation
        do jq=1,nq_ibm_r_fsh(i)
        do j=1,ns_ibm_r_fsh(i)
             fibm1_fsh(i,jq,j)=fibm1_fsh(i,jq,j)
     &          -fibm1pres_fsh(jq,j)
     &          *temp_ibm1
             fibm2_fsh(i,jq,j)=fibm2_fsh(i,jq,j)
     &          -fibm2pres_fsh(jq,j)
     &          *temp_ibm1
             fibm3_fsh(i,jq,j)=fibm3_fsh(i,jq,j)
     &          -fibm3pres_fsh(jq,j)
     &          *temp_ibm1
         end do
         end do
        endif
           i=ibdy


       if(FluidForceFlag(i2g)) then
           do jq=1,nq_ibm_r_fsh(i)
           do j=1,ns_ibm_r_fsh(i)
             do j2=1,3
               aamat_fsh((jq-1)*ns_ibm_r_fsh(i)+j,j2,j2)
     &        =aamat_fsh((jq-1)*ns_ibm_r_fsh(i)+j,j2,j2)
     &        -timeMarchcoef(3)
     &        *ImplicitFSI_coef

             enddo
          enddo
          enddo
        endif


! link forces
         i2l=i
         do j=1,target_num(i2g)
             k=target_point_num_fsh(i,1,j)
             jq=target_point_num_fsh(i,2,j)
             k2=jq
             temp_ibm1=  
     &           (X_na_fsh(jq,k,1)-Xtar_na_fsh(j,1))
             temp_ibm2=  
     &           (X_na_fsh(jq,k,2)-Xtar_na_fsh(j,2))
             temp_ibm3=  
     &           (X_na_fsh(jq,k,3)-Xtar_na_fsh(j,3))
             include "distIBM_target_k_rampfn.Fi"               
             if(time_alphaf .le. target_t_link_fsh(i,j)) then
                 ksh_tmp=target_k_link_fsh(i,j)*target_timefn
             else
                 ksh_tmp=0.0
             endif
             force_points_fsh(i,j,1)=k_link*temp_ibm1*ksh_tmp
             force_points_fsh(i,j,2)=k_link*temp_ibm2*ksh_tmp
             if(ndim .gt. 2)  
     &          force_points_fsh(i,j,3)=k_link*temp_ibm3*ksh_tmp

	       fn1=1.d0/(ds_ibm_fsh(i,jq,k)*ds2_ibm_fsh(i,jq,k))
             ddcont=timeMarchcoef(1)*k_link*ksh_tmp*fn1
             j2=(jq-1)*ns_ibm_r_fsh(i)+k
             aamat_fsh(j2,1,1)=aamat_fsh(j2,1,1)    +ddcont
             aamat_fsh(j2,2,2)=aamat_fsh(j2,2,2)    +ddcont
             aamat_fsh(j2,3,3)=aamat_fsh(j2,3,3)    +ddcont

             temp_ibm1=dXtar_na_fsh(j,1)
             temp_ibm2=dXtar_na_fsh(j,2)
             temp_ibm3=dXtar_na_fsh(j,3)

             temp_ibm1=dX_na_fsh(jq,k,1)-temp_ibm1
             temp_ibm2=dX_na_fsh(jq,k,2)-temp_ibm2
             temp_ibm3=dX_na_fsh(jq,k,3)-temp_ibm3

             temp2_ibm= cs_ibm_target(i2g)*k_link*ksh_tmp
             force_points_fsh(i,j,1)=force_points_fsh(i,j,1)+
     &              temp2_ibm*temp_ibm1
             force_points_fsh(i,j,2)=force_points_fsh(i,j,2)+
     &              temp2_ibm*temp_ibm2
             if(ndim .gt. 2)  
     &          force_points_fsh(i,j,3)=force_points_fsh(i,j,3)+
     &              temp2_ibm*temp_ibm3

             ddcont=timeMarchcoef(3)*k_link*ksh_tmp*fn1
             j2=(jq-1)*ns_ibm_r_fsh(i)+k
             aamat_fsh(j2,1,1)=aamat_fsh(j2,1,1)    +ddcont
             aamat_fsh(j2,2,2)=aamat_fsh(j2,2,2)    +ddcont
             aamat_fsh(j2,3,3)=aamat_fsh(j2,3,3)    +ddcont

             f_link1_fsh(i,jq,k)= f_link1_fsh(i,jq,k)+
     &                              fn1*force_points_fsh(i,j,1)
             f_link2_fsh(i,jq,k)= f_link2_fsh(i,jq,k)+
     &                              fn1*force_points_fsh(i,j,2)
             if(ndim .gt. 2)  
     &       f_link3_fsh(i,jq,k)= f_link3_fsh(i,jq,k)+
     &                              fn1*force_points_fsh(i,j,3)
        enddo  !j


       do jq=1,nq_ibm_r_fsh(i)
       do j=1,ns_ibm_r_fsh(i)
          do j2=1,3
            aamat_fsh((jq-1)*ns_ibm_r_fsh(i)+j,j2,j2)
     &          =aamat_fsh((jq-1)*ns_ibm_r_fsh(i)+j,j2,j2)
     &          +(
     &            density_coef(i2g)*timeMarchcoef(2)
     &            +(cs_ibm(i2g)+propDamp(i2g,1)*density_coef(i2g))
     &             *timeMarchcoef(3)
     &           )
             enddo
          enddo
          enddo

      if (Electromechanical(i2g).and.ImplicitElecMech(i2g)) then

      alpha_coefK(1)=propDamp(i2g,2)*timeMarchcoef(3)+timeMarchcoef(1)
      alpha_coefK(2)=timeMarchcoef(1)
      alpha_coefK(3)=timeMarchcoef(1)
      alpha_coefK(4)=timeMarchcoef(3)
      alpha_coefK(5)=timeMarchcoef(2)

       if(Piezo_Dist_Flag(i2g)) then 
        n_dim_aamatPiezo_fsh=4
         n_aamatPiezo_fsh=nq_ibm_r_fsh(i)*ns_ibm_r_fsh(i)
          do jq=1,nq_ibm_r_fsh(i)
          do j=1,ns_ibm_r_fsh(i)
             aamatPiezo_fsh((jq-1)*ns_ibm_r_fsh(i)+j)
     &          =piezo_Coef_fsh(i,jq,j,2)*alpha_coefK(3)
     &          +piezo_Coef_fsh(i,jq,j,0)*alpha_coefK(4)
     &          +piezo_Coef_fsh(i,jq,j,1)*alpha_coefK(5)
          enddo
          enddo
          if(.not. allocated(aacsrfibershell))  then   
             allocate (iacsrfibershell(ns_ibm_fsh*nq_ibm_fsh*4+1))   
             allocate(vecRHSfibershell(ns_ibm_fsh*nq_ibm_fsh*4),
     &           vecXfibershell(ns_ibm_fsh*nq_ibm_fsh*4) )
        
             ntermiMAXfibershell=ns_ibm_fsh*nq_ibm_fsh*4*40
             allocate(aacsrfibershell(ntermiMAXfibershell)
     &          ,jacsrfibershell(ntermiMAXfibershell))
          endif
       else
           n_aamatPiezo_fsh=1
           n_dim_aamatPiezo_fsh=3
           aamatPiezo_fsh(1:1)
     &          =piezo_gamma(i2g)*alpha_coefK(3)
     &          +piezo_damp(i2g) *alpha_coefK(4)
     &          +piezo_beta(i2g) *alpha_coefK(5)
           if(.not. allocated(aacsrfibershell))  then   
             allocate (iacsrfibershell(ns_ibm_fsh*nq_ibm_fsh*3+2))   
             allocate(vecRHSfibershell(ns_ibm_fsh*nq_ibm_fsh*3+1),
     &           vecXfibershell(ns_ibm_fsh*nq_ibm_fsh*3+1) )
        
             ntermiMAXfibershell=(ns_ibm_fsh*nq_ibm_fsh*3+1)*40
             allocate(aacsrfibershell(ntermiMAXfibershell)
     &          ,jacsrfibershell(ntermiMAXfibershell))
           endif
       endif
      jacsrfibershell=0
      aacsrfibershell=0.d0
      iacsrfibershell=0
      
      i=ibdy
      i2g=ibdyg
      FlagForceCalculation=1 
      ksh_tmp=-1000.0  !big number to scale the coef for dirichlet BCs
       if(e4coef(i2g) .ge. 0) then
         Call matfibrous_Yue_GALPHAPiezo(
     &         ns_ibm_fsh*nq_ibm_fsh*3,ntermiMAXfibershell
     &        ,iacsrfibershell,jacsrfibershell,aacsrfibershell
     &        ,nq_ibm_r_fsh(i),ns_ibm_r_fsh(i)
     &        ,BoundaryFibShell_fsh(i,1:2,1:2)
     &        ,Siga(1:nq_ibm_r_fsh(i),1:ns_ibm_r_fsh(i),1,1)   
     &        ,Siga(1:nq_ibm_r_fsh(i),1:ns_ibm_r_fsh(i),1,2) 
     &        ,Siga(1:nq_ibm_r_fsh(i),1:ns_ibm_r_fsh(i),2,1) 
     &        ,Siga(1:nq_ibm_r_fsh(i),1:ns_ibm_r_fsh(i),2,2) 
     &        ,Siga_d(1:nq_ibm_r_fsh(i),1:ns_ibm_r_fsh(i),1:5)            
     &        ,gama(1:nq_ibm_r_fsh(i),1:ns_ibm_r_fsh(i),1,1)   
     &        ,gama(1:nq_ibm_r_fsh(i),1:ns_ibm_r_fsh(i),1,2) 
     &        ,gama(1:nq_ibm_r_fsh(i),1:ns_ibm_r_fsh(i),2,1) 
     &        ,gama(1:nq_ibm_r_fsh(i),1:ns_ibm_r_fsh(i),2,2)
     &        ,gama_d(1:nq_ibm_r_fsh(i),1:ns_ibm_r_fsh(i),1:3)
     &        ,ds_ibm_fsh(i,1:nq_ibm_r_fsh(i),1:ns_ibm_r_fsh(i))   
     &        ,dsf_ibm_fsh(i,1:nq_ibm_r_fsh(i),1:ns_ibm_r_fsh(i)) 
     &        ,dk_ibm_fsh(i,1:nq_ibm_r_fsh(i),1:ns_ibm_r_fsh(i)) 
     &        ,dkf_ibm_fsh(i,1:nq_ibm_r_fsh(i),1:ns_ibm_r_fsh(i))    
     &        ,ds2_ibm_fsh(i,1:nq_ibm_r_fsh(i),1:ns_ibm_r_fsh(i))   
     &        ,dsf2_ibm_fsh(i,1:nq_ibm_r_fsh(i),1:ns_ibm_r_fsh(i)) 
     &        ,dk2_ibm_fsh(i,1:nq_ibm_r_fsh(i),1:ns_ibm_r_fsh(i)) 
     &        ,dkf2_ibm_fsh(i,1:nq_ibm_r_fsh(i),1:ns_ibm_r_fsh(i))  
     &        ,SigB(1:4,1:nq_ibm_r_fsh(i)+ns_ibm_r_fsh(i),1:3) 
     &        ,SigB_d(1:4,1:nq_ibm_r_fsh(i)+ns_ibm_r_fsh(i),1:3) 
     &        ,e4coef(i2g) 
     &        ,1
     &        ,GXtmp(1:3,1-Nq_IBMB_fsh:nq_ibm_r_fsh(i)+Nq_IBMB_fsh
     &                  ,1-Ns_IBMB_fsh:ns_ibm_r_fsh(i)+Ns_IBMB_fsh)
     &        ,dGXtmp(1:3,1-Nq_IBMB_fsh:nq_ibm_r_fsh(i)+Nq_IBMB_fsh
     &                  ,1-Ns_IBMB_fsh:ns_ibm_r_fsh(i)+Ns_IBMB_fsh)  
     &        ,Nq_IBMB_fsh,Ns_IBMB_fsh
     &        ,aamat_fsh(1:nq_ibm_r_fsh(i)*ns_ibm_r_fsh(i),1:3,1:3)  
     &        ,ForceOut(1:nq_ibm_r_fsh(i)*ns_ibm_r_fsh(i)*3)
     &        ,MaterialTypeIBM(i2g)
     &        ,propDamp(i2g,2)*timeMarchcoef(3)+timeMarchcoef(1)
     &        ,alpha_coefK(1:5)
     &        ,ksh_tmp 
     &        ,Piezo_Formulation_Flag(i2g)
     &        ,piezo_Coef_fsh(i,1:nq_ibm_r_fsh(i),1:ns_ibm_r_fsh(i),3)
     &        ,XvPiezo_na_fsh(1:nq_ibm_r_fsh(i),1:ns_ibm_r_fsh(i),1)
     &        ,dX_na_fsh(1:nq_ibm_r_fsh(i),1:ns_ibm_r_fsh(i),1:3)
     &        ,ddX_na_fsh(1:nq_ibm_r_fsh(i),1:ns_ibm_r_fsh(i),1:3)
     &        ,aamatPiezo_fsh(1:n_aamatPiezo_fsh),n_aamatPiezo_fsh
     &        ,VECpiezo_tmp
     &             (1:3,26:29,1:nq_ibm_r_fsh(i),1:ns_ibm_r_fsh(i))
     &        ,ImplicitElecMech(i2g)
     &        ,FlagForceCalculation(1:nq_ibm_r_fsh(i) 
     &                             ,1:ns_ibm_r_fsh(i)) )   
!      timetemp2=1.0 !(1.d0-exp(-time2/0.05))
       else
         Call matfibrous_Huang_GALPHAPiezo(
     &         ns_ibm_fsh*nq_ibm_fsh*3,ntermiMAXfibershell
     &        ,iacsrfibershell,jacsrfibershell,aacsrfibershell
     &        ,nq_ibm_r_fsh(i),ns_ibm_r_fsh(i)
     &        ,BoundaryFibShell_fsh(i,1:2,1:2)
     &        ,Siga(1:nq_ibm_r_fsh(i),1:ns_ibm_r_fsh(i),1,1)   
     &        ,Siga(1:nq_ibm_r_fsh(i),1:ns_ibm_r_fsh(i),1,2) 
     &        ,Siga(1:nq_ibm_r_fsh(i),1:ns_ibm_r_fsh(i),2,1) 
     &        ,Siga(1:nq_ibm_r_fsh(i),1:ns_ibm_r_fsh(i),2,2) 
     &        ,Siga_d(1:nq_ibm_r_fsh(i),1:ns_ibm_r_fsh(i),1:5)            
     &        ,gama(1:nq_ibm_r_fsh(i),1:ns_ibm_r_fsh(i),1,1)   
     &        ,gama(1:nq_ibm_r_fsh(i),1:ns_ibm_r_fsh(i),1,2) 
     &        ,gama(1:nq_ibm_r_fsh(i),1:ns_ibm_r_fsh(i),2,1) 
     &        ,gama(1:nq_ibm_r_fsh(i),1:ns_ibm_r_fsh(i),2,2)
     &        ,gama_d(1:nq_ibm_r_fsh(i),1:ns_ibm_r_fsh(i),1:3)
     &        ,ds_ibm_fsh(i,1:nq_ibm_r_fsh(i),1:ns_ibm_r_fsh(i))   
     &        ,dsf_ibm_fsh(i,1:nq_ibm_r_fsh(i),1:ns_ibm_r_fsh(i)) 
     &        ,dk_ibm_fsh(i,1:nq_ibm_r_fsh(i),1:ns_ibm_r_fsh(i)) 
     &        ,dkf_ibm_fsh(i,1:nq_ibm_r_fsh(i),1:ns_ibm_r_fsh(i))    
     &        ,ds2_ibm_fsh(i,1:nq_ibm_r_fsh(i),1:ns_ibm_r_fsh(i))   
     &        ,dsf2_ibm_fsh(i,1:nq_ibm_r_fsh(i),1:ns_ibm_r_fsh(i)) 
     &        ,dk2_ibm_fsh(i,1:nq_ibm_r_fsh(i),1:ns_ibm_r_fsh(i)) 
     &        ,dkf2_ibm_fsh(i,1:nq_ibm_r_fsh(i),1:ns_ibm_r_fsh(i))    
     &        ,1
     &        ,GXtmp(1:3,1-Nq_IBMB_fsh:nq_ibm_r_fsh(i)+Nq_IBMB_fsh
     &                  ,1-Ns_IBMB_fsh:ns_ibm_r_fsh(i)+Ns_IBMB_fsh)
     &        ,dGXtmp(1:3,1-Nq_IBMB_fsh:nq_ibm_r_fsh(i)+Nq_IBMB_fsh
     &                  ,1-Ns_IBMB_fsh:ns_ibm_r_fsh(i)+Ns_IBMB_fsh)  
     &        ,Nq_IBMB_fsh,Ns_IBMB_fsh
     &        ,aamat_fsh(1:nq_ibm_r_fsh(i)*ns_ibm_r_fsh(i),1:3,1:3)  
     &        ,ForceOut(1:nq_ibm_r_fsh(i)*ns_ibm_r_fsh(i)*3)
     &        ,MaterialTypeIBM(i2g)
     &        ,alpha_coefK(1:5)
     &        ,ksh_tmp 
     &        ,Piezo_Formulation_Flag(i2g)
     &        ,piezo_Coef_fsh(i,1:nq_ibm_r_fsh(i),1:ns_ibm_r_fsh(i),3)
     &        ,XvPiezo_na_fsh(1:nq_ibm_r_fsh(i),1:ns_ibm_r_fsh(i),1)
     &        ,dX_na_fsh(1:nq_ibm_r_fsh(i),1:ns_ibm_r_fsh(i),1:3)
     &        ,ddX_na_fsh(1:nq_ibm_r_fsh(i),1:ns_ibm_r_fsh(i),1:3)
     &        ,aamatPiezo_fsh(1:n_aamatPiezo_fsh),n_aamatPiezo_fsh
     &        ,VECpiezo_tmp
     &             (1:3,26:29,1:nq_ibm_r_fsh(i),1:ns_ibm_r_fsh(i))
     &        ,ImplicitElecMech(i2g)
     &        )
       endif



!to add implicit matrix call-solution
!to add implicicit ,mentum force cal
!to include piezo equation here
! to redo for Nov 


!Setup Solver
       k=nq_ibm_r_fsh(i)*ns_ibm_r_fsh(i)  !tmporal total number of points
       temp_ibm1=(density_coef(i2g)*
     &        (timeMarchcoef(2)+propDamp(i2g,1)*timeMarchcoef(3))
     &        +cs_ibm(i2g)*timeMarchcoef(3))

       do jq=1,nq_ibm_r_fsh(i) 
       do j=1,ns_ibm_r_fsh(i) 
            j2=((jq-1)*ns_ibm_r_fsh(i)+(j-1))*n_dim_aamatPiezo_fsh
            if(((j .le. 2                     ).and.
     &          (BoundaryFibShell_fsh(i,1,1) .eq. 0)      ).or.
     &         ((j .ge. ns_ibm_r_fsh(i)-1         ).and.
     &          (BoundaryFibShell_fsh(i,1,2) .eq. 0)      ).or.
     &         ((jq  .le. 2                     ).and.
     &          (BoundaryFibShell_fsh(i,2,1) .eq. 0)      ).or.
     &         ((jq  .ge. nq_ibm_r_fsh(i)-1         ).and.
     &          (BoundaryFibShell_fsh(i,2,2) .eq. 0)      )
     &      )then
               fibm1_fsh(i,jq,j)=ksh_tmp*coef_iter
     &             *(X0_np1_fsh(jq,j,1)-gx_bp_fsh(i,jq,j))
               fibm2_fsh(i,jq,j)=ksh_tmp*coef_iter
     &             *(X0_np1_fsh(jq,j,2)-gy_bp_fsh(i,jq,j))
               fibm3_fsh(i,jq,j)=ksh_tmp*coef_iter
     &             *(X0_np1_fsh(jq,j,3)-gz_bp_fsh(i,jq,j))

            elseif(((j .le. 1                     ).and.
     &          (BoundaryFibShell_fsh(i,1,1) .eq. 2)      ).or.
     &         ((j .ge. ns_ibm_r_fsh(i)         ).and.
     &          (BoundaryFibShell_fsh(i,1,2) .eq. 2)      ).or.

     &         ((jq  .le. 1                     ).and.
     &          (BoundaryFibShell_fsh(i,2,1) .eq. 2)      ).or.
     &         ((jq  .ge. nq_ibm_r_fsh(i)         ).and.
     &          (BoundaryFibShell_fsh(i,2,2) .eq. 2)      )
     &      )then
               fibm1_fsh(i,jq,j)=ksh_tmp*coef_iter
     &             *(X0_np1_fsh(jq,j,1)-gx_bp_fsh(i,jq,j))
               fibm2_fsh(i,jq,j)=ksh_tmp*coef_iter
     &             *(X0_np1_fsh(jq,j,2)-gy_bp_fsh(i,jq,j))
               fibm3_fsh(i,jq,j)=ksh_tmp*coef_iter
     &             *(X0_np1_fsh(jq,j,3)-gz_bp_fsh(i,jq,j))

            elseif(FlagForceCalculation(jq,j) .eq. 0) then
                    fibm1_fsh(i,jq,j)=0.0
                    fibm2_fsh(i,jq,j)=0.0
                    fibm3_fsh(i,jq,j)=0.0
             else

                fibm1_fsh(i,jq,j)=fibm1_fsh(i,jq,j)
     &                           +f_link1_fsh(i,jq,j)
                fibm2_fsh(i,jq,j)=fibm2_fsh(i,jq,j)
     &                           +f_link2_fsh(i,jq,j)
                fibm3_fsh(i,jq,j)=fibm3_fsh(i,jq,j)
     &                           +f_link3_fsh(i,jq,j)

                f_link1_fsh(i,jq,j)=temp_ibm1*X_np1_fsh(jq,j,1)
     &                       -density_coef(i2g)*ddX_in_fsh(jq,j,1)
     &                       -(cs_ibm(i2g)+
     &                         +propDamp(i2g,1)*density_coef(i2g)
     &                         )*dX_in_fsh(jq,j,1)
     &                       +ForceOut((jq-1)*ns_ibm_r_fsh(i)+j)

                f_link2_fsh(i,jq,j)=temp_ibm1*X_np1_fsh(jq,j,2)
     &                       -density_coef(i2g)*ddX_in_fsh(jq,j,2)
     &                       -(cs_ibm(i2g)+
     &                         +propDamp(i2g,1)*density_coef(i2g)
     &                         )*dX_in_fsh(jq,j,2)
     &                       +ForceOut(k+(jq-1)*ns_ibm_r_fsh(i)+j)

                f_link3_fsh(i,jq,j)=temp_ibm1*X_np1_fsh(jq,j,3)
     &                       -density_coef(i2g)*ddX_in_fsh(jq,j,3)
     &                       -(cs_ibm(i2g)+
     &                         +propDamp(i2g,1)*density_coef(i2g)
     &                         )*dX_in_fsh(jq,j,3)
     &                       +ForceOut(2*k+(jq-1)*ns_ibm_r_fsh(i)+j)

                fibm1_fsh(i,jq,j)=
     &                       -f_link1_fsh(i,jq,j)
     &                       -fibm1_fsh(i,jq,j)
     &                       +density_coef(i2g)
     &                        *fr*cos(the_grav)*sin(phi_grav)*timetemp2
     &                       +f_impuls1_fsh(i,jq,j)

                fibm2_fsh(i,jq,j)=
     &                       -f_link2_fsh(i,jq,j)
     &                       -fibm2_fsh(i,jq,j)
     &                       +density_coef(i2g)
     &                        *fr*sin(the_grav)*sin(phi_grav)*timetemp2
     &                       +f_impuls2_fsh(i,jq,j)

                fibm3_fsh(i,jq,j)=
     &                       -f_link3_fsh(i,jq,j)
     &                       -fibm3_fsh(i,jq,j)
     &                       +density_coef(i2g)
     &                        *fr*cos(phi_grav)*timetemp2
     &                       +f_impuls3_fsh(i,jq,j)
               endif
              vecRHSfibershell(j2+1)=fibm1_fsh(i,jq,j)
     &                              +Fpiezo1_fsh(i,jq,j)
              vecRHSfibershell(j2+2)=fibm2_fsh(i,jq,j)
     &                              +Fpiezo2_fsh(i,jq,j)
              vecRHSfibershell(j2+3)=fibm3_fsh(i,jq,j)
     &                              +Fpiezo3_fsh(i,jq,j)

              vecXfibershell(j2+1) = 0.0
              vecXfibershell(j2+2) = 0.0
              vecXfibershell(j2+3) = 0.0

              if(Piezo_Dist_Flag(i2g)) then 
              itmpusrfn(1)=1  !implicit piezo
              itmpusrfn(2)=1  !Piezo_Dist
              include "distIBM_piezo_RHS_fn.Fi" 
              include "distIBM_piezo_RHS_fn.Fi"   
              vecRHSfibershell(j2+4)=
     &                              aamatPiezo_fsh(j2)
     &                              *piezo_Coef_fsh(i,jq,j,3)
     &                              *piezo_Coef_fsh(i,jq,j,-1)
     &                             +XvPiezo_na_fsh(jq,j,1)
     &                              *piezo_Coef_fsh(i,jq,j,2)
     &                             +XvPiezo_na_fsh(jq,j,2)
     &                              *piezo_Coef_fsh(i,jq,j,0)
     &                             +XvPiezo_na_fsh(jq,j,3)
     &                              *piezo_Coef_fsh(i,jq,j,1)
     &                             - Elect_RHS
              vecXfibershell(j2+4) = 0.0
              end if

       end do
       end do
       j2=ns_ibm_r_fsh(i)*ns_ibm_r_fsh(i)*4
       if(.not. Piezo_Dist_Flag(i2g)) then 
            itmpusrfn(1)=1  !implicit piezo
            itmpusrfn(2)=0  !Piezo_Dist
            include "distIBM_piezo_RHS_fn.Fi"  
            j2=ns_ibm_r_fsh(i)*ns_ibm_r_fsh(i)*3+1
            vecRHSfibershell(j2)=
     &                              aamatPiezo_fsh(1)
     &                              *piezo_Coef_fsh(i,jq,j,3)
     &                              *piezo_Coef_fsh(i,jq,j,-1)
     &                             +XvPiezo_na_fsh(jq,j,1)
     &                              *piezo_gamma(i2g)
     &                             +XvPiezo_na_fsh(jq,j,2)
     &                              *piezo_damp(i2g)
     &                             +XvPiezo_na_fsh(jq,j,3)
     &                              *piezo_beta(i2g)
     &                             - Elect_RHS
              vecXfibershell(j2) = 0.0
       end if

      if(SolverILU .eq. 1) then
      if(iter .eq. 1) then
       ilucal_flag=.true.
      else
       ilucal_flag=.false.
      endif
      else
       ilucal_flag=.true.
      endif


       call pmgmres_ilu2_cr(j2
     & ,ntermiMAXfibershell
     & ,iacsrfibershell(1: j2+1)
     & , jacsrfibershell(1: ntermiMAXfibershell)
     & , aacsrfibershell(1: ntermiMAXfibershell)
     & , vecXfibershell(1:j2)
     & , vecRHSfibershell(1:j2)
     & , SolverOutiter,SolverIniter
     & , Solverabstol,Solverreltol,SolverPre,ilucal_flag,monitorON)

       do jq=1,nq_ibm_r_fsh(i) 
       do j=1,ns_ibm_r_fsh(i) 
            j2=((jq-1)*ns_ibm_r_fsh(i)+(j-1))*n_dim_aamatPiezo_fsh
            X_np1_fsh(jq,j,1:3) =X_np1_fsh(jq,j,1:3)
     &     +vecXfibershell(j2+1:j2+3)
       end do
       end do
       if(Piezo_Dist_Flag(i2g)) then 
       do jq=1,nq_ibm_r_fsh(i) 
       do j=1,ns_ibm_r_fsh(i) 
            j2=((jq-1)*ns_ibm_r_fsh(i)+(j-1))*n_dim_aamatPiezo_fsh
            XvPiezo_np1_fsh(jq,j,1) =XvPiezo_np1_fsh(jq,j,1)
     &     +vecXfibershell(j2+4)
       end do
       end do

      dxcont(1:3)=0.0
      outcont(1:3)=0.0
      dxcont_piezo=0.0
      outcont_piezo=0.0
       do jq=1,nq_ibm_r_fsh(i) 
       do j=1,ns_ibm_r_fsh(i) 
           j2=((jq-1)*ns_ibm_r_fsh(i)+(j-1))*3
           dxcont(1:3)=dxcont(1:3)+vecXfibershell(j2+1:j2+3)**2
           dxcont_piezo=dxcont_piezo+vecXfibershell(j2+4)**2
           outcont(1:3)=outcont(1:3)
     &                 +(X_np1_fsh(jq,j,1:3)-X_n_fsh(jq,j,1:3))**2
           outcont_piezo=outcont_piezo
     &              +(XvPiezo_np1_fsh(jq,j,1)-XvPiezo_n_fsh(jq,j,1))**2
       enddo
       enddo
       dxcont(1)=sqrt(dxcont(1)+dxcont(2)+dxcont(3)+dxcont_piezo)
       outcont(1)=sqrt(outcont(1)+outcont(2)+outcont(3)+outcont_piezo)
       if(monitorON)
     & print*, 'Error= ',j,dxcont(1),outcont(1),dxcont(1)/outcont(1)


       else
       j2=nq_ibm_r_fsh(i)*ns_ibm_r_fsh(i)*3+1
       do jq=1,nq_ibm_r_fsh(i) 
       do j=1,ns_ibm_r_fsh(i) 
            XvPiezo_np1_fsh(jq,j,1) =XvPiezo_np1_fsh(jq,j,1)
     &     +vecXfibershell(j2)
       enddo
       enddo

      dxcont(1:3)=0.0
      outcont(1:3)=0.0
      dxcont_piezo=0.0
      outcont_piezo=0.0
       do jq=1,nq_ibm_r_fsh(i) 
       do j=1,ns_ibm_r_fsh(i) 
           j2=((jq-1)*ns_ibm_r_fsh(i)+(j-1))*3
           dxcont(1:3)=dxcont(1:3)+vecXfibershell(j2+1:j2+3)**2
           
           outcont(1:3)=outcont(1:3)
     &                 +(X_np1_fsh(jq,j,1:3)-X_n_fsh(jq,j,1:3))**2
       enddo
       enddo
       jq=1
       j=1
       j2=ns_ibm_r_fsh(i)*ns_ibm_r_fsh(i)*3+1
       dxcont_piezo=dxcont_piezo+vecXfibershell(j2)**2
       outcont_piezo =outcont_piezo
     &            +(XvPiezo_np1_fsh(jq,j,1)-XvPiezo_n_fsh(jq,j,1))**2
       dxcont(1)=0.5*(sqrt(dxcont(1)+dxcont(2)+dxcont(3))
     &           /(ns_ibm_r_fsh(i)*nq_ibm_r_fsh(i))
     &          +sqrt(dxcont_piezo))
       outcont(1)=0.5*(sqrt(outcont(1)+outcont(2)+outcont(3))
     &           /(ns_ibm_r_fsh(i)*nq_ibm_r_fsh(i))
     &          +sqrt(outcont_piezo))
       endif
       if(monitorON)
     & print*, 'Error= ',j,dxcont(1),outcont(1),dxcont(1)/outcont(1)

      else  !(Electromechanical(i2g).and.ImplicitElecMech(i2g)) 

      if(.not. allocated(aacsrfibershell))  then   
        allocate (iacsrfibershell(ns_ibm_fsh*nq_ibm_fsh*3+1))   
        allocate(vecRHSfibershell(ns_ibm_fsh*nq_ibm_fsh*3),
     &           vecXfibershell(ns_ibm_fsh*nq_ibm_fsh*3) )
        
        ntermiMAXfibershell=ns_ibm_fsh*nq_ibm_fsh*3*35
        allocate(aacsrfibershell(ntermiMAXfibershell)
     &          ,jacsrfibershell(ntermiMAXfibershell))
      endif
      jacsrfibershell=0
      aacsrfibershell=0.d0
      iacsrfibershell=0
      
      i=ibdy
      i2g=ibdyg
      FlagForceCalculation=1
      ksh_tmp=-1000.0  !big number to scale the coef for dirichlet BCs
       if(e4coef(i2g) .ge. 0) then
         Call  matfibrous_Yue_GALPHA(
     &         ns_ibm_fsh*nq_ibm_fsh*3,ntermiMAXfibershell
     &        ,iacsrfibershell,jacsrfibershell,aacsrfibershell
     &        ,nq_ibm_r_fsh(i),ns_ibm_r_fsh(i)
     &        ,BoundaryFibShell_fsh(i,1:2,1:2)
     &        ,Siga(1:nq_ibm_r_fsh(i),1:ns_ibm_r_fsh(i),1,1)   
     &        ,Siga(1:nq_ibm_r_fsh(i),1:ns_ibm_r_fsh(i),1,2) 
     &        ,Siga(1:nq_ibm_r_fsh(i),1:ns_ibm_r_fsh(i),2,1) 
     &        ,Siga(1:nq_ibm_r_fsh(i),1:ns_ibm_r_fsh(i),2,2) 
     &        ,Siga_d(1:nq_ibm_r_fsh(i),1:ns_ibm_r_fsh(i),1:5)            
     &        ,gama(1:nq_ibm_r_fsh(i),1:ns_ibm_r_fsh(i),1,1)   
     &        ,gama(1:nq_ibm_r_fsh(i),1:ns_ibm_r_fsh(i),1,2) 
     &        ,gama(1:nq_ibm_r_fsh(i),1:ns_ibm_r_fsh(i),2,1) 
     &        ,gama(1:nq_ibm_r_fsh(i),1:ns_ibm_r_fsh(i),2,2)
     &        ,gama_d(1:nq_ibm_r_fsh(i),1:ns_ibm_r_fsh(i),1:3)
     &        ,ds_ibm_fsh(i,1:nq_ibm_r_fsh(i),1:ns_ibm_r_fsh(i))   
     &        ,dsf_ibm_fsh(i,1:nq_ibm_r_fsh(i),1:ns_ibm_r_fsh(i)) 
     &        ,dk_ibm_fsh(i,1:nq_ibm_r_fsh(i),1:ns_ibm_r_fsh(i)) 
     &        ,dkf_ibm_fsh(i,1:nq_ibm_r_fsh(i),1:ns_ibm_r_fsh(i))    
     &        ,ds2_ibm_fsh(i,1:nq_ibm_r_fsh(i),1:ns_ibm_r_fsh(i))   
     &        ,dsf2_ibm_fsh(i,1:nq_ibm_r_fsh(i),1:ns_ibm_r_fsh(i)) 
     &        ,dk2_ibm_fsh(i,1:nq_ibm_r_fsh(i),1:ns_ibm_r_fsh(i)) 
     &        ,dkf2_ibm_fsh(i,1:nq_ibm_r_fsh(i),1:ns_ibm_r_fsh(i))  
     &        ,SigB(1:4,1:nq_ibm_r_fsh(i)+ns_ibm_r_fsh(i),1:3) 
     &        ,SigB_d(1:4,1:nq_ibm_r_fsh(i)+ns_ibm_r_fsh(i),1:3) 
     &        ,e4coef(i2g) 
     &        ,1
     &        ,GXtmp(1:3,1-Nq_IBMB_fsh:nq_ibm_r_fsh(i)+Nq_IBMB_fsh
     &                  ,1-Ns_IBMB_fsh:ns_ibm_r_fsh(i)+Ns_IBMB_fsh)
     &        ,dGXtmp(1:3,1-Nq_IBMB_fsh:nq_ibm_r_fsh(i)+Nq_IBMB_fsh
     &                  ,1-Ns_IBMB_fsh:ns_ibm_r_fsh(i)+Ns_IBMB_fsh)  
     &        ,Nq_IBMB_fsh,Ns_IBMB_fsh
     &        ,aamat_fsh(1:nq_ibm_r_fsh(i)*ns_ibm_r_fsh(i),1:3,1:3)  
     &        ,ForceOut(1:nq_ibm_r_fsh(i)*ns_ibm_r_fsh(i)*3)
     &        ,MaterialTypeIBM(i2g)
     &        ,propDamp(i2g,2)*timeMarchcoef(3)+timeMarchcoef(1)
     &        ,ksh_tmp
     &        ,FlagForceCalculation(1:nq_ibm_r_fsh(i) 
     &                             ,1:ns_ibm_r_fsh(i)) )   
!      timetemp2=1.0 !(1.d0-exp(-time2/0.05))
       else

         Call matfibrous_Huang_GALPHA(
     &         ns_ibm_fsh*nq_ibm_fsh*3,ntermiMAXfibershell
     &        ,iacsrfibershell,jacsrfibershell,aacsrfibershell
     &        ,nq_ibm_r_fsh(i),ns_ibm_r_fsh(i)
     &        ,BoundaryFibShell_fsh(i,1:2,1:2)
     &        ,Siga(1:nq_ibm_r_fsh(i),1:ns_ibm_r_fsh(i),1,1)   
     &        ,Siga(1:nq_ibm_r_fsh(i),1:ns_ibm_r_fsh(i),1,2) 
     &        ,Siga(1:nq_ibm_r_fsh(i),1:ns_ibm_r_fsh(i),2,1) 
     &        ,Siga(1:nq_ibm_r_fsh(i),1:ns_ibm_r_fsh(i),2,2) 
     &        ,Siga_d(1:nq_ibm_r_fsh(i),1:ns_ibm_r_fsh(i),1:5)            
     &        ,gama(1:nq_ibm_r_fsh(i),1:ns_ibm_r_fsh(i),1,1)   
     &        ,gama(1:nq_ibm_r_fsh(i),1:ns_ibm_r_fsh(i),1,2) 
     &        ,gama(1:nq_ibm_r_fsh(i),1:ns_ibm_r_fsh(i),2,1) 
     &        ,gama(1:nq_ibm_r_fsh(i),1:ns_ibm_r_fsh(i),2,2)
     &        ,gama_d(1:nq_ibm_r_fsh(i),1:ns_ibm_r_fsh(i),1:3)
     &        ,ds_ibm_fsh(i,1:nq_ibm_r_fsh(i),1:ns_ibm_r_fsh(i))   
     &        ,dsf_ibm_fsh(i,1:nq_ibm_r_fsh(i),1:ns_ibm_r_fsh(i)) 
     &        ,dk_ibm_fsh(i,1:nq_ibm_r_fsh(i),1:ns_ibm_r_fsh(i)) 
     &        ,dkf_ibm_fsh(i,1:nq_ibm_r_fsh(i),1:ns_ibm_r_fsh(i))     
     &        ,ds2_ibm_fsh(i,1:nq_ibm_r_fsh(i),1:ns_ibm_r_fsh(i))   
     &        ,dsf2_ibm_fsh(i,1:nq_ibm_r_fsh(i),1:ns_ibm_r_fsh(i)) 
     &        ,dk2_ibm_fsh(i,1:nq_ibm_r_fsh(i),1:ns_ibm_r_fsh(i)) 
     &        ,dkf2_ibm_fsh(i,1:nq_ibm_r_fsh(i),1:ns_ibm_r_fsh(i))    
     &        ,1
     &        ,GXtmp(1:3,1-Nq_IBMB_fsh:nq_ibm_r_fsh(i)+Nq_IBMB_fsh
     &                  ,1-Ns_IBMB_fsh:ns_ibm_r_fsh(i)+Ns_IBMB_fsh)
     &        ,dGXtmp(1:3,1-Nq_IBMB_fsh:nq_ibm_r_fsh(i)+Nq_IBMB_fsh
     &                  ,1-Ns_IBMB_fsh:ns_ibm_r_fsh(i)+Ns_IBMB_fsh)
     &        ,Nq_IBMB_fsh,Ns_IBMB_fsh
     &        ,aamat_fsh(1:nq_ibm_r_fsh(i)*ns_ibm_r_fsh(i),1:3,1:3)  
     &        ,ForceOut(1:nq_ibm_r_fsh(i)*ns_ibm_r_fsh(i)*3)
     &        ,MaterialTypeIBM(i2g)
     &        ,propDamp(i2g,2)*timeMarchcoef(3)+timeMarchcoef(1)
     &        ,ksh_tmp)
       endif
       


!Setup Solver
       k=nq_ibm_r_fsh(i)*ns_ibm_r_fsh(i)  !tmporal total number of points
       temp_ibm1=(density_coef(i2g)*
     &        (timeMarchcoef(2)+propDamp(i2g,1)*timeMarchcoef(3))
     &        +cs_ibm(i2g)*timeMarchcoef(3))

       do jq=1,nq_ibm_r_fsh(i) 
       do j=1,ns_ibm_r_fsh(i) 
            j2=((jq-1)*ns_ibm_r_fsh(i)+(j-1))*3
            if(((j .le. 2                     ).and.
     &          (BoundaryFibShell_fsh(i,1,1) .eq. 0)      ).or.
     &         ((j .ge. ns_ibm_r_fsh(i)-1         ).and.
     &          (BoundaryFibShell_fsh(i,1,2) .eq. 0)      ).or.
     &         ((jq  .le. 2                     ).and.
     &          (BoundaryFibShell_fsh(i,2,1) .eq. 0)      ).or.
     &         ((jq  .ge. nq_ibm_r_fsh(i)-1         ).and.
     &          (BoundaryFibShell_fsh(i,2,2) .eq. 0)      )
     &      )then
               fibm1_fsh(i,jq,j)=ksh_tmp*coef_iter
     &             *(X0_np1_fsh(jq,j,1)-gx_bp_fsh(i,jq,j))
               fibm2_fsh(i,jq,j)=ksh_tmp*coef_iter
     &             *(X0_np1_fsh(jq,j,2)-gy_bp_fsh(i,jq,j))
               fibm3_fsh(i,jq,j)=ksh_tmp*coef_iter
     &             *(X0_np1_fsh(jq,j,3)-gz_bp_fsh(i,jq,j))
            elseif(((j .le. 1                     ).and.
     &          (BoundaryFibShell_fsh(i,1,1) .eq. 2)      ).or.
     &         ((j .ge. ns_ibm_r_fsh(i)         ).and.
     &          (BoundaryFibShell_fsh(i,1,2) .eq. 2)      ).or.
     &         ((jq  .le. 1                     ).and.
     &          (BoundaryFibShell_fsh(i,2,1) .eq. 2)      ).or.
     &         ((jq  .ge. nq_ibm_r_fsh(i)         ).and.
     &          (BoundaryFibShell_fsh(i,2,2) .eq. 2)      )
     &      )then
               fibm1_fsh(i,jq,j)=ksh_tmp*coef_iter
     &             *(X0_np1_fsh(jq,j,1)-gx_bp_fsh(i,jq,j))
               fibm2_fsh(i,jq,j)=ksh_tmp*coef_iter
     &             *(X0_np1_fsh(jq,j,2)-gy_bp_fsh(i,jq,j))
               fibm3_fsh(i,jq,j)=ksh_tmp*coef_iter
     &             *(X0_np1_fsh(jq,j,3)-gz_bp_fsh(i,jq,j))
            elseif(FlagForceCalculation(jq,j) .eq. 0) then
               fibm1_fsh(i,jq,j)=-ForceOut((jq-1)*ns_ibm_r_fsh(i)+j)
               fibm2_fsh(i,jq,j)=-ForceOut(k+(jq-1)*ns_ibm_r_fsh(i)+j)
               fibm3_fsh(i,jq,j)=-ForceOut(2*k+(jq-1)*ns_ibm_r_fsh(i)+j)
             else

                fibm1_fsh(i,jq,j)=fibm1_fsh(i,jq,j)
     &                           +f_link1_fsh(i,jq,j)
                fibm2_fsh(i,jq,j)=fibm2_fsh(i,jq,j)
     &                           +f_link2_fsh(i,jq,j)
                fibm3_fsh(i,jq,j)=fibm3_fsh(i,jq,j)
     &                           +f_link3_fsh(i,jq,j)

                f_link1_fsh(i,jq,j)=temp_ibm1*X_np1_fsh(jq,j,1)
     &                       -density_coef(i2g)*ddX_in_fsh(jq,j,1)
     &                       -(cs_ibm(i2g)+
     &                         +propDamp(i2g,1)*density_coef(i2g)
     &                         )*dX_in_fsh(jq,j,1)
     &                       +ForceOut((jq-1)*ns_ibm_r_fsh(i)+j)

                f_link2_fsh(i,jq,j)=temp_ibm1*X_np1_fsh(jq,j,2)
     &                       -density_coef(i2g)*ddX_in_fsh(jq,j,2)
     &                       -(cs_ibm(i2g)+
     &                         +propDamp(i2g,1)*density_coef(i2g)
     &                         )*dX_in_fsh(jq,j,2)
     &                       +ForceOut(k+(jq-1)*ns_ibm_r_fsh(i)+j)

                f_link3_fsh(i,jq,j)=temp_ibm1*X_np1_fsh(jq,j,3)
     &                       -density_coef(i2g)*ddX_in_fsh(jq,j,3)
     &                       -(cs_ibm(i2g)+
     &                         +propDamp(i2g,1)*density_coef(i2g)
     &                         )*dX_in_fsh(jq,j,3)
     &                       +ForceOut(2*k+(jq-1)*ns_ibm_r_fsh(i)+j)

                fibm1_fsh(i,jq,j)=
     &                       -f_link1_fsh(i,jq,j)
     &                       -fibm1_fsh(i,jq,j)
     &                       +density_coef(i2g)
     &                        *fr*cos(the_grav)*sin(phi_grav)*timetemp2
     &                       +f_impuls1_fsh(i,jq,j)

                fibm2_fsh(i,jq,j)=
     &                       -f_link2_fsh(i,jq,j)
     &                       -fibm2_fsh(i,jq,j)
     &                       +density_coef(i2g)
     &                        *fr*sin(the_grav)*sin(phi_grav)*timetemp2
     &                       +f_impuls2_fsh(i,jq,j)

                fibm3_fsh(i,jq,j)=
     &                       -f_link3_fsh(i,jq,j)
     &                       -fibm3_fsh(i,jq,j)
     &                       +density_coef(i2g)
     &                        *fr*cos(phi_grav)*timetemp2
     &                       +f_impuls3_fsh(i,jq,j)
               endif
              vecRHSfibershell(j2+1)=fibm1_fsh(i,jq,j)
              vecRHSfibershell(j2+2)=fibm2_fsh(i,jq,j)
              vecRHSfibershell(j2+3)=fibm3_fsh(i,jq,j)
              vecXfibershell(j2+1) = 0.0
              vecXfibershell(j2+2) = 0.0
              vecXfibershell(j2+3) = 0.0
       end do
       end do
       if (Electromechanical(i2g)) then
         do jq=1,nq_ibm_r_fsh(i) 
         do j=1,ns_ibm_r_fsh(i) 
            j2=((jq-1)*ns_ibm_r_fsh(i)+(j-1))*3
            if(.not.
     &       ((((j .le. 2                     ).and.
     &          (BoundaryFibShell_fsh(i,1,1) .eq. 0)      ).or.
     &         ((j .ge. ns_ibm_r_fsh(i)-1         ).and.
     &          (BoundaryFibShell_fsh(i,1,2) .eq. 0)      ).or.
     &         ((jq  .le. 2                     ).and.
     &          (BoundaryFibShell_fsh(i,2,1) .eq. 0)      ).or.
     &         ((jq  .ge. nq_ibm_r_fsh(i)-1         ).and.
     &          (BoundaryFibShell_fsh(i,2,2) .eq. 0)      )
     &      ).or.(((j .le. 1                     ).and.
     &          (BoundaryFibShell_fsh(i,1,1) .eq. 2)      ).or.
     &         ((j .ge. ns_ibm_r_fsh(i)         ).and.
     &          (BoundaryFibShell_fsh(i,1,2) .eq. 2)      ).or.
     &         ((jq  .le. 1                     ).and.
     &          (BoundaryFibShell_fsh(i,2,1) .eq. 2)      ).or.
     &         ((jq  .ge. nq_ibm_r_fsh(i)         ).and.
     &          (BoundaryFibShell_fsh(i,2,2) .eq. 2)      )
     &      )
     &       .or.  FlagForceCalculation(jq,j) .eq. 0 )
     &         )then
              vecRHSfibershell(j2+1)=vecRHSfibershell(j2+1)
     &                              +Fpiezo1_fsh(i,jq,j)
              vecRHSfibershell(j2+2)=vecRHSfibershell(j2+2)
     &                              +Fpiezo2_fsh(i,jq,j)
              vecRHSfibershell(j2+3)=vecRHSfibershell(j2+3)
     &                              +Fpiezo3_fsh(i,jq,j)
             endif
         end do
         end do
       endif !(Electromechanical(i2g)) 5154

      if(SolverILU .eq. 1) then
      if(iter .eq. 1) then
       ilucal_flag=.true.
      else
       ilucal_flag=.false.
      endif
      else
       ilucal_flag=.true.
      endif

       print*,'go for solver'
       goto 1313

       print *,"SOLVER DISABLED FOR GNU COMPILING!"
       stop

! Disabled for compiling with GNU
!     call direct_solverPardiso ( k*3
!     & ,ntermiMAXfibershell
!     & ,iacsrfibershell(1: k*3+1)
!     & , jacsrfibershell(1: ntermiMAXfibershell)
!     & , aacsrfibershell(1: ntermiMAXfibershell)
!     & , vecXfibershell(1:k*3)
!     & , vecRHSfibershell(1:k*3))

 1313 continue
       call pmgmres_ilu2_crRowScale(k*3  !RowScale
     & ,ntermiMAXfibershell
     & ,iacsrfibershell(1: k*3+1)
     & , jacsrfibershell(1: ntermiMAXfibershell)
     & , aacsrfibershell(1: ntermiMAXfibershell)
     & , vecXfibershell(1:k*3)
     & , vecRHSfibershell(1:k*3)
     & , SolverOutiter,SolverIniter
     & , Solverabstol,Solverreltol,SolverPre,ilucal_flag,monitorON)

      print*,'after solver'
       do jq=1,nq_ibm_r_fsh(i) 
       do j =1,ns_ibm_r_fsh(i) 
            j2=((jq-1)*ns_ibm_r_fsh(i)+(j-1))*3
            X_np1_fsh(jq,j,1:3) =X_np1_fsh(jq,j,1:3)
     &     +vecXfibershell(j2+1:j2+3)
       end do
       end do

      dxcont(1:3)=0000.0
      outcont(1:3)=0.0
       do jq=1,nq_ibm_r_fsh(i) 
       do j=1,ns_ibm_r_fsh(i) 
           j2=((jq-1)*ns_ibm_r_fsh(i)+(j-1))*3
           dxcont(1:3)=dxcont(1:3)+vecXfibershell(j2+1:j2+3)**2
           !dxcont(1)=max(dxcont(1),vecXfibershell(j2+1)**2)
           !dxcont(2)=max(dxcont(2),vecXfibershell(j2+2)**2)
           !dxcont(3)=max(dxcont(3),vecXfibershell(j2+3)**2)
           outcont(1:3)=outcont(1:3)
     &                 +(X_np1_fsh(jq,j,1:3)-X_n_fsh(jq,j,1:3))**2
       enddo
       enddo
       dxcont(1)=sqrt(dxcont(1)+dxcont(2)+dxcont(3))
       outcont(1)=sqrt(outcont(1)+outcont(2)+outcont(3))
       if(monitorON)
     & print*, 'Error= ',dxcont(1),outcont(1) ,dxcont(1)/outcont(1)

       endif !(Electromechanical(i2g).and.ImplicitElecMech(i2g)) then

       if(Electromechanical(i2g).and.ImplicitElecMech(i2g)) then
       do jq=1,nq_ibm_r_fsh(i) 
       do j=1,ns_ibm_r_fsh(i)
           XvPiezo_np1_fsh(jq,j,2)=
     &       timeMarchcoef(10)*(  XvPiezo_np1_fsh(jq,j,1)
     &                           -XvPiezo_n_fsh(jq,j,1)   )
     &      +timeMarchcoef(11)*XvPiezo_n_fsh(jq,j,2)
     &      +timeMarchcoef(12)*XvPiezo_n_fsh(jq,j,3)
          XvPiezo_np1_fsh(jq,j,3)=
     &       timeMarchcoef(13)*(  XvPiezo_np1_fsh(jq,j,1)
     &                           -XvPiezo_n_fsh(jq,j,1)   )
     &      +timeMarchcoef(14)*XvPiezo_n_fsh(jq,j,2)
     &      +timeMarchcoef(15)*XvPiezo_n_fsh(jq,j,3)
        enddo
        enddo

       endif

       do jq=1,nq_ibm_r_fsh(i) 
       do j=1,ns_ibm_r_fsh(i)
           dX_np1_fsh(jq,j,1:3)=
     &       timeMarchcoef(10)*(X_np1_fsh(jq,j,1:3)-X_n_fsh(jq,j,1:3))
     &      +timeMarchcoef(11)*dX_n_fsh(jq,j,1:3)
     &      +timeMarchcoef(12)*ddX_n_fsh(jq,j,1:3)
          ddX_np1_fsh(jq,j,1:3)=
     &       timeMarchcoef(13)*(X_np1_fsh(jq,j,1:3)-X_n_fsh(jq,j,1:3))
     &      +timeMarchcoef(14)*dX_n_fsh(jq,j,1:3)
     &      +timeMarchcoef(15)*ddX_n_fsh(jq,j,1:3)
        enddo
        enddo
!==============================================   END ITERATION
       if(dxcont(1) .lt. maxErrorstruct) exit
!/outcont(1)

      enddo   !inner generalized alpha loop      
       do jq=1,nq_ibm_r_fsh(i) 
       do j=1,ns_ibm_r_fsh(i)
         gx_ibm_massive_fsh(ibdy,jq,j)=X_np1_fsh(jq,j,1)
         gy_ibm_massive_fsh(ibdy,jq,j)=X_np1_fsh(jq,j,2)
         gz_ibm_massive_fsh(ibdy,jq,j)=X_np1_fsh(jq,j,3)

         vibm1_fsh(ibdy,jq,j)=dX_np1_fsh(jq,j,1)
         vibm2_fsh(ibdy,jq,j)=dX_np1_fsh(jq,j,2)
         vibm3_fsh(ibdy,jq,j)=dX_np1_fsh(jq,j,3)

         aibm1_fsh(ibdy,jq,j)=ddX_np1_fsh(jq,j,1)
         aibm2_fsh(ibdy,jq,j)=ddX_np1_fsh(jq,j,2)
         aibm3_fsh(ibdy,jq,j)=ddX_np1_fsh(jq,j,3)
       
       enddo
       enddo

       if(Electromechanical(i2g).and.ImplicitElecMech(i2g)) then
          ddvPiezo_fsh(ibdy,jq,j)=XvPiezo_np1_fsh(jq,j,3)
           dvPiezo_fsh(ibdy,jq,j)=XvPiezo_np1_fsh(jq,j,2)
            vPiezo_fsh(ibdy,jq,j)=XvPiezo_np1_fsh(jq,j,1)
       endif
       
!        deallocate() !all paramters  NEED to be added



       if(   Electromechanical(i2g)
     &       .and.
     &       (.not.(ImplicitElecMech(i2g)))
     &    ) then
           if(Piezo_Formulation_Flag(i2g) .eq. 0) then

           do jq=1,nq_ibm_r_fsh(i)
           do j=1,ns_ibm_r_fsh(i)
               GXtmp(1,jq,j)=gx_ibm_massive_fsh(i,jq,j)
               GXtmp(2,jq,j)=gy_ibm_massive_fsh(i,jq,j)
               GXtmp(3,jq,j)=gz_ibm_massive_fsh(i,jq,j)
           enddo
           enddo

           do jq=1,nq_ibm_r_fsh(i)
            if (BoundaryFibShell_fsh(i,1,1) .eq. 3) then
             do j=1-(Ns_IBMB_fsh+1),0,1
               jbndy=ns_ibm_r_fsh(i)+j
               GXtmp(1:3,jq,j)=GXtmp(1:3,jq,jbndy)
             enddo
            else
             do j=0,1-(1+Ns_IBMB_fsh),-1

               jbndy=j+1
               GXtmp(1:3,jq,j)=
     &            2.0*GXtmp(1:3,jq,jbndy)-GXtmp(1:3,jq,jbndy+1)
             enddo 
            endif
            if (BoundaryFibShell_fsh(i,1,2) .eq. 3) then
             do j=ns_ibm_r_fsh(i)+1,ns_ibm_r_fsh(i)+(1+Ns_IBMB_fsh),1
               jbndy=-ns_ibm_r_fsh(i)+j
               GXtmp(1:3,jq,j)=GXtmp(1:3,jq,jbndy)
             enddo
            else
             do j=ns_ibm_r_fsh(i)+1,ns_ibm_r_fsh(i)+(1+Ns_IBMB_fsh),1
               jbndy=j-1
               GXtmp(1:3,jq,j)=
     &            2.0*GXtmp(1:3,jq,jbndy)-GXtmp(1:3,jq,jbndy-1)
             enddo 
            endif
          enddo


           do j=1-(1+Ns_IBMB_fsh),ns_ibm_r_fsh(i)+(1+Ns_IBMB_fsh)
            if (BoundaryFibShell_fsh(i,2,1) .eq. 3) then
             do jq=1-(Nq_IBMB_fsh+1),0,1
               jqbndy=nq_ibm_r_fsh(i)+jq
               GXtmp(1:3,jq,j)=GXtmp(1:3,jqbndy,j)
             enddo
            else
             do jq=0,1-(Nq_IBMB_fsh+1),-1
               jqbndy=jq+1
               GXtmp(1:3,jq,j)=
     &            2.0*GXtmp(1:3,jqbndy,j)-GXtmp(1:3,jqbndy+1,j)
             enddo 
            endif
            if (BoundaryFibShell_fsh(i,2,2) .eq. 3) then
             do jq=nq_ibm_r_fsh(i)+1,nq_ibm_r_fsh(i)+(Nq_IBMB_fsh+1),1
               jqbndy=-nq_ibm_r_fsh(i)+jq
               GXtmp(1:3,jq,j)=GXtmp(1:3,jqbndy,j)
             enddo
            else
             do jq=nq_ibm_r_fsh(i)+1,nq_ibm_r_fsh(i)+(Nq_IBMB_fsh+1),1
               jqbndy=jq-1
               GXtmp(1:3,jq,j)=
     &            2.0*GXtmp(1:3,jqbndy,j)-GXtmp(1:3,jqbndy-1,j)
             enddo 
            endif
          enddo

           i=ibdy

           temp_piezo=0.0
           do jq=1,nq_ibm_r_fsh(i)
           do j=1,ns_ibm_r_fsh(i)
              DX_ip_j(1:3)=
     &         (GXtmp(1:3,jq+1,j)-GXtmp(1:3,jq,j))/dsf_IBM_fsh(i,jq,j) 
              DX_im_j(1:3)=
     &         (GXtmp(1:3,jq,j)-GXtmp(1:3,jq-1,j))/dsf_IBM_fsh(i,jq-1,j) 

              DXX_i_j(1:3)=( DX_ip_j(1:3)-DX_im_j(1:3))
     &                     /ds_ibm_fsh(i,jq,j)
 
              DY_i_jp(1:3)=
     &         (GXtmp(1:3,jq,j+1)-GXtmp(1:3,jq,j))/dsf2_IBM_fsh(i,jq,j) 

              DY_i_jm(1:3)=
     &         (GXtmp(1:3,jq,j)-GXtmp(1:3,jq,j-1))
     &                     /dsf2_IBM_fsh(i,jq,j-1) 

              DYY_i_j(1:3)=( DY_i_jp(1:3)-DY_i_jm(1:3))
     &                     /ds2_ibm_fsh(i,jq,j)


              dXP1cont(1,1:3)=0.5*(DX_im_j(1:3)+DX_ip_j(1:3))
              dXP1cont(2,1:3)=0.5*(DY_i_jm(1:3)+DY_i_jp(1:3))
              call crossvec( 
     &             Normalcont1(1:3),dXP1cont(1,1:3),dXP1cont(2,1:3))

              do k=1,3
                ndot_ibm_fsh(i,jq,j)=
     &             piezo_Coef_fsh(i,jq,j,3)*DXX_i_j(k)*Normalcont1(k)
     &            +piezo_Coef_fsh(i,jq,j,4)*DYY_i_j(k)*Normalcont1(k)
              enddo
              

              DY_ip_j(1:3)=0.25*( 
     &           GXtmp(1:3,jq,j)
     &          +GXtmp(1:3,jq,j+1)
     &          +GXtmp(1:3,jq+1,j)
     &          +GXtmp(1:3,jq+1,j+1))            
              DY_im_j(1:3)=0.25*( 
     &           GXtmp(1:3,jq,j) 
     &          +GXtmp(1:3,jq,j+1) 
     &          +GXtmp(1:3,jq-1,j) 
     &          +GXtmp(1:3,jq-1,j+1))

              DX_i_jp(1:3)=0.25*( 
     &           GXtmp(1:3,jq,j) 
     &          +GXtmp(1:3,jq,j-1) 
     &          +GXtmp(1:3,jq+1,j) 
     &          +GXtmp(1:3,jq+1,j-1))     
              DX_i_jm(1:3)=0.25*( 
     &           GXtmp(1:3,jq,j) 
     &          +GXtmp(1:3,jq,j-1) 
     &          +GXtmp(1:3,jq-1,j) 
     &          +GXtmp(1:3,jq-1,j-1))



              DXY_i_j(1:3)=(DY_ip_j(1:3)-DY_im_j(1:3))
     &                     /dk_ibm_fsh(i,jq,j)
              DYX_i_j(1:3)=(DX_i_jp(1:3)-DX_i_jm(1:3))
     &                     /dk_ibm_fsh(i,jq,j-1)
              DYY_i_j(1:3)=(DXY_i_j(1:3)-DYX_i_j(1:3)) 
     &                      /ds2_ibm_fsh(i,jq,j)

              DXY_i_j(1:3)=(DY_ip_j(1:3)-DX_i_jp(1:3))
     &                     /dk2_ibm_fsh(i,jq,j)
              DYX_i_j(1:3)=(DY_im_j(1:3)-DX_i_jm(1:3))
     &                     /dk2_ibm_fsh(i,jq-1,j)
              DXX_i_j(1:3)=(DXY_i_j(1:3)-DYX_i_j(1:3)) 
     &                      /ds_ibm_fsh(i,jq,j)

              do k=1,3
                ndot_ibm_fsh(i,jq,j)=ndot_ibm_fsh(i,jq,j)
     &            +piezo_Coef_fsh(i,jq,j,5)
     &                *(DXX_i_j(k)+DYY_i_j(k))*Normalcont1(k)
              enddo

              ndot_ibm_fsh(i,jq,j)=ndot_ibm_fsh(i,jq,j)
     &                            -ndot_ibm_fsh0(i,jq,j)


              temp_ibm1=(ndot_ibm_fsh(i,jq,j)
     &             -2.0*ndotold_ibm_fsh(i,jq,j)
     &             +ndotpre_ibm_fsh(i,jq,j))/dt2

              temp_ibm1=piezo_Coef_fsh(i,jq,j,-1)*temp_ibm1

              temp_piezo=temp_piezo+temp_ibm1
              if(Piezo_Dist_Flag(i2g)) then
              itmpusrfn(1)=0  !implicit piezo
              itmpusrfn(2)=1  !Piezo_Dist
              include "distIBM_piezo_RHS_fn.Fi" 
              temp_ibm1=-temp_ibm1
     &             +piezo_Coef_fsh(i,jq,j,0)
     &             *vPiezoold_fsh(i,jq,j)/dt
     &             +piezo_Coef_fsh(i,jq,j,1)
     &             *(2.0*vPiezoold_fsh(i,jq,j)
     &                  -vPiezopre_fsh(i,jq,j))/dt2
     &             +Elect_RHS

              temp_ibm2=piezo_Coef_fsh(i,jq,j,2)
     &                 +piezo_Coef_fsh(i,jq,j,0)/dt
     &                 +piezo_Coef_fsh(i,jq,j,1)/dt2
              vPiezo_fsh(i,jq,j)=temp_ibm1/temp_ibm2
              endif !Piezo_Dist_Flag(i2g)
           enddo
           enddo
           if(.not.(Piezo_Dist_Flag(i2g))) then !Piezo_Dist_Flag(i2g)~1
              itmpusrfn(1)=0  !implicit piezo
              itmpusrfn(2)=0  !Piezo_Dist
              include "distIBM_piezo_RHS_fn.Fi"  
              temp_ibm1=-temp_piezo
     &             +piezo_damp(i2)
     &             *vPiezoold_fsh(i,1,1)/dt
     &             +piezo_beta(i2g)
     &             *(2.0*vPiezoold_fsh(i,1,1)
     &                  -vPiezopre_fsh(i,1,1))/dt2
     &             +Elect_RHS

              temp_ibm2=piezo_gamma(i2g)
     &                 +piezo_damp(i2g)/dt
     &                 +piezo_beta(i2g)/dt2
              temp_ibm2=temp_ibm1/temp_ibm2
              do jq=1,nq_ibm_r_fsh(i)
              do j=1,ns_ibm_r_fsh(i)
                 vPiezo_fsh(i,jq,j)=temp_ibm2
              enddo
              enddo
           endif !Piezo_Dist_Flag(i2g)
    
           elseif (Piezo_Formulation_Flag(i2g) .eq. 1) then
           temp_piezo=0.0
           do jq=2,nq_ibm_r_fsh(i)-1
           do j=2,ns_ibm_r_fsh(i)-1

              ndot_ibm_fsh(i,jq,j)=VECpiezo_tmp(3,18,jq,j)
              ndot_ibm_fsh(i,jq,j)=ndot_ibm_fsh(i,jq,j)
     &                            -ndot_ibm_fsh0(i,jq,j)

              temp_ibm1=(ndot_ibm_fsh(i,jq,j)
     &             -2.0*ndotold_ibm_fsh(i,jq,j)
     &             +ndotpre_ibm_fsh(i,jq,j))/dt2
              temp_ibm1=piezo_Coef_fsh(i,jq,j,-1)*temp_ibm1

              temp_piezo=temp_piezo+temp_ibm1
              if(Piezo_Dist_Flag(i2g)) then
              itmpusrfn(1)=0  !implicit piezo
              itmpusrfn(2)=1  !Piezo_Dist
              include "distIBM_piezo_RHS_fn.Fi" 
              temp_ibm1=-temp_ibm1
     &             +piezo_Coef_fsh(i,jq,j,0)
     &             *vPiezoold_fsh(i,jq,j)/dt
     &             +piezo_Coef_fsh(i,jq,j,1)
     &             *(2.0*vPiezoold_fsh(i,jq,j)
     &                  -vPiezopre_fsh(i,jq,j))/dt2
     &             +Elect_RHS

              temp_ibm2=piezo_Coef_fsh(i,jq,j,2)
     &                 +piezo_Coef_fsh(i,jq,j,0)/dt
     &                 +piezo_Coef_fsh(i,jq,j,1)/dt2
              vPiezo_fsh(i,jq,j)=temp_ibm1/temp_ibm2
              endif !Piezo_Dist_Flag(i2g)
           enddo
           enddo
           if(.not. Piezo_Dist_Flag(i2g)) then !Piezo_Dist_Flag(i2g)~1 
              itmpusrfn(1)=0  !implicit piezo
              itmpusrfn(2)=0  !Piezo_Dist
              include "distIBM_piezo_RHS_fn.Fi"  
              temp_ibm1=-temp_piezo
     &             +piezo_damp(i2)
     &             *vPiezoold_fsh(i,1,1)/dt
     &             +piezo_beta(i2g)
     &             *(2.0*vPiezoold_fsh(i,1,1)
     &                  -vPiezopre_fsh(i,1,1))/dt2
     &             +Elect_RHS

              temp_ibm2=piezo_gamma(i2g)
     &                 +piezo_damp(i2g)/dt
     &                 +piezo_beta(i2g)/dt2
              temp_ibm2=temp_ibm1/temp_ibm2
              do jq=1,nq_ibm_r_fsh(i)
              do j=1,ns_ibm_r_fsh(i)
                 vPiezo_fsh(i,jq,j)=temp_ibm2
              enddo
              enddo
           endif !Piezo_Dist_Flag(i2g)

           else ! Piezo_Formulation_Flag(i2g) ~= 0 or 1
              write(*,*) 'Wrong Piezo_Formulation_Flag for ',i2g
              STOP
           endif!Piezo_Formulation_Flag(i2g)
          endif !(Electromechanical(i2g).and.(.not.(ImplicitElecMech(i2g)))
!          deallocate(
!     &       aamat_fsh,iacsrfibershell  
!     &      ,vecRHSfibershell,vecXfibershell
!     &      ,aacsrfibershell,jacsrfibershell
!     &      ,ForceOut)
      else
          stop "choice of Genalpha_timesolver is not defined for Fsh" 
      endif !Genalpha_timesolver((ibdyg))
