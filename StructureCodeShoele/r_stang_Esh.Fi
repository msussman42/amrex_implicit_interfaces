!========================================================================
!                  S H E L L   S T R U C T U R E
!=======================================================================
           ibdy=Iglbloc_esh(ibdyg)
           if(ndim .eq. 2) then
            Print*, 'NO Shell model for two dimensional simulation'
            Print*, 'Please change input file!'
            STOP    
           endif

      if(abs(ShellModelType_esh(ibdy)).le. 1) then

      if(Genalpha_timesolver(ibdyg) .eq. 0) then
 
      allocate(
     &       aamat_esh(ns_ibm_esh,ns_ibm_esh)
     &      ,kks(ns_ibm_esh,ns_ibm_esh)
     &      ,kkb(ns_ibm_esh,ns_ibm_esh)  )

! for free boundary condition
      jq=1
      do np=1,ns_ibm_i_esh(ibdy)  
         npg=ns_ibm_r_esh(ibdy)+np
         bodypoint(1)=boundrylist_esh(ibdy,np,1)
         bodypoint(2)=boundrylist_esh(ibdy,np,2)
         bodypoint(3)=boundrylist_esh(ibdy,np,3)
         gx_ibm_massive_esh(ibdy,npg)=
     &                            gx_ibm_massive_esh(ibdy,bodypoint(1))
     &                           +gx_ibm_massive_esh(ibdy,bodypoint(2))       
     &                           -gx_ibm_massive_esh(ibdy,bodypoint(3))       

         gy_ibm_massive_esh(ibdy,npg)=
     &                            gy_ibm_massive_esh(ibdy,bodypoint(1))
     &                           +gy_ibm_massive_esh(ibdy,bodypoint(2))       
     &                           -gy_ibm_massive_esh(ibdy,bodypoint(3))       
    
         gz_ibm_massive_esh(ibdy,npg)=
     &                            gz_ibm_massive_esh(ibdy,bodypoint(1))
     &                           +gz_ibm_massive_esh(ibdy,bodypoint(2))       
     &                           -gz_ibm_massive_esh(ibdy,bodypoint(3))

      end do       

      aamat_esh=0.0
      mms=0.0
      kks=0.0
      kkb=0.0

      fibm1pres_esh=0.0
      fibm2pres_esh=0.0
      fibm3pres_esh=0.0

      fibm1cont_esh=0.0
      fibm2cont_esh=0.0
      fibm3cont_esh=0.0

      ntypeMAx_loc=-1000

      do ne=1,numelr(ibdyg)
         jtype=neatype_esh(ibdy,ne)
         itype=jtypeall(jtype)
         if(itype .eq. 0) then
           ntype=12  
         else
           ntype=6+itype
         end if
         ntypeMAx_loc=max(ntypeMAx_loc,ntype)

         do nos=1,ntype
            ntem=nea_esh(ibdy,ne,nos)
            noj=1
            x(nos,noj)=gx_ibm_massive_esh(ibdy,ntem)
            noj=2
            x(nos,noj)=gy_ibm_massive_esh(ibdy,ntem)
            noj=3
            x(nos,noj)=gz_ibm_massive_esh(ibdy,ntem)
            if(Fibrous_Esh(ibdy) .eq. 1) then
            noj=1
            x_FibVec(nos,noj)=Materialpara_esh(ibdy,ntem,noj)
            noj=2
            x_FibVec(nos,noj)=Materialpara_esh(ibdy,ntem,noj)
            noj=3
            x_FibVec(nos,noj)=Materialpara_esh(ibdy,ntem,noj)
            if(nos .eq. 1) then
               n_FibVec(1:3) =crFibCrv_esh(ibdy,ne,1:3)
               n3_FibVec(1:3)=crFibCrv_esh(ibdy,ne,4:6)
            endif
            endif
            do noj=1,2
               sx(noj,nos)=coorcurv_esh(ibdy,ne,nos,noj)
            enddo
         enddo


         if(itype .eq. 0) then
             xj1=x(4,1);xj2=x(7,1);xj3=x(8,1)
             yj1=x(4,2);yj2=x(7,2);yj3=x(8,2)
             zj1=x(4,3);zj2=x(7,3);zj3=x(8,3)
         else
             xj1=x(1,1);xj2=x(2,1);xj3=x(itype+1,1)
             yj1=x(1,2);yj2=x(2,2);yj3=x(itype+1,2)
             zj1=x(1,3);zj2=x(2,3);zj3=x(itype+1,3)
         endif


             tmpv1(1)=xj2-xj1
             tmpv1(2)=yj2-yj1
             tmpv1(3)=zj2-zj1
             tmpv2(1)=xj3-xj1
             tmpv2(2)=yj3-yj1
             tmpv2(3)=zj3-zj1
            call crossvec(tmpv3,tmpv1,tmpv2)


            tmpv1x(1)=xpcenter_esh(ibdy,ne,1)
            tmpv1x(2)=xpcenter_esh(ibdy,ne,2)
            tmpv1x(3)=xpcenter_esh(ibdy,ne,3)


         if(itype .eq. 0) then
             if (ExternalPressureFlag(ibdyg)) then
             
             fibm1cont_esh(nea_esh(ibdy,ne,4))=
     &                            fibm1cont_esh(nea_esh(ibdy,ne,4))+
     &                                 tmpv3(1)*tmpv1x(1)
             fibm1cont_esh(nea_esh(ibdy,ne,7))=
     &                            fibm1cont_esh(nea_esh(ibdy,ne,7))+
     &                                 tmpv3(1)*tmpv1x(2)
             fibm1cont_esh(nea_esh(ibdy,ne,8))=
     &                            fibm1cont_esh(nea_esh(ibdy,ne,8))+
     &                                 tmpv3(1)*tmpv1x(3)

             fibm1pres_esh(nea_esh(ibdy,ne,4))=
     &                            fibm1pres_esh(nea_esh(ibdy,ne,4))+
     &                                 tmpv3(1)*area(ibdy,ne)/3.0
             fibm1pres_esh(nea_esh(ibdy,ne,7))=
     &                            fibm1pres_esh(nea_esh(ibdy,ne,7))+
     &                                 tmpv3(1)*area(ibdy,ne)/3.0
             fibm1pres_esh(nea_esh(ibdy,ne,8))=
     &                            fibm1pres_esh(nea_esh(ibdy,ne,8))+
     &                                 tmpv3(1)*area(ibdy,ne)/3.0

             fibm2cont_esh(nea_esh(ibdy,ne,4))=
     &                            fibm2cont_esh(nea_esh(ibdy,ne,4))+
     &                                 tmpv3(2)*tmpv1x(1)
             fibm2cont_esh(nea_esh(ibdy,ne,7))=
     &                            fibm2cont_esh(nea_esh(ibdy,ne,7))+
     &                                 tmpv3(2)*tmpv1x(2)
             fibm2cont_esh(nea_esh(ibdy,ne,8))=
     &                            fibm2cont_esh(nea_esh(ibdy,ne,8))+
     &                                 tmpv3(2)*tmpv1x(3)
             fibm2pres_esh(nea_esh(ibdy,ne,4))=
     &                            fibm2pres_esh(nea_esh(ibdy,ne,4))+
     &                                 tmpv3(2) *area(ibdy,ne)/3.0
             fibm2pres_esh(nea_esh(ibdy,ne,7))=
     &                            fibm2pres_esh(nea_esh(ibdy,ne,7))+
     &                                 tmpv3(2)  *area(ibdy,ne)/3.0
             fibm2pres_esh(nea_esh(ibdy,ne,8))=
     &                            fibm2pres_esh(nea_esh(ibdy,ne,8))+
     &                                 tmpv3(2)  *area(ibdy,ne)/3.0

             fibm3cont_esh(nea_esh(ibdy,ne,4))=
     &                            fibm3cont_esh(nea_esh(ibdy,ne,4))+
     &                                 tmpv3(3)*tmpv1x(1)
             fibm3cont_esh(nea_esh(ibdy,ne,7))=
     &                            fibm3cont_esh(nea_esh(ibdy,ne,7))+
     &                                 tmpv3(3)*tmpv1x(2)
             fibm3cont_esh(nea_esh(ibdy,ne,8))=
     &                            fibm3cont_esh(nea_esh(ibdy,ne,8))+
     &                                 tmpv3(3)*tmpv1x(3)

             fibm3pres_esh(nea_esh(ibdy,ne,4))=
     &                            fibm3pres_esh(nea_esh(ibdy,ne,4))+
     &                                 tmpv3(3)  *area(ibdy,ne)/3.0
             fibm3pres_esh(nea_esh(ibdy,ne,7))=
     &                            fibm3pres_esh(nea_esh(ibdy,ne,7))+
     &                                 tmpv3(3)  *area(ibdy,ne)/3.0
             fibm3pres_esh(nea_esh(ibdy,ne,8))=
     &                            fibm3pres_esh(nea_esh(ibdy,ne,8))+
     &                                 tmpv3(3)  *area(ibdy,ne)/3.0
             endif
             if(nea_esh(ibdy,ne,4) .le. ns_ibm_r_esh(ibdy))
     &       areapnt_esh(ibdy,nea_esh(ibdy,ne,4))=
     &                  areapnt_esh(ibdy,nea_esh(ibdy,ne,4))
     &                                   +area(ibdy,ne)/3.0
             if(nea_esh(ibdy,ne,7) .le. ns_ibm_r_esh(ibdy))
     &        areapnt_esh(ibdy,nea_esh(ibdy,ne,7))=
     &                  areapnt_esh(ibdy,nea_esh(ibdy,ne,7))
     &                                   +area(ibdy,ne)/3.0
             if(nea_esh(ibdy,ne,8) .le. ns_ibm_r_esh(ibdy))
     &       areapnt_esh(ibdy,nea_esh(ibdy,ne,8))=
     &                  areapnt_esh(ibdy,nea_esh(ibdy,ne,8))
     &                                   +area(ibdy,ne)/3.0

!             xpnt_esh(ibdy,nea_esh(ibdy,ne,4))=
!     &                  xpnt_esh(ibdy,nea_esh(ibdy,ne,4))
!     &                                 +tmpv1x(1)
!             xpnt_esh(ibdy,nea_esh(ibdy,ne,7))=
!     &                  xpnt_esh(ibdy,nea_esh(ibdy,ne,7))
!     &                                 +tmpv1x(2)
!             xpnt_esh(ibdy,nea_esh(ibdy,ne,8))=
!     &                  xpnt_esh(ibdy,nea_esh(ibdy,ne,8))
!     &                                 +tmpv1x(3)


        else
             noj=itype+1
             if (ExternalPressureFlag(ibdyg)) then
             fibm1cont_esh(nea_esh(ibdy,ne,1))=
     &                            fibm1cont_esh(nea_esh(ibdy,ne,1))+
     &                                 tmpv3(1)*tmpv1x(1)
             fibm1cont_esh(nea_esh(ibdy,ne,2))=
     &                            fibm1cont_esh(nea_esh(ibdy,ne,2))+
     &                                 tmpv3(1)*tmpv1x(2)
             fibm1cont_esh(nea_esh(ibdy,ne,noj))=
     &                            fibm1cont_esh(nea_esh(ibdy,ne,noj))+
     &                                 tmpv3(1)*tmpv1x(3)

             fibm1pres_esh(nea_esh(ibdy,ne,1))=
     &                            fibm1pres_esh(nea_esh(ibdy,ne,1))+
     &                                 tmpv3(1)  *area(ibdy,ne)/3.0
             fibm1pres_esh(nea_esh(ibdy,ne,2))=
     &                            fibm1pres_esh(nea_esh(ibdy,ne,2))+
     &                                 tmpv3(1)  *area(ibdy,ne)/3.0
             fibm1pres_esh(nea_esh(ibdy,ne,noj))=
     &                            fibm1pres_esh(nea_esh(ibdy,ne,noj))+
     &                                 tmpv3(1)  *area(ibdy,ne)/3.0

             fibm2cont_esh(nea_esh(ibdy,ne,1))=
     &                            fibm2cont_esh(nea_esh(ibdy,ne,1))+
     &                                 tmpv3(2)*tmpv1x(1)
             fibm2cont_esh(nea_esh(ibdy,ne,2))=
     &                            fibm2cont_esh(nea_esh(ibdy,ne,2))+
     &                                 tmpv3(2)*tmpv1x(2)
             fibm2cont_esh(nea_esh(ibdy,ne,noj))=
     &                            fibm2cont_esh(nea_esh(ibdy,ne,noj))+
     &                                 tmpv3(2)*tmpv1x(3)

             fibm2pres_esh(nea_esh(ibdy,ne,1))=
     &                            fibm2pres_esh(nea_esh(ibdy,ne,1))+
     &                                 tmpv3(2)  *area(ibdy,ne)/3.0
             fibm2pres_esh(nea_esh(ibdy,ne,2))=
     &                            fibm2pres_esh(nea_esh(ibdy,ne,2))+
     &                                 tmpv3(2)  *area(ibdy,ne)/3.0
             fibm2pres_esh(nea_esh(ibdy,ne,noj))=
     &                            fibm2pres_esh(nea_esh(ibdy,ne,noj))+
     &                                 tmpv3(2)  *area(ibdy,ne)/3.0

             fibm3cont_esh(nea_esh(ibdy,ne,1))=
     &                            fibm3cont_esh(nea_esh(ibdy,ne,1))+
     &                                 tmpv3(3)*tmpv1x(1)

             fibm3cont_esh(nea_esh(ibdy,ne,2))=
     &                            fibm3cont_esh(nea_esh(ibdy,ne,2))+
     &                                 tmpv3(3)*tmpv1x(2)

             fibm3cont_esh(nea_esh(ibdy,ne,noj))=
     &                           fibm3cont_esh(nea_esh(ibdy,ne,noj))+
     &                                 tmpv3(3)*tmpv1x(3)

             fibm3pres_esh(nea_esh(ibdy,ne,1))=
     &                            fibm3pres_esh(nea_esh(ibdy,ne,1))+
     &                                 tmpv3(3)  *area(ibdy,ne)/3.0
             fibm3pres_esh(nea_esh(ibdy,ne,2))=
     &                            fibm3pres_esh(nea_esh(ibdy,ne,2))+
     &                                 tmpv3(3) *area(ibdy,ne)/3.0
             fibm3pres_esh(nea_esh(ibdy,ne,noj))=
     &                           fibm3pres_esh(nea_esh(ibdy,ne,noj))+
     &                                 tmpv3(3)  *area(ibdy,ne)/3.0
           endif

             if(nea_esh(ibdy,ne,1) .le. ns_ibm_r_esh(ibdy))
     &       areapnt_esh(ibdy,nea_esh(ibdy,ne,1))=
     &                  areapnt_esh(ibdy,nea_esh(ibdy,ne,1))
     &                                   +area(ibdy,ne)/3.0
             if(nea_esh(ibdy,ne,2) .le. ns_ibm_r_esh(ibdy))
     &       areapnt_esh(ibdy,nea_esh(ibdy,ne,2))=
     &                  areapnt_esh(ibdy,nea_esh(ibdy,ne,2))
     &                                   +area(ibdy,ne)/3.0
             if(nea_esh(ibdy,ne,3) .le. ns_ibm_r_esh(ibdy))
     &       areapnt_esh(ibdy,nea_esh(ibdy,ne,noj))=
     &                  areapnt_esh(ibdy,nea_esh(ibdy,ne,noj))
     &                                   +area(ibdy,ne)/3.0


!             xpnt_esh(ibdy,nea_esh(ibdy,ne,1))=
!     &                  xpnt_esh(ibdy,nea_esh(ibdy,ne,1))
!     &                                 +tmpv1x(1)
!             xpnt_esh(ibdy,nea_esh(ibdy,ne,2))=
!     &                  xpnt_esh(ibdy,nea_esh(ibdy,ne,2))
!     &                                 +tmpv1x(2)
!             xpnt_esh(ibdy,nea_esh(ibdy,ne,noj))=
!     &                  xpnt_esh(ibdy,nea_esh(ibdy,ne,noj))
!     &                                 +tmpv1x(3)

         endif

         mass=0.0
         ks=0.0
         kb=0.0

         do i=1,ngau
            wei_i=wei(i)
            s(1,1:ntype)=nn(jtype,i,1:ntype)
            dsdv(1,1:ntype)=dnndv(jtype,i,1:ntype)
            dsdv(2,1:ntype)=dnndw(jtype,i,1:ntype)
            ddsdvdv(1,1:ntype)=ddnndvdv(jtype,i,1:ntype)
            ddsdvdv(2,1:ntype)=ddnndvdw(jtype,i,1:ntype)
            ddsdvdv(3,1:ntype)=ddnndwdw(jtype,i,1:ntype)

        goto 2121  !for now skip over new implementation of Orthotropic shell
            if(Fibrous_Esh(ibdy) .eq. 1) then
              matFib_Esh(1,1)=crFibCrv_esh(ibdy,ne,1)
              matFib_Esh(1,2)=crFibCrv_esh(ibdy,ne,2)
              matFib_Esh(2,1)=crFibCrv_esh(ibdy,ne,3)
              matFib_Esh(2,2)=crFibCrv_esh(ibdy,ne,4)

              dsdv(1:2,1:ntype)=
     &              matmul(matFib_Esh(1:2,1:2),dsdv(1:2,1:ntype))


              matFib_Esh(1,1)=crFibCrv_esh(ibdy,ne,1)**2
              matFib_Esh(1,2)=2.0*crFibCrv_esh(ibdy,ne,1)
     &                           *crFibCrv_esh(ibdy,ne,2)
              matFib_Esh(1,3)=crFibCrv_esh(ibdy,ne,2)**2

              matFib_Esh(2,1)=    crFibCrv_esh(ibdy,ne,1)
     &                           *crFibCrv_esh(ibdy,ne,3)
              matFib_Esh(2,2)=   (crFibCrv_esh(ibdy,ne,1)
     &                           *crFibCrv_esh(ibdy,ne,4)
     &                           +crFibCrv_esh(ibdy,ne,2)
     &                           *crFibCrv_esh(ibdy,ne,3))
              matFib_Esh(2,3)=    crFibCrv_esh(ibdy,ne,2)
     &                           *crFibCrv_esh(ibdy,ne,4)

              matFib_Esh(3,1)=crFibCrv_esh(ibdy,ne,3)**2
              matFib_Esh(3,2)=2.0*crFibCrv_esh(ibdy,ne,3)
     &                           *crFibCrv_esh(ibdy,ne,4)
              matFib_Esh(3,3)=crFibCrv_esh(ibdy,ne,4)**2

              ddsdvdv(1:3,1:ntype)=
     &              matmul(matFib_Esh(1:3,1:3),ddsdvdv(1:3,1:ntype))
            endif
2121        continue

             do noi=1,2
               do noj=1,2
                  jmat(noj,noi)=
     &              dot_product(dsdv(noj,1:ntype),sx(noi,1:ntype))
               end do
               do noj=1,3
                  gmat(noj,noi)=
     &              dot_product(ddsdvdv(noj,1:ntype),sx(noi,1:ntype))
               end do
             end do 
             hmat(1,1)= jmat(1,1)**2
             hmat(2,1)= jmat(1,1)*jmat(2,1)
             hmat(3,1)= jmat(2,1)**2  
             hmat(1,2)= 2.0*jmat(1,1)*jmat(1,2)
             hmat(2,2)= jmat(1,1)*jmat(2,2)+jmat(1,2)*jmat(2,1)
             hmat(3,2)= 2.0*jmat(2,1)*jmat(2,2) 
             hmat(1,3)= jmat(1,2)**2
             hmat(2,3)= jmat(1,2)*jmat(2,2)
             hmat(3,3)= jmat(2,2)**2  

             wei_i=wei_i
     &             *abs(jmat(1,1)*jmat(2,2)-jmat(1,2)*jmat(2,1))
 !            area(ibdy,ne)=area(ibdy,ne)+wei_i
             call invert(jmat,2)
             call invert(hmat,3)
  
             amat1(1:2,1:ntype)=matmul(jmat,dsdv(1:2,1:ntype))
             amat2(1:3,1:ntype)=matmul(gmat,amat1(1:2,1:ntype))   ! shape for memebrane effect
             amat2(1:3,1:ntype)=ddsdvdv(1:3,1:ntype)-amat2(1:3,1:ntype)
             amat2(1:3,1:ntype)=matmul(hmat,amat2(1:3,1:ntype)) !shape for bending part

             do noj=1,3
                xpos(noj)=dot_product(s(1,1:ntype),x(1:ntype,noj))
                do noi=1,2
                   dxpos(noi,noj)=
     &               dot_product(amat1(noi,1:ntype),x(1:ntype,noj))
                end do
                do noi=1,3
                   d2xpos(noi,noj)=
     &             dot_product(amat2(noi,1:ntype),x(1:ntype,noj))
                end do
             end do

             noi=1
             noj=1
             dmat(noi,noj)=1/2.0*
     &        dot_product(dxpos(noi,1:3),dxpos(noj,1:3))
     &        -dmat0_esh(ibdy,ne,i,noi,noj)
             kmatbar(noi,noj)=sqrt(
     &        dot_product(d2xpos(noi,1:3),d2xpos(noj,1:3)))
                
             noi=1
             noj=2
             dmat(noi,noj)=1/2.0*
     &        dot_product(dxpos(noi,1:3),dxpos(noj,1:3))
     &        -dmat0_esh(ibdy,ne,i,noi,noj)
             kmatbar(noi,noj)=sqrt(
     &        dot_product(d2xpos(noj,1:3),d2xpos(noj,1:3)))
             kmatbar(noj,noi)=kmatbar(noi,noj)
             dmat(noj,noi)=dmat(noi,noj)

             noi=2
             noj=2
             dmat(noi,noj)=1/2.0*
     &        dot_product(dxpos(noi,1:3),dxpos(noj,1:3))
     &        -dmat0_esh(ibdy,ne,i,noi,noj)
             kmatbar(noi,noj)=sqrt(dot_product(d2xpos(noj+1,1:3)
     &        ,d2xpos(noj+1,1:3)))

             kmat=kmatbar-kmat0_esh(ibdy,ne,i,1:2,1:2)


             iner1=2.0*(dmat(1,1)+dmat(2,2))
             iner2=2.0*(dmat(1,1)+dmat(2,2))
     &        +4.0*(dmat(1,1)*dmat(2,2)-dmat(1,2)*dmat(2,1))

             jner1= kmat(1,1)+kmat(2,2)
             jner2= kmat(1,1)*kmat(2,2)-kmat(1,2)*kmat(2,1)

! neo-hookean membrane Ws=\phi/2 (I_1 -1 + 1/(I_2+1))
! phi_mem_coef(1)=\phi
            if(MaterialTypeIBM(ibdyg) .eq. 1) then
            smat(1,1)=phi_mem_coef(ibdyg,1)
     &        *(1.0-(1.0+2.0*dmat(2,2))/(iner2+1.0)**2)
            smat(1,2)=phi_mem_coef(ibdyg,1)
     &        *(2.0*dmat(2,1)/(iner2+1.0)**2)
            smat(2,1)=smat(1,2)
            smat(2,2)=phi_mem_coef(ibdyg,1)
     &        *(1.0-(1.0+2.0*dmat(1,1))/(iner2+1.0)**2)
            elseif(MaterialTypeIBM(ibdyg) .eq. 2) then 
! skalak (SK) membrane Ws=\phi/2 (1/2 I_1^2 + I_1 - I_2 + C/2 I_2^2)
! phi_mem_coef(1)=\phi
! phi_mem_coef(2)=C
            smat(1,1)=phi_mem_coef(ibdyg,1)
     &             * (  iner1+1.0+(1.0+2.0*dmat(2,2))
     &                *(phi_mem_coef(ibdyg,2)*iner2-1)   )
            smat(2,2)=phi_mem_coef(ibdyg,1)
     &              *(  iner1+1.0+(1.0+2.0*dmat(1,1))
     &                *(phi_mem_coef(ibdyg,2)*iner2-1)   )
            smat(1,2)=-2.0d0*phi_mem_coef(ibdyg,1)*dmat(1,2)
     &                *(phi_mem_coef(ibdyg,2)*iner2-1)
            smat(2,1)=smat(1,2)
            elseif(MaterialTypeIBM(ibdyg) .eq. 3) then 
! Fung tissue model for heart valve
! Ws=\phi/2 (e^Q -1) 
! Q=A1 D11^2
! + A2 D22^2
! + 2 A3 D11 D22
! + A4 [(D12+D21)/2]^2
! + A5 D11 (D12+D21)
! + A6 D22 (D12+D21)
!
! phi_mem_coef(1)=\phi
! phi_mem_coef(2)=A1
! phi_mem_coef(3)=A2
! phi_mem_coef(4)=A3
! phi_mem_coef(5)=A4
! phi_mem_coef(6)=A5
! phi_mem_coef(7)=A6


           if(Fibrous_Esh(ibdy ) .eq. 1) then
             do noj=1,3
                xposFib(noj)=
     &           dot_product(s(1,1:ntype),x_FibVec(1:ntype,noj))
             end do

             call crossvec(tmpv3,n_FibVec,xposFib)
             temp_ibm2=dot_product(n3_FibVec,tmpv3)
             if(temp_ibm2 .ge. 0.0)then
                temp_ibm2=1.0
             else
                temp_ibm2=-1.0
             endif
             tmpv3(1)=dot_product(xposFib,xposFib)
             tmpv3(2)=dot_product(n_FibVec,n_FibVec)
             tmpv3(3)=dot_product(n_FibVec,xposFib)
             temp_ibm1=temp_ibm2*acos(tmpv3(3)/sqrt(tmpv3(1)*tmpv3(2)))

             tmpv3(1)=(cos(temp_ibm1))**2
             tmpv3(2)=(sin(temp_ibm1))**2
             tmpv3(3)=sin(temp_ibm1)*cos(temp_ibm1)

             R_Fibmat(1,1:3)=(/tmpv3(1),tmpv3(2),2.0*tmpv3(3)/)
             R_Fibmat(2,1:3)=(/tmpv3(2),tmpv3(1),-2.0*tmpv3(3)/)
             R_Fibmat(3,1:3)=(/-tmpv3(3),tmpv3(3),tmpv3(1)-tmpv3(2)/)

             tmpv3(1)=dmat(1,1)
             tmpv3(2)=dmat(2,2)
             tmpv3(3)=dmat(1,2)   

             tmpv2=matmul(R_Fibmat,tmpv3)
             dmat(1,1)=tmpv2(1)
             dmat(2,2)=tmpv2(2)
             dmat(1,2)=tmpv2(3)
             dmat(2,1)=dmat(1,2)

           endif
            

            temp_ibm1=phi_mem_coef(ibdyg,2)*dmat(1,1)**2
     &           +phi_mem_coef(ibdyg,3)*dmat(2,2)**2
     &           +2.0*phi_mem_coef(ibdyg,4)*dmat(2,2)*dmat(1,1)
     &           +phi_mem_coef(ibdyg,5)*((dmat(1,2)+dmat(2,1))/2)**2
     &           +phi_mem_coef(ibdyg,6)*dmat(1,1)*(dmat(1,2)+dmat(2,1))
     &           +phi_mem_coef(ibdyg,7)*dmat(2,2)*(dmat(1,2)+dmat(2,1))

            temp_ibm2=phi_mem_coef(ibdyg,1)/2.0d0*exp(temp_ibm1)
             
            smat(1,1)=(
     &                2.0*phi_mem_coef(ibdyg,2)*dmat(1,1)
     &               +2.0*phi_mem_coef(ibdyg,4)*dmat(2,2)
     &               +phi_mem_coef(ibdyg,6)*(dmat(1,2)+dmat(2,1)))
     &               *temp_ibm2

            smat(2,2)=(
     &                2.0*phi_mem_coef(ibdyg,3)*dmat(2,2)
     &               +2.0*phi_mem_coef(ibdyg,4)*dmat(1,1)
     &               +phi_mem_coef(ibdyg,7)*(dmat(1,2)+dmat(2,1)))
     &               *temp_ibm2


            smat(1,2)=(
     &                phi_mem_coef(ibdyg,5)/2.0d0*(dmat(2,1)+dmat(1,2))
     &               +phi_mem_coef(ibdyg,6)*dmat(1,1)
     &               +phi_mem_coef(ibdyg,7)*dmat(2,2))
     &               *temp_ibm2
            smat(2,1)=smat(1,2)

            if(flag_fractal_esh(ibdy)) then
              smatsave_esh(1,i,ne)=smat(1,1)
              smatsave_esh(2,i,ne)=smat(2,2)
              smatsave_esh(3,i,ne)=smat(1,2)

              jq=nifractal_esh(ibdy)
              jq2=3*jq
              ksh_tmp=smatsave_esh(1,i,ne)
              Xfractal_esh(jq2+1:jq2+jq,i,ne,ibdy)=
     &             matmul(Afractal2_esh(1:jq,1:jq,1,ibdy)
     &                   ,Bfractal_esh(1:jq,1,ibdy)*delta_t*ksh_tmp
     &                    +Xfractal_esh(1:jq,i,ne,ibdy))


              ksh_tmp=smatsave_esh(2,i,ne)
              Xfractal_esh(jq2+jq+1:jq2+2*jq,i,ne,ibdy)= 
     &             matmul(Afractal2_esh(1:jq,1:jq,2,ibdy)
     &                   ,Bfractal_esh(1:jq,2,ibdy)*delta_t*ksh_tmp
     &                    +Xfractal_esh(jq+1:2*jq,i,ne,ibdy))

              ksh_tmp=smatsave_esh(3,i,ne)
              Xfractal_esh(jq2+2*jq+1:jq2+3*jq,i,ne,ibdy)=
     &             matmul(Afractal2_esh(1:jq,1:jq,3,ibdy)
     &                   ,Bfractal_esh(1:jq,3,ibdy)*delta_t*ksh_tmp
     &                    +Xfractal_esh(2*jq+1:3*jq,i,ne,ibdy))

              jq=nifractal_esh(ibdy)
              jq2=3*jq
              smat(1,1)=fractalpara_esh(ibdy,3)
     &               *dot_product(Cfractal_esh(1:jq,1,ibdy)
     &                          ,Xfractal_esh(jq2+1:jq2+jq,i,ne,ibdy))
     &              +( fractalpara_esh(ibdy,3)*Dfractal_esh(1,ibdy)
     &                +fractalpara_esh(ibdy,2))*smat(1,1)

              smat(2,2)=fractalpara_esh(ibdy,6)
     &               *dot_product(Cfractal_esh(1:jq,2,ibdy)
     &                     ,Xfractal_esh(jq2+jq+1:jq2+2*jq,i,ne,ibdy))
     &              +( fractalpara_esh(ibdy,6)*Dfractal_esh(2,ibdy)
     &                +fractalpara_esh(ibdy,5))*smat(2,2)

              smat(1,2)=fractalpara_esh(ibdy,9)
     &               *dot_product(Cfractal_esh(1:jq,3,ibdy)
     &                    ,Xfractal_esh(jq2+2*jq+1:jq2+3*jq,i,ne,ibdy))
     &              +( fractalpara_esh(ibdy,9)*Dfractal_esh(3,ibdy)
     &                +fractalpara_esh(ibdy,8))*smat(1,2)
             smat(2,1)=smat(1,2)


             endif

             if (isavesigma .eq. 1) then
             if(itype .eq. 0) then   
             
             fibmsig_esh(ibdy,1,nea_esh(ibdy,ne,4))=
     &                   fibmsig_esh(ibdy,1,nea_esh(ibdy,ne,4))+
     &                   wei_i*2.0*smat(1,1)*area(ibdy,ne)
     &                   /areapnt_esh(ibdy,nea_esh(ibdy,ne,4))
             fibmsig_esh(ibdy,1,nea_esh(ibdy,ne,7))=
     &                   fibmsig_esh(ibdy,1,nea_esh(ibdy,ne,7))+
     &                   wei_i*2.0*smat(1,1)*area(ibdy,ne)
     &                   /areapnt_esh(ibdy,nea_esh(ibdy,ne,7))
             fibmsig_esh(ibdy,1,nea_esh(ibdy,ne,8))=
     &                   fibmsig_esh(ibdy,1,nea_esh(ibdy,ne,8))+
     &                   wei_i*2.0*smat(1,1)*area(ibdy,ne)
     &                   /areapnt_esh(ibdy,nea_esh(ibdy,ne,8))

             fibmsig_esh(ibdy,2,nea_esh(ibdy,ne,4))=
     &                   fibmsig_esh(ibdy,2,nea_esh(ibdy,ne,4))+
     &                   wei_i*2.0*smat(2,2)*area(ibdy,ne)
     &                   /areapnt_esh(ibdy,nea_esh(ibdy,ne,4))
             fibmsig_esh(ibdy,2,nea_esh(ibdy,ne,7))=
     &                   fibmsig_esh(ibdy,2,nea_esh(ibdy,ne,7))+
     &                   wei_i*2.0*smat(2,2)*area(ibdy,ne)
     &                   /areapnt_esh(ibdy,nea_esh(ibdy,ne,7))
             fibmsig_esh(ibdy,2,nea_esh(ibdy,ne,8))=
     &                   fibmsig_esh(ibdy,2,nea_esh(ibdy,ne,8))+
     &                   wei_i*2.0*smat(2,2)*area(ibdy,ne)
     &                   /areapnt_esh(ibdy,nea_esh(ibdy,ne,8))

             fibmsig_esh(ibdy,3,nea_esh(ibdy,ne,4))=
     &                   fibmsig_esh(ibdy,3,nea_esh(ibdy,ne,4))+
     &                   wei_i*2.0*smat(1,2)*area(ibdy,ne)
     &                   /areapnt_esh(ibdy,nea_esh(ibdy,ne,4))
             fibmsig_esh(ibdy,3,nea_esh(ibdy,ne,7))=
     &                   fibmsig_esh(ibdy,3,nea_esh(ibdy,ne,7))+
     &                   wei_i*2.0*smat(1,2)*area(ibdy,ne)
     &                   /areapnt_esh(ibdy,nea_esh(ibdy,ne,7))
             fibmsig_esh(ibdy,3,nea_esh(ibdy,ne,8))=
     &                   fibmsig_esh(ibdy,3,nea_esh(ibdy,ne,8))+
     &                   wei_i*2.0*smat(1,2)*area(ibdy,ne)
     &                   /areapnt_esh(ibdy,nea_esh(ibdy,ne,8))
            else
             noj=itype+1

             fibmsig_esh(ibdy,1,nea_esh(ibdy,ne,1))=
     &                   fibmsig_esh(ibdy,1,nea_esh(ibdy,ne,1))+
     &                   wei_i*2.0*smat(1,1)*area(ibdy,ne)
     &                   /areapnt_esh(ibdy,nea_esh(ibdy,ne,1))
             fibmsig_esh(ibdy,1,nea_esh(ibdy,ne,2))=
     &                   fibmsig_esh(ibdy,1,nea_esh(ibdy,ne,2))+
     &                   wei_i*2.0*smat(1,1)*area(ibdy,ne)
     &                   /areapnt_esh(ibdy,nea_esh(ibdy,ne,2))
             fibmsig_esh(ibdy,1,nea_esh(ibdy,ne,noj))=
     &                   fibmsig_esh(ibdy,1,nea_esh(ibdy,ne,noj))+
     &                   wei_i*2.0*smat(1,1)*area(ibdy,ne)
     &                   /areapnt_esh(ibdy,nea_esh(ibdy,ne,noj))

             fibmsig_esh(ibdy,2,nea_esh(ibdy,ne,1))=
     &                   fibmsig_esh(ibdy,2,nea_esh(ibdy,ne,1))+
     &                   wei_i*2.0*smat(2,2)*area(ibdy,ne)
     &                   /areapnt_esh(ibdy,nea_esh(ibdy,ne,1))
             fibmsig_esh(ibdy,2,nea_esh(ibdy,ne,2))=
     &                   fibmsig_esh(ibdy,2,nea_esh(ibdy,ne,2))+
     &                   wei_i*2.0*smat(2,2)*area(ibdy,ne)
     &                   /areapnt_esh(ibdy,nea_esh(ibdy,ne,2))
             fibmsig_esh(ibdy,2,nea_esh(ibdy,ne,noj))=
     &                   fibmsig_esh(ibdy,2,nea_esh(ibdy,ne,noj))+
     &                   wei_i*2.0*smat(2,2)*area(ibdy,ne)
     &                   /areapnt_esh(ibdy,nea_esh(ibdy,ne,noj))

             fibmsig_esh(ibdy,3,nea_esh(ibdy,ne,1))=
     &                   fibmsig_esh(ibdy,3,nea_esh(ibdy,ne,1))+
     &                   wei_i*2.0*smat(1,2)*area(ibdy,ne)
     &                   /areapnt_esh(ibdy,nea_esh(ibdy,ne,1))
             fibmsig_esh(ibdy,3,nea_esh(ibdy,ne,2))=
     &                   fibmsig_esh(ibdy,3,nea_esh(ibdy,ne,2))+
     &                   wei_i*2.0*smat(1,2)*area(ibdy,ne)
     &                   /areapnt_esh(ibdy,nea_esh(ibdy,ne,2))
             fibmsig_esh(ibdy,3,nea_esh(ibdy,ne,noj))=
     &                   fibmsig_esh(ibdy,3,nea_esh(ibdy,ne,noj))+
     &                   wei_i*2.0*smat(1,2)*area(ibdy,ne)
     &                   /areapnt_esh(ibdy,nea_esh(ibdy,ne,noj))
            endif
            endif


           if(Fibrous_Esh(ibdy) .eq. 1) then
            R_Fibmat(1:2,3)=-R_Fibmat(1:2,3)
            R_Fibmat(3,1:2)=-R_Fibmat(3,1:2)

             tmpv3(1)=smat(1,1)
             tmpv3(2)=smat(2,2)
             tmpv3(3)=smat(1,2)   

             tmpv2=matmul(R_Fibmat,tmpv3)
             smat(1,1)=tmpv2(1)
             smat(2,2)=tmpv2(2)
             smat(1,2)=tmpv2(3)
             smat(2,1)=smat(1,2)

           endif



            endif

            !call invertelement(kmatbar,2) 
            
            do noi=1,2
              do noj=1,2
                 kmatbar(noi,noj)=1.0/(kmatbar(noi,noj)+1.0e-9)
              enddo
            enddo
            
            
            bmat(1:3,1:3)=0.0          
            bmat(1,1)=phi_ben_coef(ibdyg)
     &        *(kmat(1,1)+phi_nus_coef(ibdyg)*kmat(2,2))*kmatbar(1,1)
            bmat(2,2)=phi_ben_coef(ibdyg)
     &        *(1.0-phi_nus_coef(ibdyg))*kmat(2,1)*kmatbar(1,2)
            bmat(2,2)=bmat(2,2)
     &        +phi_ben_coef(ibdyg)
     &        *(1.0-phi_nus_coef(ibdyg))*kmat(1,2)*kmatbar(2,1)
            bmat(3,3)=phi_ben_coef(ibdyg)
     &        *(kmat(2,2)+phi_nus_coef(ibdyg)*kmat(1,1))*kmatbar(2,2)

                ks(1:ntype,1:ntype)=ks(1:ntype,1:ntype)
     &             +wei_i*matmul(matmul(transpose(amat1(1:2,1:ntype))
     &             ,smat),amat1(1:2,1:ntype))

                kb(1:ntype,1:ntype)=kb(1:ntype,1:ntype)
     &             +wei_i*matmul(matmul(transpose(amat2(1:3,1:ntype))
     &             ,bmat),amat2(1:3,1:ntype))


                call ecmat(ms(1:ntype,1:ntype),s(1,1:ntype),ntype,1)
                mass(1:ntype,1:ntype)=mass(1:ntype,1:ntype)
     &             +wei_i*ms(1:ntype,1:ntype)

           end do  ! gauss

           do noi=1,ntype
              ntemi=nea_esh(ibdy,ne,noi)
              do noj=1,ntype
                 ntemj=nea_esh(ibdy,ne,noj)
                 kks(ntemi,ntemj)=kks(ntemi,ntemj)+  ks(noi,noj)
                 kkb(ntemi,ntemj)=kkb(ntemi,ntemj)+  kb(noi,noj)
                 mms(ntemi,ntemj)=mms(ntemi,ntemj)+mass(noi,noj)
               end do
            end do
 
        end do  !element
!++++++++++++++++++++ FOR  TEST  OF  AIRBAGE INFLATION : START ++++++++++++++++++++++++++++ 

        if (ExternalPressureFlag(ibdyg)) then

        i=ibdy  
        include "distIBM_normalPressure_fn.Fi" 
        temp_ibm1=temp_ibm2*p_inflation
        do j=1,ns_ibm_r_esh(i)
             fibm1_esh(i,j)=fibm1_esh(i,j)
     &          -fibm1pres_esh(j)  /areapnt_esh(i,j)
     &          *temp_ibm1
             fibm2_esh(i,j)=fibm2_esh(i,j)
     &          -fibm2pres_esh(j)  /areapnt_esh(i,j)
     &          *temp_ibm1
             fibm3_esh(i,j)=fibm3_esh(i,j)
     &          -fibm3pres_esh(j)  /areapnt_esh(i,j)
     &          *temp_ibm1

        end do
        endif
        i=ibdy  
         if(contacttype .eq. -1) then
            do j=1,ns_ibm_r_esh(i)
                dxcont(1)=fibm1cont_esh(j)
                dxcont(2)=fibm2cont_esh(j)
                dxcont(3)=fibm3cont_esh(j)
                ddcont=sqrt(dxcont(1)**2+dxcont(2)**2+dxcont(3)**2)+eps
                normalpres_esh(j,1)=dxcont(1)/ddcont
                normalpres_esh(j,2)=dxcont(2)/ddcont
                normalpres_esh(j,3)=dxcont(3)/ddcont
            enddo
        endif
         

!++++++++++++++++++++ FOR  TEST  OF  AIRBAGE INFLATION : END   ++++++++++++++++++++++++++++ 
! construct matrix and right hand side
        i=ibdy
        i2l=i      
        i2g=ibdyg    
        do j=1,ns_ibm_r_esh(i)
           finer_1_ibm_esh(i,j)= density_coefp(i2g) *
     &    ( gx_ibmo1_esh(i,j)-gx_ibm_massiveo_esh(i,j) )/dt2
           finer_2_ibm_esh(i,j)= density_coefp(i2g) *
     &    ( gy_ibmo1_esh(i,j)-gy_ibm_massiveo_esh(i,j) )/dt2
           finer_3_ibm_esh(i,j)= density_coefp(i2g) *
     &    ( gz_ibmo1_esh(i,j)-gz_ibm_massiveo_esh(i,j) )/dt2
         end do

         aamat_esh=0.d0
         aamat_esh(1: ns_ibm_r_esh(i)+ns_ibm_i_esh(i)
     &        ,1: ns_ibm_r_esh(i)+ns_ibm_i_esh(i))
     &    =(density_coef(i2g)
     &     +cs_ibm(i2g)/2.0*dt2**0.5)*
     &        mms(1: ns_ibm_r_esh(i)+ns_ibm_i_esh(i)
     &           ,1: ns_ibm_r_esh(i)+ns_ibm_i_esh(i))
     & +dt2*kks(1: ns_ibm_r_esh(i)+ns_ibm_i_esh(i)
     &           ,1: ns_ibm_r_esh(i)+ns_ibm_i_esh(i))
     & +dt2*kkb(1: ns_ibm_r_esh(i)+ns_ibm_i_esh(i)
     &           ,1: ns_ibm_r_esh(i)+ns_ibm_i_esh(i))

        do j=1,ns_ibm_r_esh(i)+ns_ibm_i_esh(i)
           aamat_esh(j,j)=aamat_esh(j,j)+
     &     density_coefp(i2g)*areapnt_esh(i,j)
        enddo
 
        do j=1,target_num(i2g)
             k=target_point_num_esh(i,j)
             temp_ibm1=
     &          (gx_ibm_massive_esh(i,k)-target_points_esh(i,j,1))
             temp_ibm2=
     &          (gy_ibm_massive_esh(i,k)-target_points_esh(i,j,2))
             temp_ibm3=
     &          (gz_ibm_massive_esh(i,k)-target_points_esh(i,j,3))

             include "distIBM_target_k_rampfn.Fi"               
             if(time2 .le. target_t_link_esh(i,j)) then
                ksh_tmp=target_k_link_esh(i,j)*target_timefn
             else
                ksh_tmp=0.0
             endif
             force_points_esh(i,j,1)=k_link*temp_ibm1*ksh_tmp
             force_points_esh(i,j,2)=k_link*temp_ibm2*ksh_tmp
             force_points_esh(i,j,3)=k_link*temp_ibm3*ksh_tmp

             temp_ibm1=target_points_v_esh(i,j,1)
             temp_ibm2=target_points_v_esh(i,j,2)
             temp_ibm3=target_points_v_esh(i,j,3)

             temp_ibm1=vibm1_pre_esh(i,k)-temp_ibm1
             temp_ibm2=vibm2_pre_esh(i,k)-temp_ibm2
             temp_ibm3=vibm3_pre_esh(i,k)-temp_ibm3

             temp2_ibm= cs_ibm_target(i2g)*k_link*temp_ibm1*ksh_tmp
             force_points_esh(i,j,1)=force_points_esh(i,j,1)+temp2_ibm


             temp2_ibm= cs_ibm_target(i2g)*k_link*temp_ibm2*ksh_tmp
             force_points_esh(i,j,2)=force_points_esh(i,j,2)+temp2_ibm

             temp2_ibm= cs_ibm_target(i2g)*k_link*temp_ibm3*ksh_tmp
             force_points_esh(i,j,3)=force_points_esh(i,j,3)+temp2_ibm

             f_link1_esh(i,k)=force_points_esh(i,j,1)
             f_link2_esh(i,k)=force_points_esh(i,j,2)
             f_link3_esh(i,k)=force_points_esh(i,j,3)
       enddo
       
        if(ndim .gt. 2) then
          ddcont=(min_grid_x*min_grid_y*min_grid_z)**(1.0/3.0)
        else
          ddcont=sqrt(min_grid_x*min_grid_y)
        endif

!+++++++++ Solve for the contact problem +++++++
       i=ibdy
       i2g=ibdyg
       if(ContactForceFlag(i2g))then

       include "distIBM_Contact_Coeffn.Fi"  
 
       do j2=1,ns_ibm_r_esh(i)
       do i2=1,nFixcontact
                        if((
     &                     abs((gy_ibm_massive_esh(i,j2)-
     &                          xFixcontact(i2,2))/min_grid_y)
     &                    .le.12.0) .and.
     &                    (abs((gx_ibm_massive_esh(i,j2)-
     &                          xFixcontact(i2,1))/min_grid_x)
     &                    .le.12.0) .and.
     &                    (abs((gz_ibm_massive_esh(i,j2)-
     &                          xFixcontact(i2,3))/min_grid_z)
     &                    .le.12.0) ) then
                              ksh_tmp=gx_ibm_massive_esh(i,j2)

                              temp_ibm1= 
     &                              ((gy_ibm_massive_esh(i,j2)
     &                               -xFixcontact(i2,2))
     &                           /(2.0*min_grid_y) )
                              call delta_fun(delta_typey,temp_ibm1,fn2)
                              temp_ibm2= 
     &                              ((ksh_tmp
     &                               -xFixcontact(i2,1))
     &                           /(2.0*min_grid_x) )
                              call delta_fun(delta_typex,temp_ibm2,fn1)
                              if(ndim .gt. 2)  then 
                                 temp_ibm3= 
     &                              ((gz_ibm_massive_esh(i,j2)
     &                               -xFixcontact(i2,3))
     &                              /(2.0*min_grid_z) )
                                  call 
     &                              delta_fun(delta_typez,temp_ibm3,fn3)
                              else
                                   temp_ibm3=0.0
                                   fn3=1.0
                              endif
                              temp3_ibm=
     &                        sqrt((temp_ibm1*min_grid_y)**2
     &                            +(temp_ibm2*min_grid_x)**2
     &                            +(temp_ibm3*min_grid_z)**2)*2.00
     &                            +1.0d-9
                              f_impuls1_esh(i,j2)= f_impuls1_esh(i,j2)+
     &                               fn1*fn2*fn3*areapnt_esh(i,j2)
     &                               *ds_ibm_esh(i,j2)*impactpen(1)
     &                               /(min_grid_x*min_grid_y*min_grid_z)
     &                               *(ksh_tmp-xFixcontact(i2,1))
     &                               /temp3_ibm
                              f_impuls2_esh(i,j2)= f_impuls2_esh(i,j2)+
     &                               fn1*fn2*fn3*areapnt_esh(i,j2)
     &                              *ds_ibm_esh(i,j2)*impactpen(1)
     &                              /(min_grid_x*min_grid_y*min_grid_z)
     &                              *(gy_ibm_massive_esh(i,j2)
     &                               -xFixcontact(i2,2))
     &                               /temp3_ibm
                              if(ndim .gt. 2)  
     &                           f_impuls3_esh(i,j2)=
     &                              f_impuls3_esh(i,j2)+
     &                               fn1*fn2*fn3*areapnt_esh(i,j2)
     &                              *ds_ibm_esh(i,j2)*impactpen(1)
     &                              /(min_grid_x*min_grid_y*min_grid_z)
     &                              *(gz_ibm_massive_esh(i,j2)
     &                               -xFixcontact(i2,3))
     &                               /temp3_ibm
             endif
       enddo
       enddo

       if(contacttype .eq. 0) then
        if (i2g .le. nr_ibm_f) then
           do ibkt2=1,NBucketnum

             ibktmp1=mod(ibkt2,IBucketnum(1)*IBucketnum(2))
             if(ibktmp1 .eq. 0) ibktmp1=IBucketnum(1)*IBucketnum(2)

             ibktx=mod(ibktmp1,IBucketnum(1))
             if(ibktx .eq. 0) ibktx=IBucketnum(1)

             ibkty=int((ibktmp1-1)/IBucketnum(1))+1
             ibktz=int((ibkt2-1)/(IBucketnum(1)*IBucketnum(2)))+1

             ibktmin(1)=max(1,ibktx-1)
             ibktmax(1)=min(IBucketnum(1),ibktx+1)

             ibktmin(2)=max(1,ibkty-1)
             ibktmax(2)=min(IBucketnum(2),ibkty+1)

             ibktmin(3)=max(1,ibktz-1)
             ibktmax(3)=min(IBucketnum(3),ibktz+1)
             do ibkt_i=PBucket(i2g,ibkt2),PBucket(i2g,ibkt2+1)-1
                j2 =sBucket_esh(i,ibkt2,ibkt_i)
               do i2=1,nr_ibm_esh
                  i3g=Ilocglb_esh(i2)
                  if(i3g .le. nr_ibm_fb) then
                  if(i2 .ne. i) then
                    do ibkts1=ibktmin(1),ibktmax(1)
                    do ibkts2=ibktmin(2),ibktmax(2)
                    do ibkts3=ibktmin(3),ibktmax(3)
                      ibkt=
     &                       ibkts1
     &                     +(ibkts2-1)*IBucketnum(1)
     &                     +(ibkts3-1)*IBucketnum(1)*IBucketnum(2)

                      do ibkt2_i=PBucket(i3g,ibkt),PBucket(i3g,ibkt+1)-1
                         j =sBucket_esh(i2,ibkt,ibkt2_i) 
                        ksh_tmp=sqrt(
     &                    (gx_ibm_esh(i,j2)-
     &                          gx_ibm_esh(i2,j))**2+
     &                     (gy_ibm_esh(i,j2)-
     &                          gy_ibm_esh(i2,j))**2+
     &                    (gz_ibm_esh(i,j2)-
     &                          gz_ibm_esh(i2,j))**2)

                        temp_ibm2=time2  

                        if( (ksh_tmp/ddcont   .le. 6.0) 
     &                .and. (temp_ibm2 .gt. 0.05) ) then
                              temp_ibm1=max(ksh_tmp/ddcont-1.0,0.0)
                              call delta_fun(delta_typey,temp_ibm1,fn1)
                              temp3_ibm=ksh_tmp
                              dxcont(1)=temp3_ibm/ddcont
                              dxcont(2)=1.0/(1+exp(10*(dxcont(1)-1.0)))
                              dxcont(3)=impactpen(1)
     &                            +dxcont(2)*impactpen(2)


                              ksh_tmp=1.0 !max(ksh_tmp,1.0)

                              if(0 .eq. 1) then
                                fn1=1.0/4.0

                                if(temp3_ibm/ddcont>1.0)then
                                  dxcont(1)=ksh_tmp*
     &                             exp(-impactpen(1)*
     &                             (temp3_ibm/ddcont-1.0)/ksh_tmp)
                                else
                                  dxcont(1)=ksh_tmp
     &                             -impactpen(2)*(temp3_ibm/ddcont-1.0)
                                endif
                                dxcont(3)=dxcont(1)   
                              endif                              

                              f_impuls1_esh(i,j2)=
     &                                f_impuls1_esh(i,j2)+
     &                               fn1*4.0*areapnt_esh(i,j2)
     &                               *dxcont(3)*ksh_tmp
     &                               *( gx_ibm_esh(i,j2)
     &                                 -gx_ibm_esh(i2,j))
     &                               /temp3_ibm


                              f_impuls2_esh(i,j2)=
     &                                f_impuls2_esh(i,j2)+
     &                               fn1*4.0*areapnt_esh(i,j2)
     &                               *dxcont(3)*ksh_tmp
     &                              *(gy_ibm_esh(i,j2)
     &                               -gy_ibm_esh(i2,j))
     &                               /temp3_ibm
                              if(ndim .gt. 2) then
                                 f_impuls3_esh(i,j2)=
     &                               f_impuls3_esh(i,j2)+
     &                               fn1*4.0*areapnt_esh(i,j2)
     &                              *dxcont(3)*ksh_tmp
     &                              *(gz_ibm_esh(i,j2)
     &                               -gz_ibm_esh(i2,j))
     &                               /temp3_ibm

                              endif
                         endif
                     end do  !ibkt2_i
                     enddo   !ibkts1
                     enddo   !ibkts2
                     enddo   !ibkts3
                  endif
                  endif
               enddo   !i2i
               goto 2424
               i2=i
               i2g=ibdyg
               jq=1
                    do ibkts1=ibktmin(1),ibktmax(1)
                    do ibkts2=ibktmin(2),ibktmax(2)
                    do ibkts3=ibktmin(3),ibktmax(3)

                      ibkt=
     &                       ibkts1
     &                     +(ibkts2-1)*IBucketnum(1)
     &                     +(ibkts3-1)*IBucketnum(1)*IBucketnum(2)
                      do ibkt2_i=PBucket(i2g,ibkt),PBucket(i2g,ibkt+1)-1
                         j =sBucket_esh(i,ibkt,ibkt2_i) 
                         noj=1
                     if(ContactShellFlag_esh(i,j,j2) .ne. 1) then
                        ksh_tmp=sqrt(
     &                     (gy_ibm_massive_esh(i,j2)-
     &                          gy_ibm_massive_esh(i2,j))**2+
     &                    (gx_ibm_massive_esh(i,j2)-
     &                          gx_ibm_massive_esh(i2,j))**2+
     &                    (gz_ibm_massive_esh(i,j2)-
     &                          gz_ibm_massive_esh(i2,j))**2)

                        if(ksh_tmp/ddcont .le. 6.0 ) then

                               temp_ibm1=max(ksh_tmp/ddcont-1.0,0.0)
                              call delta_fun(delta_typey,temp_ibm1,fn1)
                              temp3_ibm=ksh_tmp
                              dxcont(1)=temp3_ibm/ddcont
                              dxcont(2)=1.0/(1+exp(10*(dxcont(1)-1.0)))
                              dxcont(3)=impactpen(1)
     &                            +dxcont(2)*impactpen(2)

                              ksh_tmp=1.0
                              f_impuls1_esh(i,j2)=
     &                                f_impuls1_esh(i,j2)+
     &                               fn1*4.0*areapnt_esh(i,j2)
     &                               *dxcont(3)*ksh_tmp
     &                               *( gx_ibm_esh(i,j2)
     &                                 -gx_ibm_esh(i2,j))
     &                               /temp3_ibm


                              f_impuls2_esh(i,j2)=
     &                                f_impuls2_esh(i,j2)+
     &                               fn1*4.0*areapnt_esh(i,j2)
     &                               *dxcont(3)*ksh_tmp
     &                              *(gy_ibm_esh(i,j2)
     &                               -gy_ibm_esh(i2,j))
     &                               /temp3_ibm
                              if(ndim .gt. 2) then
  

                                 f_impuls3_esh(i,j2)=
     &                               f_impuls3_esh(i,j2)+
     &                               fn1*4.0*areapnt_esh(i,j2)
     &                              *dxcont(3)*ksh_tmp
     &                              *(gz_ibm_esh(i,j2)
     &                               -gz_ibm_esh(i2,j))
     &                               /temp3_ibm

                              endif

                         endif  !gx... lt. gx ..
                     endif !ContactShellFlag
                     end do  !ibkt2_i
                     enddo   !ibkts1
                     enddo   !ibkts2
                     enddo   !ibkts3
 2424      continue
             enddo !ibkt_i
             enddo !ibkt2

             if(channelcontacty) then
             do j2=1,ns_ibm_r_esh(i)
               do i2=1,2  !with channel bndry in y
                     if(i2 .eq. 1) then
                        h_channel=gy(nygrid_ibm)
                        if (gy_ibm_massive_esh(i,j2) 
     &                      .lt. h_channel) then
                            ksh_tmp=gy_ibm_massive_esh(i,j2)
                        else
                           ksh_tmp=h_channel-1.0d-9
                        endif
                     else
                        h_channel=gy(2)
                        if (gy_ibm_massive_esh(i,j2) 
     &                      .gt. h_channel) then
                            ksh_tmp=gy_ibm_massive_esh(i,j2)
                        else
                           ksh_tmp=h_channel+1.0d-9
                        endif
                     endif
                     do j=1,nxgrid_ibm
                       do k=1,nzgrid_ibm
                        if((
     &                  abs((gy_ibm_massive_esh(i,j2)-h_channel)
     &                       /min_grid_y)
     &                 .le.12.0) .and.
     &                 (abs((gx_ibm_massive_esh(i,j2)-gx(j))
     &                       /min_grid_x)
     &                 .le.12.0) .and.
     &                 (abs((gz_ibm_massive_esh(i,j2)-gz(k))
     &                       /min_grid_z)
     &                 .le.12.0) ) then

                         temp_ibm1= 
     &                         ((ksh_tmp-h_channel)
     &                     /(min_grid_y))

                           call delta_fun(delta_typey,temp_ibm1,fn2)

                          temp_ibm2= 
     &                        ((gx_ibm_massive_esh(i,j2)-gx(j))
     &                     /(min_grid_x))

                           call delta_fun(delta_typex,temp_ibm2,fn1)

                          if(ndim .gt. 2) then
                             temp_ibm3= 
     &                          ((gz_ibm_massive_esh(i,j2)-gz(k))
     &                       /(min_grid_z) )
                           call delta_fun(delta_typez,temp_ibm3,fn3)
                          else
                             temp_ibm3=0.0
                             fn3=1.0
                          endif

                         temp3_ibm=
     &                   sqrt((temp_ibm1*min_grid_y)**2
     &                      +(temp_ibm2*min_grid_x)**2
     &                      +(temp_ibm3*min_grid_z)**2)+1.0d-9

                          f_impuls1_esh(i,j2)= f_impuls1_esh(i,j2)+
     &                               fn1*fn2*fn3*areapnt_esh(i,j2)
     &                        *ds_ibm_esh(i,j2)*impactpen(1)
     &                        /(min_grid_x*min_grid_y*min_grid_z)
     &                      *(gx_ibm_massive_esh(i,j2)-gx(j))/temp3_ibm
                          f_impuls2_esh(i,j2)= f_impuls2_esh(i,j2)+
     &                               fn1*fn2*fn3*areapnt_esh(i,j2)
     &                        *ds_ibm_esh(i,j2)*impactpen(1)
     &                        /(min_grid_x*min_grid_y*min_grid_z)
     &                        *(ksh_tmp-h_channel)/temp3_ibm
                          if(ndim .gt. 2) 
     &                    f_impuls3_esh(i,j2)= f_impuls3_esh(i,j2)+
     &                               fn1*fn2*fn3*areapnt_esh(i,j2)
     &                        *ds_ibm_esh(i,j2)*impactpen(1)
     &                        /(min_grid_x*min_grid_y*min_grid_z)
     &                      *(gz_ibm_massive_esh(i,j2)-gz(k))/temp3_ibm
                        endif
                    
                   end do !k=1,nz 
                 end do !j=1,nx
               enddo  !i2=1,2
             end do    !j2
             endif !channelcontacty

             if((channelcontactz) .and. (ndim .gt. 2)) then
             do j2=1,ns_ibm_r_esh(i)

               do i2=1,2  !with channel bndry in z

                     if(i2 .eq. 1) then
                        h_channel=gz(nzgrid_ibm)
                        if (gz_ibm_massive_esh(i,j2) 
     &                      .lt. h_channel) then
                            ksh_tmp=gz_ibm_massive_esh(i,j2)
                        else
                            ksh_tmp=h_channel-1.0d-9
                        endif
                     else
                        h_channel=gz(2)
                        if (gz_ibm_massive_esh(i,j2) 
     &                      .gt. h_channel) then
                            ksh_tmp=gz_ibm_massive_esh(i,j2)
                        else
                           ksh_tmp=h_channel+1.0d-9
                        endif
                     endif
                     do j=1,nxgrid_ibm
                       do k=1,nygrid_ibm
                        if((
     &                  abs((gy_ibm_massive_esh(i,j2)-gy(k))
     &                       /min_grid_y)
     &                 .le.12.0) .and.
     &                 (abs((gx_ibm_massive_esh(i,j2)-gx(j))
     &                       /min_grid_x)
     &                 .le.12.0) .and.
     &                 (abs((gz_ibm_massive_esh(i,j2)-h_channel)
     &                       /min_grid_z)
     &                 .le.12.0) ) then

                        temp_ibm1= 
     &                         ((gy_ibm_massive_esh(i,j2)-gy(k))
     &                       /(min_grid_y) )
                           call delta_fun(delta_typey,temp_ibm1,fn2)

                        temp_ibm2= 
     &                        ((gx_ibm_massive_esh(i,j2)-gx(j))
     &                     /(min_grid_x))
                           call delta_fun(delta_typex,temp_ibm2,fn1)

                        temp_ibm3= 
     &                          ((ksh_tmp-h_channel)
     &                       /(min_grid_z) )
                           call delta_fun(delta_typez,temp_ibm3,fn3)


                         temp3_ibm=
     &                   sqrt((temp_ibm1*min_grid_y)**2
     &                      +(temp_ibm2*min_grid_x)**2
     &                      +(temp_ibm3*min_grid_z)**2)+1.0d-9

                          f_impuls1_esh(i,j2)= f_impuls1_esh(i,j2)+
     &                               fn1*fn2*fn3*areapnt_esh(i,j2)
     &                        *ds_ibm_esh(i,j2)*impactpen(1)
     &                        /(min_grid_x*min_grid_y*min_grid_z)
     &                        *(gx_ibm_massive_esh(i,j2)-gx(j))
     &                       /temp3_ibm

                          f_impuls2_esh(i,j2)= f_impuls2_esh(i,j2)+
     &                               fn1*fn2*fn3*areapnt_esh(i,j2)
     &                        *ds_ibm_esh(i,j2)*impactpen(1)
     &                        /(min_grid_x*min_grid_y*min_grid_z)
     &                        *(gy_ibm_massive_esh(i,j2)-gy(k))
     &                       /temp3_ibm

                          f_impuls3_esh(i,j2)= f_impuls3_esh(i,j2)+
     &                               fn1*fn2*fn3*areapnt_esh(i,j2)
     &                        *ds_ibm_esh(i,j2)*impactpen(1)
     &                        /(min_grid_x*min_grid_y*min_grid_z)
     &                        *(ksh_tmp-h_channel)/temp3_ibm
                        endif
                    
                   end do !k=1,nz 
                 end do !j=1,nx
               enddo  !i2=1,2
             end do    !j2
             endif !channelcontactz
          endif   !for if ((i .le. nr_ibm_f).and.(i .ge. 1)) then
       elseif(contacttype .eq. -1) then
        if (i2g .le. nr_ibm_f) then
           do ibkt2=1,NBucketnum

             ibktmp1=mod(ibkt2,IBucketnum(1)*IBucketnum(2))
             if(ibktmp1 .eq. 0) ibktmp1=IBucketnum(1)*IBucketnum(2)

             ibktx=mod(ibktmp1,IBucketnum(1))
             if(ibktx .eq. 0) ibktx=IBucketnum(1)

             ibkty=int((ibktmp1-1)/IBucketnum(1))+1
             ibktz=int((ibkt2-1)/(IBucketnum(1)*IBucketnum(2)))+1

             ibktmin(1)=max(1,ibktx-1)
             ibktmax(1)=min(IBucketnum(1),ibktx+1)

             ibktmin(2)=max(1,ibkty-1)
             ibktmax(2)=min(IBucketnum(2),ibkty+1)

             ibktmin(3)=max(1,ibktz-1)
             ibktmax(3)=min(IBucketnum(3),ibktz+1)
             do ibkt_i=PBucket(i2g,ibkt2),PBucket(i2g,ibkt2+1)-1
                j2 =sBucket_esh(i,ibkt2,ibkt_i)
               do i2=1,nr_ibm_esh
                  i3g=Ilocglb_esh(i2)
                  if(i3g .le. nr_ibm_fb) then
                  if(i2 .ne. i) then
                    do ibkts1=ibktmin(1),ibktmax(1)
                    do ibkts2=ibktmin(2),ibktmax(2)
                    do ibkts3=ibktmin(3),ibktmax(3)
                      ibkt=
     &                       ibkts1
     &                     +(ibkts2-1)*IBucketnum(1)
     &                     +(ibkts3-1)*IBucketnum(1)*IBucketnum(2)

                      do ibkt2_i=PBucket(i3g,ibkt),PBucket(i3g,ibkt+1)-1
                         j =sBucket_esh(i2,ibkt,ibkt2_i) 

                           outcont(1)=gx_ibm_esh(i,j2)-
     &                                gx_ibm_esh(i2,j)
                           outcont(2)=gy_ibm_esh(i,j2)-
     &                                gy_ibm_esh(i2,j)
                           outcont(3)=gz_ibm_esh(i,j2)-
     &                                gz_ibm_esh(i2,j)                    
                           outcont2(1)=normalpres_esh(j2,1)
                           outcont2(2)=normalpres_esh(j2,2)
                           outcont2(3)=normalpres_esh(j2,3)
                        ksh_tmp=sqrt(
     &                     outcont(1)**2+
     &                     outcont(2)**2+
     &                     outcont(3)**2)

                     dncont=dot_product(outcont(1:3),outcont2(1:3))
                     dncont=-dncont/(abs(dncont)+eps)
!                     write(1818,2321) i,j2,i2,j,
!     &              outcont(1:3),outcont2(1:3),dncont
                        temp_ibm2=time2  

!                      write(1819,2321) i,j2,i2,j
!     &              ,-9999.0,-9999.0,ksh_tmp,ddcont,ksh_tmp/ddcont
                        if( (ksh_tmp/ddcont   .le. 10.0) 
     &                .and. (temp_ibm2 .gt. 0.05) ) then
                              temp_ibm1= 
     &                            max(ksh_tmp*dncont/ddcont,0.0)
                              call delta_fun(delta_typey,temp_ibm1,fn1)

                              temp3_ibm=ksh_tmp
                              dxcont(1)=temp_ibm1 !max(ksh_tmp*dncont,0.0)/ddcont
                              dxcont(2)=1.0/(1+exp(10*(dxcont(1)-0.0)))
                              dxcont(3)=impactpen(1)
     &                            +dxcont(2)*impactpen(2)
                              dxcont(3)=dxcont(3)*dncont



                              if(0 .eq. 1) then
                                fn1=1.0/4.0

                                if(temp3_ibm/ddcont>1.0)then
                                  dxcont(1)=ksh_tmp*
     &                             exp(-impactpen(1)*
     &                             (temp3_ibm/ddcont-1.0)/ksh_tmp)
                                else
                                  dxcont(1)=ksh_tmp
     &                             -impactpen(2)*(temp3_ibm/ddcont-1.0)
                                endif
                                dxcont(3)=dxcont(1)   
                              endif                              
!                     write(1819,2321) i,j2,i2,j,
!     &                         fn1
!     &                         ,temp_ibm1
!     &                         ,ksh_tmp
!     &                         ,dncont
!     &                         ,ddcont
!     &                         ,ksh_tmp*dncont/ddcont
!     &                         ,dxcont(1)
!     &                         ,dxcont(2)
!     &                         ,dxcont(3)
!     &                         ,temp3_ibm

                              ksh_tmp=1.0 !max(ksh_tmp,1.0)

                              f_impuls1_esh(i,j2)=
     &                                f_impuls1_esh(i,j2)+
     &                               fn1*2.0*areapnt_esh(i,j2)
     &                               *dxcont(3)*ksh_tmp
     &                               *( gx_ibm_esh(i,j2)
     &                                 -gx_ibm_esh(i2,j))
     &                               /temp3_ibm


                              f_impuls2_esh(i,j2)=
     &                                f_impuls2_esh(i,j2)+
     &                               fn1*2.0*areapnt_esh(i,j2)
     &                               *dxcont(3)*ksh_tmp
     &                              *(gy_ibm_esh(i,j2)
     &                               -gy_ibm_esh(i2,j))
     &                               /temp3_ibm
                              if(ndim .gt. 2) then
                                 f_impuls3_esh(i,j2)=
     &                               f_impuls3_esh(i,j2)+
     &                               fn1*2.0*areapnt_esh(i,j2)
     &                              *dxcont(3)*ksh_tmp
     &                              *(gz_ibm_esh(i,j2)
     &                               -gz_ibm_esh(i2,j))
     &                               /temp3_ibm

                              endif
                         endif
                     end do  !ibkt2_i
                     enddo   !ibkts1
                     enddo   !ibkts2
                     enddo   !ibkts3
                  endif
                  endif
               enddo   !i2i
               goto 2434
               i2=i
               i2g=ibdyg
               jq=1
                    do ibkts1=ibktmin(1),ibktmax(1)
                    do ibkts2=ibktmin(2),ibktmax(2)
                    do ibkts3=ibktmin(3),ibktmax(3)

                      ibkt=

     &                       ibkts1
     &                     +(ibkts2-1)*IBucketnum(1)
     &                     +(ibkts3-1)*IBucketnum(1)*IBucketnum(2)
                      do ibkt2_i=PBucket(i2g,ibkt),PBucket(i2g,ibkt+1)-1
                         j =sBucket_esh(i,ibkt,ibkt2_i) 
                         noj=1
                     if(ContactShellFlag_esh(i,j,j2) .ne. 1) then
                        ksh_tmp=sqrt(
     &                     (gy_ibm_massive_esh(i,j2)-
     &                          gy_ibm_massive_esh(i2,j))**2+
     &                    (gx_ibm_massive_esh(i,j2)-
     &                          gx_ibm_massive_esh(i2,j))**2+
     &                    (gz_ibm_massive_esh(i,j2)-
     &                          gz_ibm_massive_esh(i2,j))**2)

                        if(ksh_tmp/ddcont .le. 6.0 ) then

                               temp_ibm1=max(ksh_tmp/ddcont-1.0,0.0)
                              call delta_fun(delta_typey,temp_ibm1,fn1)
                              temp3_ibm=ksh_tmp
                              dxcont(1)=temp3_ibm/ddcont
                              dxcont(2)=1.0/(1+exp(10*(dxcont(1)-1.0)))
                              dxcont(3)=impactpen(1)
     &                            +dxcont(2)*impactpen(2)

                              ksh_tmp=1.0
                              f_impuls1_esh(i,j2)=
     &                                f_impuls1_esh(i,j2)+
     &                               fn1*4.0*areapnt_esh(i,j2)
     &                               *dxcont(3)*ksh_tmp
     &                               *( gx_ibm_esh(i,j2)
     &                                 -gx_ibm_esh(i2,j))
     &                               /temp3_ibm


                              f_impuls2_esh(i,j2)=
     &                                f_impuls2_esh(i,j2)+
     &                               fn1*4.0*areapnt_esh(i,j2)
     &                               *dxcont(3)*ksh_tmp
     &                              *(gy_ibm_esh(i,j2)
     &                               -gy_ibm_esh(i2,j))
     &                               /temp3_ibm
                              if(ndim .gt. 2) then
  

                                 f_impuls3_esh(i,j2)=
     &                               f_impuls3_esh(i,j2)+
     &                               fn1*4.0*areapnt_esh(i,j2)
     &                              *dxcont(3)*ksh_tmp
     &                              *(gz_ibm_esh(i,j2)
     &                               -gz_ibm_esh(i2,j))
     &                               /temp3_ibm

                              endif

                         endif  !gx... lt. gx ..
                     endif !ContactShellFlag
                     end do  !ibkt2_i
                     enddo   !ibkts1
                     enddo   !ibkts2
                     enddo   !ibkts3
 2434      continue
             enddo !ibkt_i
             enddo !ibkt2

             if(contactplanesFlag(ibdyg)) then
               do ibkt2=1,Ncontactplanes(ibdyg) 
                contactplane_point(1:3)= 
     &                       contactplanesPara(ibdyg,ibkt2,1:3)
                contactplane_n(1:3)=
     &                       contactplanesPara(ibdyg,ibkt2,4:6)

                dncont=0.0
                do i2=1,3
                   dncont=dncont+contactplane_n(i2) 
     &                          *contactplane_point(i2)
                enddo
                contactplane_n(4)=-dncont  !plane defined as ax+by+cz+d=0, here we save d

               temp_ibm2=s_function((time2-contact_time_esh(i,1))
     &                              /contact_time_esh(i,2) )
                                
               temp_ibm2=time2

               do j2=1,ns_ibm_r_esh(i)
                  ksh_tmp=contactplane_n(1) 
     &                   *gx_ibm_massive_esh(i,j2) 
     &                   +contactplane_n(2) 
     &                   *gy_ibm_massive_esh(i,j2) 
     &                   +contactplane_n(3) 
     &                   *gz_ibm_massive_esh(i,j2) 
     &                   +contactplane_n(4)
                
                  if(ksh_tmp/ddcont   .le. 8.0) then

                              temp_ibm1= 
     &                            max(ksh_tmp/(2*ddcont)-0.5,0.0)
                              call delta_fun(delta_typey,temp_ibm1,fn1)
 

                              temp3_ibm=ksh_tmp/(2*ddcont)-0.5
                              dxcont(1)=temp3_ibm     !max(ksh_tmp*dncont,0.0)/ddcont

                              if(temp3_ibm .le.0.0) then 
                                dxcont(2)=2.0*(
     &                         1.0/(1+exp(6.0*(dxcont(1)-0.0)))-0.5)
                              else
                                dxcont(2)=0.0
                              endif
                              dxcont(3)=(impactpen(1)
     &                            +dxcont(2)*impactpen(2))
     &                            *contact_coef_esh(i,1,j2)*temp_ibm2

                              f_impuls1_esh(i,j2)=
     &                                f_impuls1_esh(i,j2)+
     &                               fn1*2.0*areapnt_esh(i,j2)
     &                               *dxcont(3)
     &                               *contactplane_n(1)

                              f_impuls2_esh(i,j2)=
     &                                f_impuls2_esh(i,j2)+
     &                               fn1*2.0*areapnt_esh(i,j2)
     &                               *dxcont(3)
     &                              *contactplane_n(2)

                              if(ndim .gt. 2) then
                                 f_impuls3_esh(i,j2)=
     &                               f_impuls3_esh(i,j2)+
     &                               fn1*2.0*areapnt_esh(i,j2)
     &                              *dxcont(3)
     &                              *contactplane_n(3)
                              endif
                   endif
                enddo !j2
             enddo !ibkt2
             endif !contactplanesFlag

             if(channelcontacty) then
             do j2=1,ns_ibm_r_esh(i)
               do i2=1,2  !with channel bndry in y
                     if(i2 .eq. 1) then
                        h_channel=gy(nygrid_ibm)
                        if (gy_ibm_massive_esh(i,j2) 
     &                      .lt. h_channel) then
                            ksh_tmp=gy_ibm_massive_esh(i,j2)
                        else
                           ksh_tmp=h_channel-1.0d-9
                        endif
                     else
                        h_channel=gy(2)
                        if (gy_ibm_massive_esh(i,j2) 
     &                      .gt. h_channel) then
                            ksh_tmp=gy_ibm_massive_esh(i,j2)
                        else
                           ksh_tmp=h_channel+1.0d-9
                        endif
                     endif
                     do j=1,nxgrid_ibm
                       do k=1,nzgrid_ibm
                        if((
     &                  abs((gy_ibm_massive_esh(i,j2)-h_channel)
     &                       /min_grid_y)
     &                 .le.12.0) .and.
     &                 (abs((gx_ibm_massive_esh(i,j2)-gx(j))
     &                       /min_grid_x)
     &                 .le.12.0) .and.
     &                 (abs((gz_ibm_massive_esh(i,j2)-gz(k))
     &                       /min_grid_z)
     &                 .le.12.0) ) then

                         temp_ibm1= 
     &                         ((ksh_tmp-h_channel)
     &                     /(min_grid_y))

                           call delta_fun(delta_typey,temp_ibm1,fn2)

                          temp_ibm2= 
     &                        ((gx_ibm_massive_esh(i,j2)-gx(j))
     &                     /(min_grid_x))

                           call delta_fun(delta_typex,temp_ibm2,fn1)

                          if(ndim .gt. 2) then
                             temp_ibm3= 
     &                          ((gz_ibm_massive_esh(i,j2)-gz(k))
     &                       /(min_grid_z) )
                           call delta_fun(delta_typez,temp_ibm3,fn3)
                          else
                             temp_ibm3=0.0
                             fn3=1.0
                          endif

                         temp3_ibm=
     &                   sqrt((temp_ibm1*min_grid_y)**2
     &                      +(temp_ibm2*min_grid_x)**2
     &                      +(temp_ibm3*min_grid_z)**2)+1.0d-9

                          f_impuls1_esh(i,j2)= f_impuls1_esh(i,j2)+
     &                               fn1*fn2*fn3*areapnt_esh(i,j2)
     &                        *ds_ibm_esh(i,j2)*impactpen(1)
     &                        /(min_grid_x*min_grid_y*min_grid_z)
     &                      *(gx_ibm_massive_esh(i,j2)-gx(j))/temp3_ibm
                          f_impuls2_esh(i,j2)= f_impuls2_esh(i,j2)+
     &                               fn1*fn2*fn3*areapnt_esh(i,j2)
     &                        *ds_ibm_esh(i,j2)*impactpen(1)
     &                        /(min_grid_x*min_grid_y*min_grid_z)
     &                        *(ksh_tmp-h_channel)/temp3_ibm
                          if(ndim .gt. 2) 
     &                    f_impuls3_esh(i,j2)= f_impuls3_esh(i,j2)+
     &                               fn1*fn2*fn3*areapnt_esh(i,j2)
     &                        *ds_ibm_esh(i,j2)*impactpen(1)
     &                        /(min_grid_x*min_grid_y*min_grid_z)
     &                      *(gz_ibm_massive_esh(i,j2)-gz(k))/temp3_ibm
                        endif
                    
                   end do !k=1,nz 
                 end do !j=1,nx
               enddo  !i2=1,2
             end do    !j2
             endif !channelcontacty

             if((channelcontactz) .and. (ndim .gt. 2)) then
             do j2=1,ns_ibm_r_esh(i)

               do i2=1,2  !with channel bndry in z

                     if(i2 .eq. 1) then
                        h_channel=gz(nzgrid_ibm)
                        if (gz_ibm_massive_esh(i,j2) 
     &                      .lt. h_channel) then
                            ksh_tmp=gz_ibm_massive_esh(i,j2)
                        else
                            ksh_tmp=h_channel-1.0d-9
                        endif
                     else
                        h_channel=gz(2)
                        if (gz_ibm_massive_esh(i,j2) 
     &                      .gt. h_channel) then
                            ksh_tmp=gz_ibm_massive_esh(i,j2)
                        else
                           ksh_tmp=h_channel+1.0d-9
                        endif
                     endif
                     do j=1,nxgrid_ibm
                       do k=1,nygrid_ibm
                        if((
     &                  abs((gy_ibm_massive_esh(i,j2)-gy(k))
     &                       /min_grid_y)
     &                 .le.12.0) .and.
     &                 (abs((gx_ibm_massive_esh(i,j2)-gx(j))
     &                       /min_grid_x)
     &                 .le.12.0) .and.
     &                 (abs((gz_ibm_massive_esh(i,j2)-h_channel)
     &                       /min_grid_z)
     &                 .le.12.0) ) then

                        temp_ibm1= 
     &                         ((gy_ibm_massive_esh(i,j2)-gy(k))
     &                       /(min_grid_y) )
                           call delta_fun(delta_typey,temp_ibm1,fn2)

                        temp_ibm2= 
     &                        ((gx_ibm_massive_esh(i,j2)-gx(j))
     &                     /(min_grid_x))
                           call delta_fun(delta_typex,temp_ibm2,fn1)

                        temp_ibm3= 
     &                          ((ksh_tmp-h_channel)
     &                       /(min_grid_z) )
                           call delta_fun(delta_typez,temp_ibm3,fn3)


                         temp3_ibm=
     &                   sqrt((temp_ibm1*min_grid_y)**2
     &                      +(temp_ibm2*min_grid_x)**2
     &                      +(temp_ibm3*min_grid_z)**2)+1.0d-9

                          f_impuls1_esh(i,j2)= f_impuls1_esh(i,j2)+
     &                               fn1*fn2*fn3*areapnt_esh(i,j2)
     &                        *ds_ibm_esh(i,j2)*impactpen(1)
     &                        /(min_grid_x*min_grid_y*min_grid_z)
     &                        *(gx_ibm_massive_esh(i,j2)-gx(j))
     &                       /temp3_ibm

                          f_impuls2_esh(i,j2)= f_impuls2_esh(i,j2)+
     &                               fn1*fn2*fn3*areapnt_esh(i,j2)
     &                        *ds_ibm_esh(i,j2)*impactpen(1)
     &                        /(min_grid_x*min_grid_y*min_grid_z)
     &                        *(gy_ibm_massive_esh(i,j2)-gy(k))
     &                       /temp3_ibm

                          f_impuls3_esh(i,j2)= f_impuls3_esh(i,j2)+
     &                               fn1*fn2*fn3*areapnt_esh(i,j2)
     &                        *ds_ibm_esh(i,j2)*impactpen(1)
     &                        /(min_grid_x*min_grid_y*min_grid_z)
     &                        *(ksh_tmp-h_channel)/temp3_ibm
                        endif
                    
                   end do !k=1,nz 
                 end do !j=1,nx
               enddo  !i2=1,2
             end do    !j2
             endif !channelcontactz
          endif   !for if ((i .le. nr_ibm_f).and.(i .ge. 1)) then
       elseif(contacttype .eq. 1) then
        if (i2g .le. nr_ibm_f) then

           do ibkt2=1,NBucketnum

             ibktmp1=mod(ibkt2,IBucketnum(1)*IBucketnum(2))
             if(ibktmp1 .eq. 0) ibktmp1=IBucketnum(1)*IBucketnum(2)

             ibktx=mod(ibktmp1,IBucketnum(1))
             if(ibktx .eq. 0) ibktx=IBucketnum(1)

             ibkty=int((ibktmp1-1)/IBucketnum(1))+1
             ibktz=int((ibkt2-1)/(IBucketnum(1)*IBucketnum(2)))+1

             ibktmin(1)=max(1,ibktx-1)
             ibktmax(1)=min(IBucketnum(1),ibktx+1)

             ibktmin(2)=max(1,ibkty-1)
             ibktmax(2)=min(IBucketnum(2),ibkty+1)

             ibktmin(3)=max(1,ibktz-1)
             ibktmax(3)=min(IBucketnum(3),ibktz+1)

             do ibkt_i=1,NBucket(i2g,ibkt2)
                j2 =sBucket_esh(i,ibkt2,ibkt_i)

               do i2=1,nr_ibm_esh
                  i3g=Ilocglb_esh(i2)
                  if(i3g .le. nr_ibm_fb) then
                  if(i2 .ne. i) then
                    do ibkts1=ibktmin(1),ibktmax(1)
                    do ibkts2=ibktmin(2),ibktmax(2)
                    do ibkts3=ibktmin(3),ibktmax(3)
                      ibkt=
     &                       ibkts1
     &                     +(ibkts2-1)*IBucketnum(1)
     &                     +(ibkts3-1)*IBucketnum(1)*IBucketnum(2)

                      do ibkt2_i=PBucket(i3g,ibkt),PBucket(i3g,ibkt+1)-1
                         j =sBucket_esh(i2,ibkt,ibkt2_i) 
                        if((
     &                     abs((gy_ibm_massive_esh(i,j2)-
     &                          gy_ibm_massive_esh(i2,j))/min_grid_y)
     &                    .le.12.0) .and.
     &                    (abs((gx_ibm_massive_esh(i,j2)-
     &                          gx_ibm_massive_esh(i2,j))/min_grid_x)
     &                    .le.12.0) .and.
     &                    (abs((gz_ibm_massive_esh(i,j2)-
     &                          gz_ibm_massive_esh(i2,j))/min_grid_z)
     &                    .le.12.0) ) then
                              ksh_tmp=gx_ibm_massive_esh(i,j2)

                              temp_ibm1= 
     &                              ((gy_ibm_massive_esh(i,j2)
     &                               -gy_ibm_massive_esh(i2,j))
     &                           /(2.0*min_grid_y) )
                              call delta_fun(delta_typey,temp_ibm1,fn2)
                              temp_ibm2= 
     &                              ((ksh_tmp
     &                               -gx_ibm_massive_esh(i2,j))
     &                           /(2.0*min_grid_x) )
                              call delta_fun(delta_typex,temp_ibm2,fn1)
                              if(ndim .gt. 2)  then 
                                 temp_ibm3= 
     &                              ((gz_ibm_massive_esh(i,j2)
     &                               -gz_ibm_massive_esh(i2,j))
     &                              /(2.0*min_grid_z) )
                                  call 
     &                              delta_fun(delta_typez,temp_ibm3,fn3)
                              else
                                   temp_ibm3=0.0
                                   fn3=1.0
                              endif
                              temp3_ibm=
     &                        sqrt((temp_ibm1*min_grid_y)**2
     &                            +(temp_ibm2*min_grid_x)**2
     &                            +(temp_ibm3*min_grid_z)**2)*2.00
     &                            +1.0d-9
                              f_impuls1_esh(i,j2)= f_impuls1_esh(i,j2)+
     &                               fn1*fn2*fn3*areapnt_esh(i,j2)
     &                               *ds_ibm_esh(i,j2)*impactpen(1)
     &                               /(min_grid_x*min_grid_y*min_grid_z)
     &                               *(ksh_tmp-gx_ibm_massive_esh(i2,j))
     &                               /temp3_ibm
                              f_impuls2_esh(i,j2)= f_impuls2_esh(i,j2)+
     &                               fn1*fn2*fn3*areapnt_esh(i,j2)
     &                              *ds_ibm_esh(i,j2)*impactpen(1)
     &                              /(min_grid_x*min_grid_y*min_grid_z)
     &                              *(gy_ibm_massive_esh(i,j2)
     &                               -gy_ibm_massive_esh(i2,j))
     &                               /temp3_ibm
                              if(ndim .gt. 2)  
     &                           f_impuls3_esh(i,j2)=
     &                              f_impuls3_esh(i,j2)+
     &                               fn1*fn2*fn3*areapnt_esh(i,j2)
     &                              *ds_ibm_esh(i,j2)*impactpen(1)
     &                              /(min_grid_x*min_grid_y*min_grid_z)
     &                              *(gz_ibm_massive_esh(i,j2)
     &                               -gz_ibm_massive_esh(i2,j))
     &                               /temp3_ibm
                         endif
                     end do  !ibkt2_i
                     enddo   !ibkts1
                     enddo   !ibkts2
                     enddo   !ibkts3
                  endif
                  endif
               enddo   !i2i
               i2=i
               i2g=ibdyg
               jq=1
                    do ibkts1=ibktmin(1),ibktmax(1)
                    do ibkts2=ibktmin(2),ibktmax(2)
                    do ibkts3=ibktmin(3),ibktmax(3)

                      ibkt=
     &                       ibkts1

     &                     +(ibkts2-1)*IBucketnum(1)
     &                     +(ibkts3-1)*IBucketnum(1)*IBucketnum(2)
                      do ibkt2_i=PBucket(i2g,ibkt),PBucket(i2g,ibkt+1)-1
                         j =sBucket_esh(i,ibkt,ibkt2_i) 
                         noj=1
                     if(ContactShellFlag_esh(i,j,j2) .ne. 1) then
                        if((
     &                  abs((gy_ibm_massive_esh(i,j2)
     &                      -gy_ibm_massive_esh(i2,j))
     &                      /min_grid_y)
     &                 .le.3.0) .and.
     &                 (abs((gx_ibm_massive_esh(i,j2)
     &                      -gx_ibm_massive_esh(i2,j))
     &                      /min_grid_x)
     &                 .le.3.0) .and.
     &                 (abs((gz_ibm_massive_esh(i,j2)
     &                      -gz_ibm_massive_esh(i2,j))
     &                      /min_grid_z)
     &                 .le.3.0) ) then
                          ksh_tmp=gx_ibm_massive_esh(i,j2)

                          temp_ibm1= 
     &                     ((gy_ibm_massive_esh(i,j2)
     &                      -gy_ibm_massive_esh(i2,j))
     &                     /(min_grid_y) )
                         call delta_fun(delta_typey,temp_ibm1,fn2)

                        temp_ibm2= 
     &                     ((ksh_tmp
     &                      -gx_ibm_massive_esh(i2,j))
     &                     /(min_grid_x) )
                         call delta_fun(delta_typex,temp_ibm2,fn1)

                         if(ndim .gt. 2) then
                             temp_ibm3= 
     &                    ((gz_ibm_massive_esh(i,j2)
     &                     -gz_ibm_massive_esh(i2,j))
     &                      /(min_grid_z) )
                           call delta_fun(delta_typez,temp_ibm3,fn3)
                         else
                             temp_ibm3=0.0;fn3=1.0
                         endif

                        temp3_ibm=
     &                  sqrt((temp_ibm1*min_grid_y)**2
     &                      +(temp_ibm2*min_grid_x)**2
     &                      +(temp_ibm3*min_grid_z)**2)+ 1.0d-9

                 f_impuls1_esh(i,j2)= f_impuls1_esh(i,j2)+
     &                               fn1*fn2*fn3*areapnt_esh(i,j2)
     &                        *ds_ibm_esh(i,j2)*impactpen(1)
     &                        /(min_grid_x*min_grid_y*min_grid_z)
     &                        *(ksh_tmp
     &                          -gx_ibm_massive_esh(i2,j))/temp3_ibm
                 f_impuls2_esh(i,j2)= f_impuls2_esh(i,j2)+
     &                               fn1*fn2*fn3*areapnt_esh(i,j2)
     &                        *ds_ibm_esh(i,j2)*impactpen(1)
     &                        /(min_grid_x*min_grid_y*min_grid_z)
     &                        *(gy_ibm_massive_esh(i,j2)
     &                         -gy_ibm_massive_esh(i2,j))/temp3_ibm
                 if(ndim .gt. 2)  
     &           f_impuls3_esh(i,j2)= f_impuls3_esh(i,j2)+
     &                               fn1*fn2*fn3*areapnt_esh(i,j2)
     &                        *ds_ibm_esh(i,j2)*impactpen(1)
     &                        /(min_grid_x*min_grid_y*min_grid_z)
     &                        *(gz_ibm_massive_esh(i,j2)
     &                        -gz_ibm_massive_esh(i2,j))/temp3_ibm

                         endif  !gx... lt. gx ..
                     endif !ContactShellFlag
                     end do  !ibkt2_i
                     enddo   !ibkts1
                     enddo   !ibkts2
                     enddo   !ibkts3
             enddo !ibkt_i
             enddo !ibkt2

             if(channelcontacty) then
             do j2=1,ns_ibm_r_esh(i)
               do i2=1,2  !with channel bndry in y
                     if(i2 .eq. 1) then
                        h_channel=gy(nygrid_ibm)
                        if (gy_ibm_massive_esh(i,j2) 
     &                      .lt. h_channel) then
                            ksh_tmp=gy_ibm_massive_esh(i,j2)
                        else
                           ksh_tmp=h_channel-1.0d-9
                        endif
                     else
                        h_channel=gy(2)
                        if (gy_ibm_massive_esh(i,j2) 
     &                      .gt. h_channel) then
                            ksh_tmp=gy_ibm_massive_esh(i,j2)
                        else
                           ksh_tmp=h_channel+1.0d-9
                        endif
                     endif
                     do j=1,nxgrid_ibm
                       do k=1,nzgrid_ibm
                        if((
     &                  abs((gy_ibm_massive_esh(i,j2)-h_channel)
     &                       /min_grid_y)
     &                 .le.12.0) .and.
     &                 (abs((gx_ibm_massive_esh(i,j2)-gx(j))
     &                       /min_grid_x)
     &                 .le.12.0) .and.
     &                 (abs((gz_ibm_massive_esh(i,j2)-gz(k))
     &                       /min_grid_z)
     &                 .le.12.0) ) then

                         temp_ibm1= 
     &                         ((ksh_tmp-h_channel)
     &                     /(min_grid_y))

                           call delta_fun(delta_typey,temp_ibm1,fn2)

                          temp_ibm2= 
     &                        ((gx_ibm_massive_esh(i,j2)-gx(j))
     &                     /(min_grid_x))

                           call delta_fun(delta_typex,temp_ibm2,fn1)

                          if(ndim .gt. 2) then
                             temp_ibm3= 
     &                          ((gz_ibm_massive_esh(i,j2)-gz(k))
     &                       /(min_grid_z) )
                           call delta_fun(delta_typez,temp_ibm3,fn3)
                          else
                             temp_ibm3=0.0
                             fn3=1.0
                          endif

                         temp3_ibm=
     &                   sqrt((temp_ibm1*min_grid_y)**2
     &                      +(temp_ibm2*min_grid_x)**2
     &                      +(temp_ibm3*min_grid_z)**2)+1.0d-9

                          f_impuls1_esh(i,j2)= f_impuls1_esh(i,j2)+
     &                               fn1*fn2*fn3*areapnt_esh(i,j2)
     &                        *ds_ibm_esh(i,j2)*impactpen(1)
     &                        /(min_grid_x*min_grid_y*min_grid_z)
     &                      *(gx_ibm_massive_esh(i,j2)-gx(j))/temp3_ibm
                          f_impuls2_esh(i,j2)= f_impuls2_esh(i,j2)+
     &                               fn1*fn2*fn3*areapnt_esh(i,j2)
     &                        *ds_ibm_esh(i,j2)*impactpen(1)
     &                        /(min_grid_x*min_grid_y*min_grid_z)
     &                        *(ksh_tmp-h_channel)/temp3_ibm
                          if(ndim .gt. 2) 
     &                    f_impuls3_esh(i,j2)= f_impuls3_esh(i,j2)+
     &                               fn1*fn2*fn3*areapnt_esh(i,j2)
     &                        *ds_ibm_esh(i,j2)*impactpen(1)
     &                        /(min_grid_x*min_grid_y*min_grid_z)
     &                      *(gz_ibm_massive_esh(i,j2)-gz(k))/temp3_ibm
                        endif
                    
                   end do !k=1,nz 
                 end do !j=1,nx
               enddo  !i2=1,2
             end do    !j2
             endif !channelcontacty

             if((channelcontactz) .and. (ndim .gt. 2)) then
             do j2=1,ns_ibm_r_esh(i)

               do i2=1,2  !with channel bndry in z

                     if(i2 .eq. 1) then
                        h_channel=gz(nzgrid_ibm)
                        if (gz_ibm_massive_esh(i,j2) 
     &                      .lt. h_channel) then
                            ksh_tmp=gz_ibm_massive_esh(i,j2)
                        else
                            ksh_tmp=h_channel-1.0d-9
                        endif
                     else
                        h_channel=gz(2)
                        if (gz_ibm_massive_esh(i,j2) 
     &                      .gt. h_channel) then
                            ksh_tmp=gz_ibm_massive_esh(i,j2)
                        else
                           ksh_tmp=h_channel+1.0d-9
                        endif
                     endif
                     do j=1,nxgrid_ibm
                       do k=1,nygrid_ibm
                        if((
     &                  abs((gy_ibm_massive_esh(i,j2)-gy(k))
     &                       /min_grid_y)
     &                 .le.12.0) .and.
     &                 (abs((gx_ibm_massive_esh(i,j2)-gx(j))
     &                       /min_grid_x)
     &                 .le.12.0) .and.
     &                 (abs((gz_ibm_massive_esh(i,j2)-h_channel)
     &                       /min_grid_z)
     &                 .le.12.0) ) then

                        temp_ibm1= 
     &                         ((gy_ibm_massive_esh(i,j2)-gy(k))
     &                       /(min_grid_y) )
                           call delta_fun(delta_typey,temp_ibm1,fn2)

                        temp_ibm2= 
     &                        ((gx_ibm_massive_esh(i,j2)-gx(j))
     &                     /(min_grid_x))
                           call delta_fun(delta_typex,temp_ibm2,fn1)

                        temp_ibm3= 
     &                          ((ksh_tmp-h_channel)
     &                       /(min_grid_z) )
                           call delta_fun(delta_typez,temp_ibm3,fn3)


                         temp3_ibm=
     &                   sqrt((temp_ibm1*min_grid_y)**2
     &                      +(temp_ibm2*min_grid_x)**2
     &                      +(temp_ibm3*min_grid_z)**2)+1.0d-9

                          f_impuls1_esh(i,j2)= f_impuls1_esh(i,j2)+
     &                               fn1*fn2*fn3*areapnt_esh(i,j2)
     &                        *ds_ibm_esh(i,j2)*impactpen(1)
     &                        /(min_grid_x*min_grid_y*min_grid_z)
     &                        *(gx_ibm_massive_esh(i,j2)-gx(j))
     &                       /temp3_ibm

                          f_impuls2_esh(i,j2)= f_impuls2_esh(i,j2)+
     &                               fn1*fn2*fn3*areapnt_esh(i,j2)
     &                        *ds_ibm_esh(i,j2)*impactpen(1)
     &                        /(min_grid_x*min_grid_y*min_grid_z)
     &                        *(gy_ibm_massive_esh(i,j2)-gy(k))
     &                       /temp3_ibm

                          f_impuls3_esh(i,j2)= f_impuls3_esh(i,j2)+
     &                               fn1*fn2*fn3*areapnt_esh(i,j2)
     &                        *ds_ibm_esh(i,j2)*impactpen(1)
     &                        /(min_grid_x*min_grid_y*min_grid_z)
     &                        *(ksh_tmp-h_channel)/temp3_ibm
                        endif
                    
                   end do !k=1,nz 
                 end do !j=1,nx
               enddo  !i2=1,2
             end do    !j2
             endif !channelcontactz
          endif   !for if ((i .le. nr_ibm_f).and.(i .ge. 1)) then
      elseif( contacttype .eq. 2) then
        i2g=ibdyg
        if (i2g .le. nr_ibm_f) then
           if(.not. allocated(l_loc))  then 

              allocate(l_loc(n_jtypeall,ntypeMAx_loc)
     &           ,iv_loc(n_jtypeall,ntypeMAx_loc,ntypeMAx_loc)
     &           ,phi_loc(n_jtypeall,0:2,ntypeMAx_loc,12)
     &           )

           do j2=1,n_jtypeall
              jtype=j2
              itype=jtypeall(j2)
              open(8813,file = 'shapedata.in',  form = 'formatted')
              call matreadContact
     &        (jtype,itype,l_loc,iv_loc,phi_loc,n_jtypeall,ntypeMAx_loc)
               close(8813)
            enddo
           endif
           do ibkt2=1,NBucketnum

             ibktmp1=mod(ibkt2,IBucketnum(1)*IBucketnum(2))
             if(ibktmp1 .eq. 0) ibktmp1=IBucketnum(1)*IBucketnum(2)

             ibktx=mod(ibktmp1,IBucketnum(1))
             if(ibktx .eq. 0) ibktx=IBucketnum(1)

             ibkty=int((ibktmp1-1)/IBucketnum(1))+1
             ibktz=int((ibkt2-1)/(IBucketnum(1)*IBucketnum(2)))+1

             ibktmin(1)=max(1,ibktx-1)
             ibktmax(1)=min(IBucketnum(1),ibktx+1)

             ibktmin(2)=max(1,ibkty-1)
             ibktmax(2)=min(IBucketnum(2),ibkty+1)

             ibktmin(3)=max(1,ibktz-1)
             ibktmax(3)=min(IBucketnum(3),ibktz+1)

             do ibkt_i=1,NBucket(ibdyg,ibkt2)
                ne =sBucket_esh(ibdyg,ibkt2,ibkt_i)


         jtype=neatype_esh(ibdy,ne)
         itype=jtypeall(jtype)
         if(itype .eq. 0) then
           ntype=12  
         else
           ntype=6+itype
         end if
         if(itype .eq. 0) then
              ItypecontELE1(1)=4
              ItypecontELE1(2)=7
              ItypecontELE1(3)=8


         else              
              ItypecontELE1(1)=1
              ItypecontELE1(2)=2
              ItypecontELE1(3)=itype+1
         endif

         do nos=1,ntype
            ntem=nea_esh(ibdy,ne,nos)
            noj=1
            x(nos,noj)=gx_ibm_massive_esh(ibdy,ntem)
            noj=2
            x(nos,noj)=gy_ibm_massive_esh(ibdy,ntem)
            noj=3
            x(nos,noj)=gz_ibm_massive_esh(ibdy,ntem)

            noj=1
            xvv(nos,noj)=vibm1_esh(ibdy,ntem)
            noj=2
            xvv(nos,noj)=vibm2_esh(ibdy,ntem)
            noj=3
            xvv(nos,noj)=vibm3_esh(ibdy,ntem)


            do noj=1,2
               sx(noj,nos)=coorcurv_esh(ibdy,ne,nos,noj)

            enddo
         enddo
         do j2=1,ngauCont

            gau_i(1:2,j2)=gauCont(1:2,j2)
            gau_i(3,j2)=1.0d0-gauCont(1,j2)-gauCont(2,j2)


            wei_i=weiCont(j2)

            s(1,1:ntype)=nnCont(jtype,j2,1:ntype)
            dsdv(1,1:ntype)=dnndvCont(jtype,j2,1:ntype)
            dsdv(2,1:ntype)=dnndwCont(jtype,j2,1:ntype)


             do noi=1,2
               do noj=1,2
                  jmat(noj,noi)=
     &              dot_product(dsdv(noj,1:ntype),sx(noi,1:ntype))
               end do
             end do 
             wei_i=wei_i
     &             *abs(jmat(1,1)*jmat(2,2)-jmat(1,2)*jmat(2,1))

            do noj=1,3
                  XP1cont(noj)=dot_product(s(1,1:ntype),x(1:ntype, noj))
                  VP1cont(noj)=
     &                       dot_product(s(1,1:ntype),xvv(1:ntype, noj))
                do noi=1,2
                   dXP1cont(noi,noj)=
     &               dot_product(dsdv(noi,1:ntype),x(1:ntype,noj))
                end do

            end do


         call crossvec(Normalcont1(1:3),dXP1cont(1,1:3),dXP1cont(2,1:3))



               do i2=1,nr_ibm_esh
                  i3g=Ilocglb_esh(i2)
                  if(i3g .le. nr_ibm_fb) then
                  if(i2 .ne. i) then
                    do ibkts1=ibktmin(1),ibktmax(1)
                    do ibkts2=ibktmin(2),ibktmax(2)
                    do ibkts3=ibktmin(3),ibktmax(3)
                      ibkt=
     &                       ibkts1
     &                     +(ibkts2-1)*IBucketnum(1)
     &                     +(ibkts3-1)*IBucketnum(1)*IBucketnum(2)
                      do ibkt2_i=PBucket(i3g,ibkt),PBucket(i3g,ibkt+1)-1
                         ne2 =sBucket_esh(i2,ibkt,ibkt2_i)  

                     jtype2=neatype_esh(i2,ne2)
                     itype2=jtypeall(jtype2)
                     if(itype2 .eq. 0) then
                        ntype2=12  
                     else
                        ntype2=6+itype2
                     end if   
                     if(itype2 .eq. 0) then
                       ItypecontELE(1)=4
                       ItypecontELE(2)=7
                       ItypecontELE(3)=8
                     else              
                       ItypecontELE(1)=1
                       ItypecontELE(2)=2
                       ItypecontELE(3)=itype2+1
                     endif
                     do nos2=1,3
                        ntem2=nea_esh(ibdy,ne2,ItypecontELE(nos2))
                        noj=1
                        Xcont(nos2,noj)=gx_ibm_massive_esh(i2,ntem2)
                        noj=2
                        xcont(nos2,noj)=gy_ibm_massive_esh(i2,ntem2)
                        noj=3
                        xcont(nos2,noj)=gz_ibm_massive_esh(i2,ntem2)
                        noj=1
                        Vcont(nos2,noj)=vibm1_esh(i2,ntem2)
                        noj=2
                        Vcont(nos2,noj)=vibm2_esh(i2,ntem2)
                        noj=3
                        Vcont(nos2,noj)=vibm3_esh(i2,ntem2)
                     enddo

                     call ClosestPtPointTriangle(
     &                        outcont(1:3),XP2cont(1:3),XP1cont(1:3)
     &                       ,Xcont(1,1:3), Xcont(2,1:3),Xcont(3,1:3) ) 
                     dxcont(1:3)=XP2cont(1:3)-XP1cont(1:3)
                     ddcont=sqrt(dot_product(dxcont(1:3),dxcont(1:3)))

                     if (ddcont .gt. Ccont(1)) goto 1260
                     do nos=1,ntype2
                       ntem2=nea_esh(ibdy,ne2,nos)
                       noj=1
                       xcont(nos,noj)=gx_ibm_massive_esh(ibdy,ntem2)
                       noj=2
                       xcont(nos,noj)=gy_ibm_massive_esh(ibdy,ntem2)
                       noj=3
                       xcont(nos,noj)=gz_ibm_massive_esh(ibdy,ntem2)
                       noj=1
                       Vcont(nos,noj)=vibm1_esh(ibdy,ntem2)
                       noj=2
                       Vcont(nos,noj)=vibm2_esh(ibdy,ntem2)
                       noj=3
                       Vcont(nos,noj)=vibm3_esh(ibdy,ntem2)
                     enddo
                     outcont(1:3)=1.0d0/3.0d0

                     Call ClosestPointHighOrder(outcont(1:3)
     &                               ,XP2cont(1:3),VP2cont(1:3)
     &                               ,Normalcont2(1:3)
     &                               ,XP1cont(1:3)
     &                               ,xcont(1:ntypeMAx_loc,1:3)
     &                               ,vcont(1:ntypeMAx_loc,1:3)
     &                               ,ntype2,jtype2
     &                               ,itype2,l_loc,iv_loc,phi_loc
     &                               ,n_jtypeall,ntypeMAx_loc
     &                               ,floor(Ccont(6)+0.1)
     &                               ,Ccont(7)
     &                               ,Ccont(8))
                     if (outcont(1) .lt. -2.0d0) goto 1260   !outside the element
                     dxcont(1:3)=XP2cont(1:3)-XP1cont(1:3)
                     ddcont=sqrt(dot_product(dxcont(1:3),dxcont(1:3)))

                     if (ddcont .gt. Ccont(2)) goto 1260
                      ddcont=
     &                       sqrt(dot_product
     &                       (Normalcont1(1:3),Normalcont2(1:3))
     &                       )                    
                     if (ddcont .lt. Ccont(0)) goto 1260
                     dvcont(1:3)=VP2cont(1:3)-VP1cont(1:3)
                     
                     dncont=dot_product(dxcont(1:3),Normalcont2(1:3))
                    dnvcont=-dot_product(dvcont(1:3),Normalcont2(1:3))
                     Fcont=
     &                     ContactForce(
     &                                  dncont,dnvcont,Ccont(15)
     &                                 ,Ccont(3),Ccont(4)
     &                                 ,Ccont(5),Ccont(10))
                     do nos=1,3
                        ntem=nea_esh(ibdy,ne,ItypecontELE1(nos))
                        f_impuls1_esh(ibdy,ntem)= 
     &                        f_impuls1_esh(ibdy,ntem)+wei_i*
     &                        Fcont*Normalcont1(1)*gau_i(nos,j2)                    
                        f_impuls2_esh(ibdy,ntem)= 
     &                        f_impuls2_esh(ibdy,ntem)+wei_i*
     &                        Fcont*Normalcont1(2)*gau_i(nos,j2)                   
                        f_impuls3_esh(ibdy,ntem)= 
     &                        f_impuls3_esh(ibdy,ntem)+wei_i*
     &                        Fcont*Normalcont1(3)*gau_i(nos,j2)
                     enddo
1260                continue
                    end do  !ibkt2_i
                    enddo   !ibkts1
                    enddo   !ibkts2
                    enddo   !ibkts3
                 endif !i2 .ne. i
                 endif ! less than nr_ibm_fb
               enddo !i2
               i2=i
                    do ibkts1=ibktmin(1),ibktmax(1)
                    do ibkts2=ibktmin(2),ibktmax(2)
                    do ibkts3=ibktmin(3),ibktmax(3)
                      ibkt=
     &                       ibkts1
     &                     +(ibkts2-1)*IBucketnum(1)
     &                     +(ibkts3-1)*IBucketnum(1)*IBucketnum(2)
                      do ibkt2_i=PBucket(i2g,ibkt),PBucket(i2g,ibkt+1)-1
                         jq2=1
                         ne2 =sBucket_esh(i2,ibkt,ibkt2_i) 

               if(ContactShellFlag_esh(i,ne,ne2) .ne. 1) then
                     jtype2=neatype_esh(i2,ne2)
                     itype2=jtypeall(jtype2)
                     if(itype2 .eq. 0) then
                        ntype2=12  
                     else
                        ntype2=6+itype2
                     end if   
                     if(itype2 .eq. 0) then
                       ItypecontELE(1)=4
                       ItypecontELE(2)=7
                       ItypecontELE(3)=8
                     else              
                       ItypecontELE(1)=1
                       ItypecontELE(2)=2
                       ItypecontELE(3)=itype2+1
                     endif
                     do nos2=1,3
                        ntem2=nea_esh(ibdy,ne2,ItypecontELE(nos2))
                        noj=1
                        Xcont(nos2,noj)=gx_ibm_massive_esh(i2,ntem2)
                        noj=2

                        xcont(nos2,noj)=gy_ibm_massive_esh(i2,ntem2)
                        noj=3
                        xcont(nos2,noj)=gz_ibm_massive_esh(i2,ntem2)
                     enddo


                     call ClosestPtPointTriangle(
     &                        outcont(1:3),XP2cont(1:3),XP1cont(1:3)
     &                       ,Xcont(1,1:3), Xcont(2,1:3),Xcont(3,1:3) ) 

                     dxcont(1:3)=XP2cont(1:3)-XP1cont(1:3)
                     ddcont=sqrt(dot_product(dxcont(1:3),dxcont(1:3)))

                     if (ddcont .gt. Ccont(1)) goto 2260


                    do nos=1,ntype2
                       ntem2=nea_esh(ibdy,ne2,nos)
                       noj=1
                       xcont(nos,noj)=gx_ibm_massive_esh(ibdy,ntem2)
                       noj=2
                       xcont(nos,noj)=gy_ibm_massive_esh(ibdy,ntem2)
                       noj=3
                       xcont(nos,noj)=gz_ibm_massive_esh(ibdy,ntem2)
                       noj=1
                       Vcont(nos,noj)=vibm1_esh(ibdy,ntem2)
                       noj=2
                       Vcont(nos,noj)=vibm2_esh(ibdy,ntem2)
                       noj=3
                       Vcont(nos,noj)=vibm3_esh(ibdy,ntem2)
                     enddo
                     outcont(1:3)=1.0d0/3.0d0

                     Call ClosestPointHighOrder(outcont(1:3)
     &                               ,XP2cont(1:3),VP2cont(1:3)
     &                               ,Normalcont2(1:3)
     &                               ,XP1cont(1:3)
     &                               ,xcont(1:ntypeMAx_loc,1:3)
     &                               ,vcont(1:ntypeMAx_loc,1:3)
     &                               ,ntype2,jtype2
     &                               ,itype2,l_loc,iv_loc,phi_loc
     &                               ,n_jtypeall,ntypeMAx_loc
     &                               ,floor(Ccont(6)+0.1)
     &                               ,Ccont(7)
     &                               ,Ccont(8))
                     if (outcont(1) .lt. -2.0d0) goto 2260
                     dxcont(1:3)=XP2cont(1:3)-XP1cont(1:3)
                     ddcont=sqrt(dot_product(dxcont(1:3),dxcont(1:3)))
                     if (ddcont .gt. Ccont(2)) goto 2260
                      ddcont=
     &                       sqrt(dot_product
     &                       (Normalcont1(1:3),Normalcont2(1:3))
     &                       )                    
                     if (ddcont .lt. Ccont(0)) goto 2260
                     dvcont(1:3)=VP2cont(1:3)-VP1cont(1:3)
                     
                     dncont=dot_product(dxcont(1:3),Normalcont2(1:3))
                   dnvcont=-dot_product(dvcont(1:3),Normalcont2(1:3))

                     Fcont=
     &                     ContactForce(
     &                                  dncont,dnvcont,Ccont(15)
     &                                 ,Ccont(3),Ccont(4)
     &                                 ,Ccont(5),Ccont(10))
                     do nos=1,3
                        ntem=nea_esh(ibdy,ne,ItypecontELE1(nos))
                        f_impuls1_esh(ibdy,ntem)= 
     &                        f_impuls1_esh(ibdy,ntem)+wei_i*
     &                        Fcont*Normalcont1(1)*gau_i(nos,j2)                    
                        f_impuls2_esh(ibdy,ntem)= 
     &                        f_impuls2_esh(ibdy,ntem)+wei_i*
     &                        Fcont*Normalcont1(2)*gau_i(nos,j2)                   
                        f_impuls3_esh(ibdy,ntem)= 
     &                        f_impuls3_esh(ibdy,ntem)+wei_i*
     &                        Fcont*Normalcont1(3)*gau_i(nos,j2)
                     enddo
2260             continue
                 endif

                     end do  !ibkt2_i
                   enddo   !ibkts1
                   enddo   !ibkts2
                   enddo   !ibkts3

              enddo !i gaus
         enddo !ibkt_i
         enddo !ibkt2

         if(channelcontacty) then
            write(*,*) 'channel contact y is not available with ',
     &                  'this contact option 2'
            stop
         endif

         if(channelcontactz) then
            write(*,*) 'channel contact z is not available with ',
     &                  'this contact option 2'
            stop
         endif
        endif   !for if ((i .le. nr_ibm_f).and.(i .ge. 1)) then


       else if(contacttype .eq. 3) then
        if (ibdyg .le. nr_ibm_f) then
           i2g=ibdyg
           do ibkt2=1,NBucketnum

             ibktmp1=mod(ibkt2,IBucketnum(1)*IBucketnum(2))
             if(ibktmp1 .eq. 0) ibktmp1=IBucketnum(1)*IBucketnum(2)

             ibktx=mod(ibktmp1,IBucketnum(1))
             if(ibktx .eq. 0) ibktx=IBucketnum(1)

             ibkty=int((ibktmp1-1)/IBucketnum(1))+1
             ibktz=int((ibkt2-1)/(IBucketnum(1)*IBucketnum(2)))+1

             ibktmin(1)=max(1,ibktx-1)
             ibktmax(1)=min(IBucketnum(1),ibktx+1)

             ibktmin(2)=max(1,ibkty-1)
             ibktmax(2)=min(IBucketnum(2),ibkty+1)

             ibktmin(3)=max(1,ibktz-1)
             ibktmax(3)=min(IBucketnum(3),ibktz+1)

             do ibkt_i=1,NBucket(ibdyg,ibkt2)
                ne =sBucket_esh(ibdy,ibkt2,ibkt_i)

                 jtype=neatype_esh(ibdy,ne)
                 itype=jtypeall(jtype)
                 if(itype .eq. 0) then
                   ntype=12  
                 else
                   ntype=6+itype
                 end if
                 if(itype .eq. 0) then
                      ItypecontELE1(1)=4
                      ItypecontELE1(2)=7
                      ItypecontELE1(3)=8
                 else              
                      ItypecontELE1(1)=1
                      ItypecontELE1(2)=2
                      ItypecontELE1(3)=itype+1
                 endif

                 do nos=1,3
                    ntem=nea_esh(ibdy,ne,ItypecontELE(nos))
                    noj=1
                    x(nos,noj)=gx_ibm_massive_esh(ibdy,ntem)
                    noj=2
                    x(nos,noj)=gy_ibm_massive_esh(ibdy,ntem)
                    noj=3
                    x(nos,noj)=gz_ibm_massive_esh(ibdy,ntem)
                    noj=1
                    xvv(nos,noj)=vibm1_esh(ibdy,ntem)
                    noj=2
                    xvv(nos,noj)=vibm2_esh(ibdy,ntem)
                    noj=3
                    xvv(nos,noj)=vibm3_esh(ibdy,ntem)
                 enddo



               do i2=i,nr_ibm_esh
                  i3g=Ilocglb_esh(i2)
                 if(i3g .le. nr_ibm_fb) then
                 if(i2 .ne. i) then   !add contact flag
                    do ibkts1=ibktmin(1),ibktmax(1)
                    do ibkts2=ibktmin(2),ibktmax(2)
                    do ibkts3=ibktmin(3),ibktmax(3)
                      ibkt=
     &                       ibkts1
     &                     +(ibkts2-1)*IBucketnum(1)
     &                     +(ibkts3-1)*IBucketnum(1)*IBucketnum(2)
                      do ibkt2_i=PBucket(i3g,ibkt),PBucket(i3g,ibkt+1)-1
                         jq2=1
                         ne2 =sBucket_esh(i2,ibkt,ibkt2_i) 

                         jtype2=neatype_esh(i2,ne2)
                         itype2=jtypeall(jtype2)
                         if(itype2 .eq. 0) then
                            ntype2=12  
                         else
                            ntype2=6+itype2
                         end if   
                         if(itype2 .eq. 0) then
                           ItypecontELE(1)=4
                           ItypecontELE(2)=7
                           ItypecontELE(3)=8
                         else              
                           ItypecontELE(1)=1
                           ItypecontELE(2)=2
                           ItypecontELE(3)=itype2+1
                         endif
                         do nos2=1,3
                            ntem2=nea_esh(ibdy,ne2,ItypecontELE(nos2))
                            noj=1
                            Xcont(nos2,noj)=gx_ibm_massive_esh(i2,ntem2)

                            noj=2
                            xcont(nos2,noj)=gy_ibm_massive_esh(i2,ntem2)
                            noj=3
                            xcont(nos2,noj)=gz_ibm_massive_esh(i2,ntem2)
                            noj=1
                            Vcont(nos,noj)=vibm1_esh(ibdy,ntem2)
                            noj=2
                            Vcont(nos,noj)=vibm2_esh(ibdy,ntem2)
                            noj=3
                            Vcont(nos,noj)=vibm3_esh(ibdy,ntem2)
                         enddo

                         call ClosestPtPointEle2Ele(
     &                        outcont(1:3), XP1cont(1:3)
     &                       ,outcont2(1:3),XP2cont(1:3)
     &                       ,    x(1:3,1:3)
     &                       ,Xcont(1:3,1:3) ) 

                          dxcont(1:3)=XP2cont(1:3)-XP1cont(1:3)
                         ddcont=
     &                    sqrt(dot_product(dxcont(1:3),dxcont(1:3)))
                         if (ddcont .gt. min(Ccont(1),Ccont(2))) 
     &                       goto 8260

                        VP1cont(1:3)=0.0
                        VP2cont(1:3)=0.0
                         do nos2=1,3
                           do noj=1,3
                            VP1cont(noj)=VP1cont(noj)+outcont(nos2)*
     &                               xvv(nos2,noj)    
                            VP2cont(noj)=VP2cont(noj)+outcont2(nos2)*
     &                               Vcont(nos2,noj)    

                           enddo
                         enddo

                          dvcont(1:3)=VP2cont(1:3)-VP1cont(1:3)
                         dncont=ddcont+1d-12
                         Normalcont1(1:3)=dxcont(1:3)/dncont

                         dnvcont=
     &                       -dot_product(dvcont(1:3),Normalcont1(1:3))

                         Fcont=
     &                     ContactForce(
     &                                  dncont,dnvcont,Ccont(15)
     &                                 ,Ccont(3),Ccont(4)
     &                                 ,Ccont(5),Ccont(10))

                         do nos=1,3
                            ntem =nea_esh(ibdy,ne,ItypecontELE1(nos))
                            f_impuls1_esh(ibdy,ntem)= 
     &                        f_impuls1_esh(ibdy,ntem)-area(ibdy,ne)*
     &                        Fcont*Normalcont1(1)*outcont(1)                    
                            f_impuls2_esh(ibdy,ntem)= 
     &                        f_impuls2_esh(ibdy,ntem)-area(ibdy,ne)*
     &                        Fcont*Normalcont1(2)*outcont(2)                   
                            f_impuls3_esh(ibdy,ntem)= 
     &                        f_impuls3_esh(ibdy,ntem)-area(ibdy,ne)*
     &                        Fcont*Normalcont1(3)*outcont(3)
                         enddo
                         do nos=1,3
                            ntem=nea_esh(i2,ne2,ItypecontELE(nos))
                            f_impuls1_esh(i2,ntem)= 
     &                        f_impuls1_esh(i2,ntem)+area(i2,ne2)*
     &                        Fcont*Normalcont1(1)*outcont2(1)                    
                            f_impuls2_esh(i2,ntem)= 
     &                        f_impuls2_esh(i2,ntem)+area(i2,ne2)*
     &                        Fcont*Normalcont1(2)*outcont2(2)                   
                            f_impuls3_esh(i2,ntem)= 
     &                        f_impuls3_esh(i2,ntem)+area(i2,ne2)*
     &                        Fcont*Normalcont1(3)*outcont2(3)
                         enddo

8260                     continue
                    end do  !ibkt2_i

                    enddo   !ibkts1
                    enddo   !ibkts2
                    enddo   !ibkts3
                 endif
                 endif
               enddo !i2

               i2=i
               i2g=ibdyg
                    do ibkts1=ibktmin(1),ibktmax(1)
                    do ibkts2=ibktmin(2),ibktmax(2)
                    do ibkts3=ibktmin(3),ibktmax(3)
                      ibkt=
     &                       ibkts1
     &                     +(ibkts2-1)*IBucketnum(1)
     &                     +(ibkts3-1)*IBucketnum(1)*IBucketnum(2)
                      do ibkt2_i=PBucket(i2g,ibkt),PBucket(i2g,ibkt+1)-1
                         jq2=1
                         ne2 =sBucket_esh(i2,ibkt,ibkt2_i) 

                         if(ne2 .gt. ne) then
                         if(ContactShellFlag_esh(i,ne,ne2) .ne. 1) then

                             jtype2=neatype_esh(i2,ne2)
                             itype2=jtypeall(jtype2)
                             if(itype2 .eq. 0) then
                                ntype2=12  
                             else
                                ntype2=6+itype2
                             end if   
                             if(itype2 .eq. 0) then
                               ItypecontELE(1)=4
                               ItypecontELE(2)=7
                               ItypecontELE(3)=8
                             else              
                               ItypecontELE(1)=1
                               ItypecontELE(2)=2
                               ItypecontELE(3)=itype2+1
                             endif
                             do nos2=1,3
                              ntem2=nea_esh(ibdy,ne2,ItypecontELE(nos2))
                                noj=1
                                Xcont(nos2,noj)=
     &                                   gx_ibm_massive_esh(i2,ntem2)
                                noj=2
                                xcont(nos2,noj)=
     &                                   gy_ibm_massive_esh(i2,ntem2)
                                noj=3
                                xcont(nos2,noj)=
     &                                   gz_ibm_massive_esh(i2,ntem2)
                                noj=1
                                Vcont(nos2,noj)=
     &                                   vibm1_esh(i2,ntem2)
                                noj=2
                                Vcont(nos2,noj)=
     &                                   vibm2_esh(i2,ntem2)
                                noj=3
                                Vcont(nos2,noj)=
     &                                   vibm3_esh(i2,ntem2)

                             enddo
                            call ClosestPtPointEle2Ele(
     &                              outcont(1:3), XP1cont(1:3)
     &                             ,outcont2(1:3),XP2cont(1:3)
     &                             ,    x(1:3,1:3)
     &                             ,Xcont(1:3,1:3) ) 
                            dxcont(1:3)=XP2cont(1:3)-XP1cont(1:3)
                            ddcont=1.0d-12+
     &                       sqrt(dot_product(dxcont(1:3),dxcont(1:3)))
                             if (ddcont .gt. min(Ccont(1),Ccont(2)))
     &                             goto 8261

                         VP1cont(1:3)=0.0
                         VP2cont(1:3)=0.0
                         do nos2=1,3
                           do noj=1,3
                            VP1cont(noj)=VP1cont(noj)+outcont(nos2)*
     &                               xvv(nos2,noj)    
                            VP2cont(noj)=VP2cont(noj)+outcont2(nos2)*
     &                               Vcont(nos2,noj)    

                           enddo
                         enddo


                            dvcont(1:3)=VP2cont(1:3)-VP1cont(1:3)
                    
                             dncont=ddcont
                             Normalcont1(1:3)=dxcont(1:3)/dncont
                  dnvcont=-dot_product(dvcont(1:3),Normalcont1(1:3))
                             Fcont=
     &                             ContactForce(
     &                                  dncont,dnvcont,Ccont(15)
     &                                 ,Ccont(3),Ccont(4)
     &                                 ,Ccont(5),Ccont(10))
                             do nos=1,3
                               ntem =nea_esh(ibdy,ne,ItypecontELE1(nos))
                                f_impuls1_esh(ibdy,ntem)= 
     &                                f_impuls1_esh(ibdy,ntem)
     &                                -area(ibdy,ne)*
     &                                Fcont*Normalcont1(1)*outcont(1)                    
                                f_impuls2_esh(ibdy,ntem)= 
     &                                f_impuls2_esh(ibdy,ntem)
     &                                -area(ibdy,ne)*
     &                                Fcont*Normalcont1(2)*outcont(2)                   
                                f_impuls3_esh(ibdy,ntem)= 
     &                                f_impuls3_esh(ibdy,ntem)
     &                                -area(ibdy,ne)*
     &                                Fcont*Normalcont1(3)*outcont(3)
                             enddo
                             do nos=1,3
                                ntem=nea_esh(i2,ne2,ItypecontELE(nos))
                                f_impuls1_esh(i2,ntem)= 
     &                                f_impuls1_esh(i2,ntem)
     &                                +area(i2,ne2)*
     &                                Fcont*Normalcont1(1)*outcont2(1)                    
                                f_impuls2_esh(i2,ntem)= 
     &                                f_impuls2_esh(i2,ntem)
     &                                +area(i2,ne2)*
     &                                Fcont*Normalcont1(2)*outcont2(2)                   
                                f_impuls3_esh(i2,ntem)= 
     &                                f_impuls3_esh(i2,ntem)
     &                                +area(i2,ne2)*
     &                                Fcont*Normalcont1(3)*outcont2(3)
                             enddo
8261                        continue
                         endif !contactshellflag
                         endif !ne2>ne flag
                     end do  !ibkt2_i
                    enddo   !ibkts1
                    enddo   !ibkts2
                    enddo   !ibkts3
         enddo !ibkt_i
         enddo !ibkt2

         if(channelcontacty) then
            write(*,*) 'channel contact y is not available with ',
     &                  'this contact option 3'
            stop
         endif

         if(channelcontactz) then
            write(*,*) 'channel contact z is not available with ',
     &                  'this contact option 3'
            stop
         endif

          endif   !for if ((i .le. nr_ibm_f).and.(i .ge. 1)) then
       else
         write(*,*)' input contacttype is not recognized', contacttype
       endif  !contacttypeif of contact model
       endif  !ContactForceFlag(i)


!here 2-16-2015 7:02pm
c calculation of total forces 
       i=ibdy
       i2g=ibdyg

        do j=1,ns_ibm_r_esh(i)
             fibm1_esh(i,j)=fibm1_esh(i,j)
     &          +f_link1_esh(i,j)
             fibm2_esh(i,j)=fibm2_esh(i,j)
     &          +f_link2_esh(i,j)
             fibm3_esh(i,j)=fibm3_esh(i,j)
     &          +f_link3_esh(i,j)
        end do

       do j=1,ns_ibm_r_esh(i) 
           f_link1_esh(i,j)=density_coef(i2g)*gx_ibm_massiveo_esh(i,j)
     &        +cs_ibm(i2g)*gx_ibmpre_esh(i,j)*dt/2.0

           f_link2_esh(i,j)=(density_coef(i2g))*gy_ibm_massiveo_esh(i,j)
     &        +cs_ibm(i2g)*gy_ibmpre_esh(i,j)*dt/2.0

           f_link3_esh(i,j)=(density_coef(i2g))*gz_ibm_massiveo_esh(i,j)
     &        +cs_ibm(i2g)*gz_ibmpre_esh(i,j)*dt/2.0
       end do

      do np=1,ns_ibm_i_esh(ibdy)  
         npg=ns_ibm_r_esh(ibdy)+np
         bodypoint(1)=boundrylist_esh(ibdy,np,1)
         bodypoint(2)=boundrylist_esh(ibdy,np,2)
         bodypoint(3)=boundrylist_esh(ibdy,np,3)
         f_link1_esh(ibdy,npg)=f_link1_esh(ibdy,bodypoint(1))
     &             +f_link1_esh(ibdy,bodypoint(2))
     &             -f_link1_esh(ibdy,bodypoint(3))       

         f_link2_esh(ibdy,npg)=f_link2_esh(ibdy,bodypoint(1))
     &             +f_link2_esh(ibdy,bodypoint(2))
     &             -f_link2_esh(ibdy,bodypoint(3))       

         f_link3_esh(ibdy,npg)=f_link3_esh(ibdy,bodypoint(1))
     &             +f_link3_esh(ibdy,bodypoint(2))
     &             -f_link3_esh(ibdy,bodypoint(3))       
      end do       


      f_link1_esh(i,1: ns_ibm_r_esh(i)+ns_ibm_i_esh(i))=
     & matmul(mms(1: ns_ibm_r_esh(i)+ns_ibm_i_esh(i),
     &            1: ns_ibm_r_esh(i)+ns_ibm_i_esh(i)),
     &         f_link1_esh(i,1: ns_ibm_r_esh(i)+ns_ibm_i_esh(i)) )

      f_link2_esh(i,1: ns_ibm_r_esh(i)+ns_ibm_i_esh(i))=
     & matmul( mms(1: ns_ibm_r_esh(i)+ns_ibm_i_esh(i),
     &             1: ns_ibm_r_esh(i)+ns_ibm_i_esh(i)),
     &         f_link2_esh(i,1: ns_ibm_r_esh(i)+ns_ibm_i_esh(i)) )

      f_link3_esh(i,1: ns_ibm_r_esh(i)+ns_ibm_i_esh(i))=
     & matmul(mms(1: ns_ibm_r_esh(i)+ns_ibm_i_esh(i),
     &            1: ns_ibm_r_esh(i)+ns_ibm_i_esh(i)),
     &         f_link3_esh(i,1: ns_ibm_r_esh(i)+ns_ibm_i_esh(i)))

c calculation of total forces 
       i=ibdy

        do j=1,ns_ibm_r_esh(i) 
           fibm1_esh(i,j)=f_link1_esh(i,j)
     &                   +density_coefp(i2g)
     &                    *gx_ibm_massiveo_esh(i,j)*areapnt_esh(i,j)
     &                  + dt2*areapnt_esh(i,j)*(
     &                 -fibm1_esh(i,j)   
     &                 +finer_1_ibm_esh(i,j)
     &                 +density_coef(i2g)
     &                  *fr*cos(the_grav)*sin(phi_grav)*timetemp2
     &                 ) 
     &                +dt2*f_impuls1_esh(i,j)

           fibm2_esh(i,j)=f_link2_esh(i,j)
     &                   +density_coefp(i2g)
     &                    *gy_ibm_massiveo_esh(i,j)*areapnt_esh(i,j)
     &                  + dt2*areapnt_esh(i,j)*(
     &                 -fibm2_esh(i,j)    
     &                 +finer_2_ibm_esh(i,j) 
     &                 +density_coef(i2g)
     &                  *fr*sin(the_grav)*sin(phi_grav)*timetemp2
     &                 ) 
     &                 +dt2*f_impuls2_esh(i,j)

           fibm3_esh(i,j)=f_link3_esh(i,j)
     &                   +density_coefp(i2g)
     &                    *gz_ibm_massiveo_esh(i,j)*areapnt_esh(i,j)
     &                  + dt2*areapnt_esh(i,j)*(
     &                 -fibm3_esh(i,j)    
     &                 +finer_3_ibm_esh(i,j) 
     &                 +density_coef(i2g)
     &                  *fr*cos(phi_grav)*timetemp2
     &                 ) 
     &                 +dt2*f_impuls3_esh(i,j)
        end do


      ksh_tmp=-1000.0
      do np=1,ns_ibm_r_esh(ibdy)  
         ksh_tmp=max(ksh_tmp,aamat_esh(np,np))
      enddo
      k=ns_ibm_r_esh(ibdy)+ns_ibm_i_esh(ibdy)
      do np=1,ns_ibm_i_esh(ibdy)  
         npg=ns_ibm_r_esh(ibdy)+np
         bodypoint(1)=boundrylist_esh(ibdy,np,1)
         bodypoint(2)=boundrylist_esh(ibdy,np,2)
         bodypoint(3)=boundrylist_esh(ibdy,np,3)

         if(bndycnd_esh(ibdy,npg) .eq. 1) then
            aamat_esh(npg,1: ns_ibm_r_esh(ibdy)+ns_ibm_i_esh(ibdy))=0.0
            aamat_esh(npg,npg)=ksh_tmp
            aamat_esh(npg,bodypoint(1))=
     &                            aamat_esh(npg,bodypoint(1))-ksh_tmp
            aamat_esh(npg,bodypoint(2))=
     &                            aamat_esh(npg,bodypoint(2))-ksh_tmp
            aamat_esh(npg,bodypoint(3))=
     &                            aamat_esh(npg,bodypoint(3))+ksh_tmp
          elseif(bndycnd_esh(ibdy,npg) .eq. 2) then
            aamat_esh(npg,1: ns_ibm_r_esh(ibdy)+ns_ibm_i_esh(ibdy))=0.0

            aamat_esh(npg,npg)=ksh_tmp

            aamat_esh(bodypoint(1),1:k)=0.0
            aamat_esh(bodypoint(1),bodypoint(1))=ksh_tmp

            aamat_esh(bodypoint(2),1:k)=0.0
            aamat_esh(bodypoint(2),bodypoint(2))=ksh_tmp

           ! aamat_esh(bodypoint(3),1:k)=0.0
           ! aamat_esh(bodypoint(3),bodypoint(3))=ksh_tmp
          elseif(bndycnd_esh(ibdy,npg) .eq. 3) then  !need change
            aamat_esh(npg,1: ns_ibm_r_esh(ibdy)+ns_ibm_i_esh(ibdy))=0.0
            aamat_esh(npg,npg)=ksh_tmp
            aamat_esh(npg,bodypoint(1))=
     &                            aamat_esh(npg,bodypoint(1))-ksh_tmp
            aamat_esh(npg,bodypoint(2))=
     &                            aamat_esh(npg,bodypoint(2))-ksh_tmp
            aamat_esh(npg,bodypoint(3))=
     &                            aamat_esh(npg,bodypoint(3))+ksh_tmp
            !aamat_esh(npg,bodypoint(3))=ksh_tmp      
            !aamat_esh(npg,npg)=ksh_tmp

            aamat_esh(bodypoint(1),1:k)=0.0
            aamat_esh(bodypoint(1),bodypoint(1))=ksh_tmp

            aamat_esh(bodypoint(2),1:k)=0.0
            aamat_esh(bodypoint(2),bodypoint(2))=ksh_tmp
         endif
      end do   


      do np=1,ns_ibm_i_esh(ibdy)  
         npg=ns_ibm_r_esh(ibdy)+np
         bodypoint(1)=boundrylist_esh(ibdy,np,1)
         bodypoint(2)=boundrylist_esh(ibdy,np,2)
         bodypoint(3)=boundrylist_esh(ibdy,np,3)
		 
         if(bndycnd_esh(ibdy,npg) .eq. 1) then		 
            fibm1_esh(ibdy,npg)=0.0
            fibm2_esh(ibdy,npg)=0.0
            fibm3_esh(ibdy,npg)=0.0
         elseif(bndycnd_esh(ibdy,npg) .eq. 2) then
            fibm1_esh(ibdy,npg)=ksh_tmp*gx_bp_esh(ibdy,npg)
            fibm1_esh(ibdy,bodypoint(1))=
     &             ksh_tmp*gx_bp_esh(ibdy,bodypoint(1))
            fibm1_esh(ibdy,bodypoint(2))=
     &             ksh_tmp*gx_bp_esh(ibdy,bodypoint(2))
!            fibm1_esh(ibdy,bodypoint(3))=
!     &             ksh_tmp*gx_bp_esh(ibdy,bodypoint(3))

            fibm2_esh(ibdy,npg)=ksh_tmp*gy_bp_esh(ibdy,npg)
            fibm2_esh(ibdy,bodypoint(1))=
     &             ksh_tmp*gy_bp_esh(ibdy,bodypoint(1))
            fibm2_esh(ibdy,bodypoint(2))=
     &             ksh_tmp*gy_bp_esh(ibdy,bodypoint(2))
!            fibm2_esh(ibdy,bodypoint(3))=
!     &             ksh_tmp*gy_bp_esh(ibdy,bodypoint(3))

            fibm3_esh(ibdy,npg)=ksh_tmp*gz_bp_esh(ibdy,npg)
            fibm3_esh(ibdy,bodypoint(1))=
     &             ksh_tmp*gz_bp_esh(ibdy,bodypoint(1))
            fibm3_esh(ibdy,bodypoint(2))=
     &             ksh_tmp*gz_bp_esh(ibdy,bodypoint(2))
!            fibm3_esh(ibdy,bodypoint(3))=
!     &             ksh_tmp*gz_bp_esh(ibdy,bodypoint(3))
		 
         elseif(bndycnd_esh(ibdy,npg) .eq. 3) then	!need to change
             fibm1_esh(ibdy,npg)=0.0
!     &             +ksh_tmp*(gx_bp_esh(ibdy,bodypoint(1))
!     &                     +gx_bp_esh(ibdy,bodypoint(2)))

             fibm2_esh(ibdy,npg)=0.0
!     &             +ksh_tmp*(gy_bp_esh(ibdy,bodypoint(1))
!     &                     +gy_bp_esh(ibdy,bodypoint(2)))

             fibm3_esh(ibdy,npg)=0.0
!     &             +ksh_tmp*(gz_bp_esh(ibdy,bodypoint(1))
!     &                     +gz_bp_esh(ibdy,bodypoint(2)))

            fibm1_esh(ibdy,bodypoint(1))=
     &             ksh_tmp*gx_bp_esh(ibdy,bodypoint(1))
            fibm1_esh(ibdy,bodypoint(2))=
     &             ksh_tmp*gx_bp_esh(ibdy,bodypoint(2))

            fibm2_esh(ibdy,bodypoint(1))=
     &             ksh_tmp*gy_bp_esh(ibdy,bodypoint(1))
            fibm2_esh(ibdy,bodypoint(2))=
     &             ksh_tmp*gy_bp_esh(ibdy,bodypoint(2))
            fibm3_esh(ibdy,bodypoint(1))=
     &             ksh_tmp*gz_bp_esh(ibdy,bodypoint(1))
            fibm3_esh(ibdy,bodypoint(2))=
     &             ksh_tmp*gz_bp_esh(ibdy,bodypoint(2))
         endif
		 
      enddo

      if(iksh1 .eq. 0) then

      if(allocated(aacsr))  then 
        deallocate(iacsr, jacsr,aacsr)
      endif
        allocate(iacsr(ns_ibm_esh))     
        ntemi=0
        do noj=1,ns_ibm_r_esh(i)+ns_ibm_i_esh(i)
        iacsr(noj)=ntemi+1
        do noi=1,ns_ibm_r_esh(i)+ns_ibm_i_esh(i)
           ksh_tmp=aamat_esh(noj,noi)
           if(abs(ksh_tmp) .gt. 1d-16) then
            ntemi=ntemi+1
           endif
         enddo
         enddo
         ntermiMAX=ntemi+1 
!         k_flagMAT=.false.
         allocate(aacsr(ntermiMAX),jacsr(ntermiMAX))
        iacsr=0
        aacsr=0.0
        jacsr=0



      ntemi=0
      do noj=1,ns_ibm_r_esh(i)+ns_ibm_i_esh(i)
      iacsr(noj)=ntemi+1
      do noi=1,ns_ibm_r_esh(i)+ns_ibm_i_esh(i)
         ksh_tmp=aamat_esh(noj,noi)
         if(abs(ksh_tmp) .gt. 1d-16) then
            ntemi=ntemi+1
            aacsr(ntemi)=ksh_tmp
            jacsr(ntemi)=noi
         endif
      enddo
      enddo
      noj=1+ns_ibm_r_esh(i)+ns_ibm_i_esh(i)
      iacsr(noj)=ntemi+1 


  
231       format(2i4,16(1x,f12.6))   
232       format(6i4,16(1x,f12.6))   

      if(1==0) then
      do noj=1,ns_ibm_r_esh(i)+ns_ibm_i_esh(i)
       write(4510+i,231) noj,ns_ibm_r_esh(i),gx_ibm_massive_esh(i,noj)
     &                  ,gy_ibm_massive_esh(i,noj)
     &                  ,gz_ibm_massive_esh(i,noj)
       write(3510+i,231) noj,ns_ibm_r_esh(i),fibm1_esh(i,noj)
     &                  ,fibm2_esh(i,noj)
     &                  ,fibm3_esh(i,noj)
      do noi=1,ns_ibm_r_esh(i)+ns_ibm_i_esh(i)
       write(2510+i,*) noj,noi,aamat_esh(noj,noi)
      enddo
      enddo
      endif

       j=ns_ibm_r_esh(i)+ns_ibm_i_esh(i)
!       goto 2313
       call pmgmres_ilu_crMRHS(j
     &     ,ntermiMAX
     &     ,iacsr(1: j+1)
     &     ,jacsr(1: ntermiMAX)
     &     ,aacsr(1: ntermiMAX)
     &     ,gx_ibm_massive_esh(i,1:j)
     &     ,gy_ibm_massive_esh(i,1:j)
     &     ,gz_ibm_massive_esh(i,1:j)
     &     ,fibm1_esh(i,1:j)
     &     ,fibm2_esh(i,1:j)
     &     ,fibm3_esh(i,1:j)
     &     ,SolverOutiter,SolverIniter
     &     ,Solverabstol,Solverreltol,SolverPre,monitorON)

        goto 2315

       call pmgmres_ilu_cr(j
     &     ,ntermiMAX
     &     ,iacsr(1: j+1)
     &     ,jacsr(1: ntermiMAX)
     &     ,aacsr(1: ntermiMAX)
     &     ,gx_ibm_massive_esh(i,1:j)
     &     ,fibm1_esh(i,1:j)
     &     ,SolverOutiter,SolverIniter
     &     ,Solverabstol,Solverreltol,SolverPre,monitorON)

      call pmgmres_ilu_cr(j
     &     ,ntermiMAX
     &     ,iacsr(1: j+1)
     &     ,jacsr(1: ntermiMAX)
     &     ,aacsr(1: ntermiMAX)
     &     ,gy_ibm_massive_esh(i,1:j)
     &     ,fibm2_esh(i,1:j)
     &     ,SolverOutiter,SolverIniter
     &     ,Solverabstol,Solverreltol,SolverPre,monitorON)

      call pmgmres_ilu_cr(j
     &     ,ntermiMAX
     &     ,iacsr(1: j+1)
     &     ,jacsr(1: ntermiMAX)
     &     ,aacsr(1: ntermiMAX)
     &     ,gz_ibm_massive_esh(i,1:j)
     &     ,fibm3_esh(i,1:j)
     &     ,SolverOutiter,SolverIniter
     &     ,Solverabstol,Solverreltol,SolverPre,monitorON)
2315   goto 2312

2313   continue   
      call gmres_csr(
     &      aacsr(1: ntermiMAX)
     &     ,jacsr(1: ntermiMAX)
     &     ,iacsr(1: j+1)
     &     ,fibm1_esh(i,1:j)
     &     ,gx_ibm_massive_esh(i,1:j)
     &     ,tol,j,ntermiMAX)
!
       call gmres_csr(
     &      aacsr(1: ntermiMAX)
     &     ,jacsr(1: ntermiMAX)
     &     ,iacsr(1: j+1)
     &     ,fibm2_esh(i,1:j)
     &     ,gy_ibm_massive_esh(i,1:j)
     &     ,tol,j,ntermiMAX)

       call gmres_csr(
     &      aacsr(1: ntermiMAX)
     &     ,jacsr(1: ntermiMAX)
     &     ,iacsr(1: j+1)
     &     ,fibm3_esh(i,1: j)
     &     ,gz_ibm_massive_esh(i,1: j)
     &     ,tol,j,ntermiMAX)
2312    continue

      if(1==0) then
      do noj=1,ns_ibm_r_esh(i)+ns_ibm_i_esh(i)
       write(4410+i,231) noj,ns_ibm_r_esh(i),gx_ibm_massive_esh(i,noj)
     &                  ,gy_ibm_massive_esh(i,noj)
     &                  ,gz_ibm_massive_esh(i,noj)
      enddo
      pause
      endif

      endif !stand alongshell/ or connected
      deallocate(
     &       aamat_esh,kks,kkb)  
      elseif(Genalpha_timesolver(ibdyg) .eq. 1) then
            write(*,*)'Totally Implicit Euler is not implemented yet'
            write(*,*)'Maybe you can help!'
            stop
      elseif(Genalpha_timesolver(ibdyg) .eq. 2) then

      allocate(
     &       aamat_esh(ns_ibm_esh,ns_ibm_esh)
     &      ,kks(ns_ibm_esh,ns_ibm_esh)
     &      ,kkb(ns_ibm_esh,ns_ibm_esh)  )

        timeMarchcoef(1)=(gamma_Coef(ibdyg)-1.0d0)/gamma_Coef(ibdyg)
        timeMarchcoef(2)=dt2/2.0*(1.0-2.0*beta_Coef(ibdyg))
        timeMarchcoef(3)=dt2/2.0*(2.0*beta_Coef(ibdyg))

        timeMarchcoef(4)=dt*gamma_Coef(ibdyg)
        timeMarchcoef(5)=dt2*beta_Coef(ibdyg)

        timeMarchcoef(6)=1.0-alphaf_Coef(ibdyg)
        timeMarchcoef(7)=1.0-alpham_Coef(ibdyg)

        timeMarchcoef(8)=alpham_Coef(ibdyg)
        timeMarchcoef(9)=timeMarchcoef(4)*alphaf_Coef(ibdyg)
        timeMarchcoef(10)=timeMarchcoef(5)*alphaf_Coef(ibdyg)


        time_alphaf=time2+(1-alphaf_Coef(ibdyg))*dt
!copy vectors
        do npg=1,ns_ibm_r_esh(ibdy)
         X_n_esh(npg,1)=gx_ibm_massive_esh(ibdy,npg)
         X_n_esh(npg,2)=gy_ibm_massive_esh(ibdy,npg)
         X_n_esh(npg,3)=gz_ibm_massive_esh(ibdy,npg)
         dX_n_esh(npg,1)=vibm1_esh(ibdy,npg)
         dX_n_esh(npg,2)=vibm2_esh(ibdy,npg)
         dX_n_esh(npg,3)=vibm3_esh(ibdy,npg)
         ddX_n_esh(npg,1)=aibm1_esh(ibdy,npg)
         ddX_n_esh(npg,2)=aibm2_esh(ibdy,npg)
         ddX_n_esh(npg,3)=aibm3_esh(ibdy,npg)
        enddo

        do npg=1,ns_ibm_r_esh(ibdy)
         ddX_np1_esh(npg,1:3)= timeMarchcoef(1)*ddX_n_esh(npg,1:3)
         dX_np1_esh(npg,1:3) = dX_n_esh(npg,1:3)
          X_np1_esh(npg,1:3) =  X_n_esh(npg,1:3)
     &                         +dt*dX_n_esh(npg,1:3)
     &                         +timeMarchcoef(2)*ddX_n_esh(npg,1:3)
     &                         +timeMarchcoef(3)*ddX_np1_esh(npg,1:3)
      enddo       

!===================  ITERATIONS
      Do iter=1,Genalpha_niter(ibdyg)
         if(monitorON) write(*,*) '   === INER ===  ',iter
         if(iter .eq. 1) then 
            coef_iter=1.0
         else
            coef_iter=0.0      
         endif  

      do npg=1,ns_ibm_r_esh(ibdy)
         ddX_na_esh(npg,1:3)= timeMarchcoef(7)*ddX_np1_esh(npg,1:3)
     &                      +alpham_Coef(ibdyg)*ddX_n_esh(npg,1:3)
         dX_na_esh(npg,1:3)= timeMarchcoef(6)*dX_np1_esh(npg,1:3)
     &                      +alphaf_Coef(ibdyg)*dX_n_esh(npg,1:3)
          X_na_esh(npg,1:3)= timeMarchcoef(6)* X_np1_esh(npg,1:3)
     &                      +alphaf_Coef(ibdyg)* X_n_esh(npg,1:3)

!       write(2323,2337)
!     & ibdy,npg
!     & ,X_na_esh(npg,1),X_np1_esh(npg,1),X_n_esh(npg,1)
!     & ,gx_ibm_massive_esh(ibdy,npg)
!     & ,X_na_esh(npg,2),X_np1_esh(npg,2),X_n_esh(npg,2)
!     & ,gy_ibm_massive_esh(ibdy,npg)
!     & ,X_na_esh(npg,3),X_np1_esh(npg,3),X_n_esh(npg,3)
!     & ,gz_ibm_massive_esh(ibdy,npg)
!2337       format(2(1x,i4),16(1x,f12.6)) 
      enddo   
!! calculate residule
      i=ibdy
      i2l=i
      fibm1_esh(i,1:Ns_IBM_esh)=0.0
      fibm2_esh(i,1:Ns_IBM_esh)=0.0
      fibm3_esh(i,1:Ns_IBM_esh)=0.0
      ffluidsum1_esh(i,1:Ns_IBM_esh)=0.0
      ffluidsum2_esh(i,1:Ns_IBM_esh)=0.0
      ffluidsum3_esh(i,1:Ns_IBM_esh)=0.0


      f_impuls1_esh(i,1:Ns_IBM_esh)=0.d0
      f_impuls2_esh(i,1:Ns_IBM_esh)=0.d0
      f_impuls3_esh(i,1:Ns_IBM_esh)=0.d0
      areapnt_esh(i,1:Ns_IBM_esh)=0.0
!      xpnt_esh(i,1:Ns_IBM_esh)=0.0
      force_points_esh(i,1:Ns_IBM_esh,1:3)=0.d0
      f_link1_esh(i,1:Ns_IBM_esh)=0.0
      f_link2_esh(i,1:Ns_IBM_esh)=0.0
      f_link3_esh(i,1:Ns_IBM_esh)=0.0

c
c calculating feedback force for matching bcs
       i2g=Ilocglb_esh(ibdy)
       if(FluidForceFlag(i2g)) then
        do j=1,ns_ibm_r_esh(i)
           fk_mass1_esh(i,j)=fk_mass1o_esh(i,j)
     &          +alpha_ibm*delta_t*(uibm1_esh(i,j)-dX_na_esh(j,1))
     &                   *timetemp2

            fk_mass2_esh(i,j)=fk_mass2o_esh(i,j)
     &          +alpha_ibm*delta_t*(uibm2_esh(i,j)-dX_na_esh(j,2))
     &                   *timetemp2

            ffluidsum1_esh(i,j)= fk_mass1_esh(i,j)
     &                   +beta_ibm*(uibm1_esh(i,j)-dX_na_esh(j,1))
     &                   *timetemp2
            ffluidsum2_esh(i,j)= fk_mass2_esh(i,j)
     &                   +beta_ibm*(uibm2_esh(i,j)-dX_na_esh(j,2))
     &                   *timetemp2
            if(ndim .gt. 2) then
            fk_mass3_esh(i,j)=fk_mass3o_esh(i,j)
     &          +alpha_ibm*delta_t*(uibm3_esh(i,j)-dX_na_esh(j,3))
     &                   *timetemp2

            ffluidsum3_esh(i,j)= fk_mass3_esh(i,j)
     &                   +beta_ibm*(uibm3_esh(i,j)-dX_na_esh(j,3))
     &                   *timetemp2
            endif
         end do
         do j=1,ns_ibm_r_esh(i)
              fibm1_esh(i,j)=fibm1_esh(i,j)+ffluidsum1_esh(i,j)
              fibm2_esh(i,j)=fibm2_esh(i,j)+ffluidsum2_esh(i,j)
              if(ndim .gt. 2) 
     &           fibm3_esh(i,j)=fibm3_esh(i,j)+ffluidsum3_esh(i,j)
          end do
        endif  

        call boundary_ibm_generalalpha(
     &       i2g
     &      ,Xtar_na_esh
     &      ,dXtar_na_esh
     &      ,X0_np1_esh)

      do npg=1,target_num(i2g)
         Xtar_na_esh(npg,1:3)= alphaf_Coef(ibdyg)
     &                        *target_points_esh(i,npg,1:3)
     &                      +timeMarchcoef(6)*Xtar_na_esh(npg,1:3)
        dXtar_na_esh(npg,1:3)= alphaf_Coef(ibdyg)
     &                        *target_points_v_esh(i,npg,1:3)
     &                      +timeMarchcoef(6)*dXtar_na_esh(npg,1:3)
      enddo   

      do np=1,ns_ibm_i_esh(ibdy)  
         npg=ns_ibm_r_esh(ibdy)+np
         bodypoint(1)=boundrylist_esh(ibdy,np,1)
         bodypoint(2)=boundrylist_esh(ibdy,np,2)
         bodypoint(3)=boundrylist_esh(ibdy,np,3)
         X_na_esh(npg,1:3)=X_na_esh(bodypoint(1),1:3)
     &                   +X_na_esh(bodypoint(2),1:3)
     &                   -X_na_esh(bodypoint(3),1:3)
         dX_na_esh(npg,1:3)=dX_na_esh(bodypoint(1),1:3)
     &                    +dX_na_esh(bodypoint(2),1:3)
     &                    -dX_na_esh(bodypoint(3),1:3)
         ddX_na_esh(npg,1:3)=ddX_na_esh(bodypoint(1),1:3)
     &                     +ddX_na_esh(bodypoint(2),1:3)
     &                     -ddX_na_esh(bodypoint(3),1:3)
         X0_np1_esh(npg,1:3)=X0_np1_esh(bodypoint(1),1:3)
     &                     +X0_np1_esh(bodypoint(2),1:3)
     &                     -X0_np1_esh(bodypoint(3),1:3)
         X_np1_esh(npg,1:3)=X_np1_esh(bodypoint(1),1:3)
     &                   +X_np1_esh(bodypoint(2),1:3)
     &                   -X_np1_esh(bodypoint(3),1:3)
         dX_np1_esh(npg,1:3)=dX_np1_esh(bodypoint(1),1:3)
     &                    +dX_np1_esh(bodypoint(2),1:3)
     &                    -dX_np1_esh(bodypoint(3),1:3)
         ddX_np1_esh(npg,1:3)=ddX_np1_esh(bodypoint(1),1:3)
     &                     +ddX_np1_esh(bodypoint(2),1:3)
     &                     -ddX_np1_esh(bodypoint(3),1:3)
      end do       
      aamat_esh=0.0
      mms=0.0
      kks=0.0
      kkb=0.0

      fibm1pres_esh=0.0
      fibm2pres_esh=0.0
      fibm3pres_esh=0.0

      fibm1cont_esh=0.0
      fibm2cont_esh=0.0
      fibm3cont_esh=0.0

      ntypeMAx_loc=-1000

      do ne=1,numelr(ibdyg)
         jtype=neatype_esh(ibdy,ne)
         itype=jtypeall(jtype)
         if(itype .eq. 0) then
           ntype=12  
         else
           ntype=6+itype
         end if
         ntypeMAx_loc=max(ntypeMAx_loc,ntype)

         do nos=1,ntype
            ntem=nea_esh(ibdy,ne,nos)
            noj=1
            x(nos,1:3)=X_na_esh(ntem,1:3)

            if(Fibrous_Esh(ibdy) .eq. 1) then
            noj=1
            x_FibVec(nos,noj)=Materialpara_esh(ibdy,ntem,noj)
            noj=2
            x_FibVec(nos,noj)=Materialpara_esh(ibdy,ntem,noj)
            noj=3
            x_FibVec(nos,noj)=Materialpara_esh(ibdy,ntem,noj)
            if(nos .eq. 1) then
               n_FibVec(1:3) =crFibCrv_esh(ibdy,ne,1:3)
               n3_FibVec(1:3)=crFibCrv_esh(ibdy,ne,4:6)
            endif
            endif
            do noj=1,2
               sx(noj,nos)=coorcurv_esh(ibdy,ne,nos,noj)
            enddo
         enddo

         if(itype .eq. 0) then
             xj1=x(4,1);xj2=x(7,1);xj3=x(8,1)
             yj1=x(4,2);yj2=x(7,2);yj3=x(8,2)
             zj1=x(4,3);zj2=x(7,3);zj3=x(8,3)
         else
             xj1=x(1,1);xj2=x(2,1);xj3=x(itype+1,1)
             yj1=x(1,2);yj2=x(2,2);yj3=x(itype+1,2)
             zj1=x(1,3);zj2=x(2,3);zj3=x(itype+1,3)
         endif
 
             tmpv1(1)=xj2-xj1
             tmpv1(2)=yj2-yj1
             tmpv1(3)=zj2-zj1
             tmpv2(1)=xj3-xj1
             tmpv2(2)=yj3-yj1
             tmpv2(3)=zj3-zj1
            call crossvec(tmpv3,tmpv1,tmpv2)


            tmpv1x(1)=xpcenter_esh(ibdy,ne,1)
            tmpv1x(2)=xpcenter_esh(ibdy,ne,2)
            tmpv1x(3)=xpcenter_esh(ibdy,ne,3)

        if(itype .eq. 0) then
             if (ExternalPressureFlag(ibdyg)) then
             
             fibm1cont_esh(nea_esh(ibdy,ne,4))=
     &                            fibm1cont_esh(nea_esh(ibdy,ne,4))+
     &                                 tmpv3(1)*tmpv1x(1)
             fibm1cont_esh(nea_esh(ibdy,ne,7))=
     &                            fibm1cont_esh(nea_esh(ibdy,ne,7))+
     &                                 tmpv3(1)*tmpv1x(2)
             fibm1cont_esh(nea_esh(ibdy,ne,8))=
     &                            fibm1cont_esh(nea_esh(ibdy,ne,8))+
     &                                 tmpv3(1)*tmpv1x(3)

             fibm1pres_esh(nea_esh(ibdy,ne,4))=
     &                            fibm1pres_esh(nea_esh(ibdy,ne,4))+
     &                                 tmpv3(1)*area(ibdy,ne)/3.0
             fibm1pres_esh(nea_esh(ibdy,ne,7))=
     &                            fibm1pres_esh(nea_esh(ibdy,ne,7))+
     &                                 tmpv3(1)*area(ibdy,ne)/3.0
             fibm1pres_esh(nea_esh(ibdy,ne,8))=
     &                            fibm1pres_esh(nea_esh(ibdy,ne,8))+
     &                                 tmpv3(1)*area(ibdy,ne)/3.0

             fibm2cont_esh(nea_esh(ibdy,ne,4))=
     &                            fibm2cont_esh(nea_esh(ibdy,ne,4))+
     &                                 tmpv3(2)*tmpv1x(1)
             fibm2cont_esh(nea_esh(ibdy,ne,7))=
     &                            fibm2cont_esh(nea_esh(ibdy,ne,7))+
     &                                 tmpv3(2)*tmpv1x(2)
             fibm2cont_esh(nea_esh(ibdy,ne,8))=
     &                            fibm2cont_esh(nea_esh(ibdy,ne,8))+
     &                                 tmpv3(2)*tmpv1x(3)
             fibm2pres_esh(nea_esh(ibdy,ne,4))=
     &                            fibm2pres_esh(nea_esh(ibdy,ne,4))+
     &                                 tmpv3(2) *area(ibdy,ne)/3.0
             fibm2pres_esh(nea_esh(ibdy,ne,7))=
     &                            fibm2pres_esh(nea_esh(ibdy,ne,7))+
     &                                 tmpv3(2)  *area(ibdy,ne)/3.0
             fibm2pres_esh(nea_esh(ibdy,ne,8))=
     &                            fibm2pres_esh(nea_esh(ibdy,ne,8))+
     &                                 tmpv3(2)  *area(ibdy,ne)/3.0

             fibm3cont_esh(nea_esh(ibdy,ne,4))=
     &                            fibm3cont_esh(nea_esh(ibdy,ne,4))+
     &                                 tmpv3(3)*tmpv1x(1)
             fibm3cont_esh(nea_esh(ibdy,ne,7))=
     &                            fibm3cont_esh(nea_esh(ibdy,ne,7))+
     &                                 tmpv3(3)*tmpv1x(2)
             fibm3cont_esh(nea_esh(ibdy,ne,8))=
     &                            fibm3cont_esh(nea_esh(ibdy,ne,8))+
     &                                 tmpv3(3)*tmpv1x(3)

             fibm3pres_esh(nea_esh(ibdy,ne,4))=
     &                            fibm3pres_esh(nea_esh(ibdy,ne,4))+
     &                                 tmpv3(3)  *area(ibdy,ne)/3.0
             fibm3pres_esh(nea_esh(ibdy,ne,7))=
     &                            fibm3pres_esh(nea_esh(ibdy,ne,7))+
     &                                 tmpv3(3)  *area(ibdy,ne)/3.0
             fibm3pres_esh(nea_esh(ibdy,ne,8))=
     &                            fibm3pres_esh(nea_esh(ibdy,ne,8))+
     &                                 tmpv3(3)  *area(ibdy,ne)/3.0
             endif
             if(nea_esh(ibdy,ne,4) .le. ns_ibm_r_esh(ibdy))
     &       areapnt_esh(ibdy,nea_esh(ibdy,ne,4))=
     &                  areapnt_esh(ibdy,nea_esh(ibdy,ne,4))
     &                                   +area(ibdy,ne)/3.0
             if(nea_esh(ibdy,ne,7) .le. ns_ibm_r_esh(ibdy))
     &        areapnt_esh(ibdy,nea_esh(ibdy,ne,7))=
     &                  areapnt_esh(ibdy,nea_esh(ibdy,ne,7))
     &                                   +area(ibdy,ne)/3.0
             if(nea_esh(ibdy,ne,8) .le. ns_ibm_r_esh(ibdy))
     &       areapnt_esh(ibdy,nea_esh(ibdy,ne,8))=
     &                  areapnt_esh(ibdy,nea_esh(ibdy,ne,8))
     &                                   +area(ibdy,ne)/3.0

!             xpnt_esh(ibdy,nea_esh(ibdy,ne,4))=
!     &                  xpnt_esh(ibdy,nea_esh(ibdy,ne,4))
!     &                                 +tmpv1x(1)
!             xpnt_esh(ibdy,nea_esh(ibdy,ne,7))=
!     &                  xpnt_esh(ibdy,nea_esh(ibdy,ne,7))
!     &                                 +tmpv1x(2)
!             xpnt_esh(ibdy,nea_esh(ibdy,ne,8))=
!     &                  xpnt_esh(ibdy,nea_esh(ibdy,ne,8))
!     &                                 +tmpv1x(3)


        else
             noj=itype+1
             if (ExternalPressureFlag(ibdyg)) then
             fibm1cont_esh(nea_esh(ibdy,ne,1))=
     &                            fibm1cont_esh(nea_esh(ibdy,ne,1))+
     &                                 tmpv3(1)*tmpv1x(1)
             fibm1cont_esh(nea_esh(ibdy,ne,2))=
     &                            fibm1cont_esh(nea_esh(ibdy,ne,2))+
     &                                 tmpv3(1)*tmpv1x(2)
             fibm1cont_esh(nea_esh(ibdy,ne,noj))=
     &                            fibm1cont_esh(nea_esh(ibdy,ne,noj))+
     &                                 tmpv3(1)*tmpv1x(3)

             fibm1pres_esh(nea_esh(ibdy,ne,1))=
     &                            fibm1pres_esh(nea_esh(ibdy,ne,1))+
     &                                 tmpv3(1)  *area(ibdy,ne)/3.0
             fibm1pres_esh(nea_esh(ibdy,ne,2))=
     &                            fibm1pres_esh(nea_esh(ibdy,ne,2))+
     &                                 tmpv3(1)  *area(ibdy,ne)/3.0
             fibm1pres_esh(nea_esh(ibdy,ne,noj))=
     &                            fibm1pres_esh(nea_esh(ibdy,ne,noj))+
     &                                 tmpv3(1)  *area(ibdy,ne)/3.0

             fibm2cont_esh(nea_esh(ibdy,ne,1))=
     &                            fibm2cont_esh(nea_esh(ibdy,ne,1))+
     &                                 tmpv3(2)*tmpv1x(1)
             fibm2cont_esh(nea_esh(ibdy,ne,2))=
     &                            fibm2cont_esh(nea_esh(ibdy,ne,2))+
     &                                 tmpv3(2)*tmpv1x(2)
             fibm2cont_esh(nea_esh(ibdy,ne,noj))=
     &                            fibm2cont_esh(nea_esh(ibdy,ne,noj))+
     &                                 tmpv3(2)*tmpv1x(3)

             fibm2pres_esh(nea_esh(ibdy,ne,1))=
     &                            fibm2pres_esh(nea_esh(ibdy,ne,1))+
     &                                 tmpv3(2)  *area(ibdy,ne)/3.0
             fibm2pres_esh(nea_esh(ibdy,ne,2))=
     &                            fibm2pres_esh(nea_esh(ibdy,ne,2))+
     &                                 tmpv3(2)  *area(ibdy,ne)/3.0
             fibm2pres_esh(nea_esh(ibdy,ne,noj))=
     &                            fibm2pres_esh(nea_esh(ibdy,ne,noj))+
     &                                 tmpv3(2)  *area(ibdy,ne)/3.0

             fibm3cont_esh(nea_esh(ibdy,ne,1))=
     &                            fibm3cont_esh(nea_esh(ibdy,ne,1))+
     &                                 tmpv3(3)*tmpv1x(1)

             fibm3cont_esh(nea_esh(ibdy,ne,2))=
     &                            fibm3cont_esh(nea_esh(ibdy,ne,2))+
     &                                 tmpv3(3)*tmpv1x(2)

             fibm3cont_esh(nea_esh(ibdy,ne,noj))=
     &                           fibm3cont_esh(nea_esh(ibdy,ne,noj))+

     &                                 tmpv3(3)*tmpv1x(3)

             fibm3pres_esh(nea_esh(ibdy,ne,1))=
     &                            fibm3pres_esh(nea_esh(ibdy,ne,1))+
     &                                 tmpv3(3)  *area(ibdy,ne)/3.0
             fibm3pres_esh(nea_esh(ibdy,ne,2))=
     &                            fibm3pres_esh(nea_esh(ibdy,ne,2))+
     &                                 tmpv3(3) *area(ibdy,ne)/3.0
             fibm3pres_esh(nea_esh(ibdy,ne,noj))=
     &                           fibm3pres_esh(nea_esh(ibdy,ne,noj))+
     &                                 tmpv3(3)  *area(ibdy,ne)/3.0
           endif

             if(nea_esh(ibdy,ne,1) .le. ns_ibm_r_esh(ibdy))
     &       areapnt_esh(ibdy,nea_esh(ibdy,ne,1))=
     &                  areapnt_esh(ibdy,nea_esh(ibdy,ne,1))
     &                                   +area(ibdy,ne)/3.0
             if(nea_esh(ibdy,ne,2) .le. ns_ibm_r_esh(ibdy))
     &       areapnt_esh(ibdy,nea_esh(ibdy,ne,2))=
     &                  areapnt_esh(ibdy,nea_esh(ibdy,ne,2))
     &                                   +area(ibdy,ne)/3.0
             if(nea_esh(ibdy,ne,3) .le. ns_ibm_r_esh(ibdy))
     &       areapnt_esh(ibdy,nea_esh(ibdy,ne,noj))=
     &                  areapnt_esh(ibdy,nea_esh(ibdy,ne,noj))
     &                                   +area(ibdy,ne)/3.0


!             xpnt_esh(ibdy,nea_esh(ibdy,ne,1))=
!     &                  xpnt_esh(ibdy,nea_esh(ibdy,ne,1))
!     &                                 +tmpv1x(1)
!             xpnt_esh(ibdy,nea_esh(ibdy,ne,2))=
!     &                  xpnt_esh(ibdy,nea_esh(ibdy,ne,2))
!     &                                 +tmpv1x(2)
!             xpnt_esh(ibdy,nea_esh(ibdy,ne,noj))=
!     &                  xpnt_esh(ibdy,nea_esh(ibdy,ne,noj))
!     &                                 +tmpv1x(3)

         endif

         mass=0.0
         ks=0.0
         kb=0.0

         do i=1,ngau
            wei_i=wei(i)
            s(1,1:ntype)=nn(jtype,i,1:ntype)
            dsdv(1,1:ntype)=dnndv(jtype,i,1:ntype)
            dsdv(2,1:ntype)=dnndw(jtype,i,1:ntype)
            ddsdvdv(1,1:ntype)=ddnndvdv(jtype,i,1:ntype)
            ddsdvdv(2,1:ntype)=ddnndvdw(jtype,i,1:ntype)
            ddsdvdv(3,1:ntype)=ddnndwdw(jtype,i,1:ntype)

             do noi=1,2
               do noj=1,2
                  jmat(noj,noi)=
     &              dot_product(dsdv(noj,1:ntype),sx(noi,1:ntype))
               end do
               do noj=1,3
                  gmat(noj,noi)=
     &              dot_product(ddsdvdv(noj,1:ntype),sx(noi,1:ntype))
               end do
             end do 
             hmat(1,1)= jmat(1,1)**2
             hmat(2,1)= jmat(1,1)*jmat(2,1)
             hmat(3,1)= jmat(2,1)**2  
             hmat(1,2)= 2.0*jmat(1,1)*jmat(1,2)
             hmat(2,2)= jmat(1,1)*jmat(2,2)+jmat(1,2)*jmat(2,1)
             hmat(3,2)= 2.0*jmat(2,1)*jmat(2,2) 
             hmat(1,3)= jmat(1,2)**2
             hmat(2,3)= jmat(1,2)*jmat(2,2)
             hmat(3,3)= jmat(2,2)**2  

             wei_i=wei_i
     &             *abs(jmat(1,1)*jmat(2,2)-jmat(1,2)*jmat(2,1))
 !            area(ibdy,ne)=area(ibdy,ne)+wei_i
             call invert(jmat,2)
             call invert(hmat,3)
  
             amat1(1:2,1:ntype)=matmul(jmat,dsdv(1:2,1:ntype))
             amat2(1:3,1:ntype)=matmul(gmat,amat1(1:2,1:ntype))   ! shape for memebrane effect
             amat2(1:3,1:ntype)=ddsdvdv(1:3,1:ntype)-amat2(1:3,1:ntype)
             amat2(1:3,1:ntype)=matmul(hmat,amat2(1:3,1:ntype)) !shape for bending part

             do noj=1,3
                xpos(noj)=dot_product(s(1,1:ntype),x(1:ntype,noj))
                do noi=1,2
                   dxpos(noi,noj)=
     &               dot_product(amat1(noi,1:ntype),x(1:ntype,noj))
                end do
                do noi=1,3
                   d2xpos(noi,noj)=
     &             dot_product(amat2(noi,1:ntype),x(1:ntype,noj))
                end do
             end do

             noi=1
             noj=1
             dmat(noi,noj)=1/2.0*
     &        dot_product(dxpos(noi,1:3),dxpos(noj,1:3))
     &        -dmat0_esh(ibdy,ne,i,noi,noj)
             kmatbar(noi,noj)=sqrt(
     &        dot_product(d2xpos(noi,1:3),d2xpos(noj,1:3)))
             noi=1
             noj=2
             dmat(noi,noj)=1/2.0*
     &        dot_product(dxpos(noi,1:3),dxpos(noj,1:3))
     &        -dmat0_esh(ibdy,ne,i,noi,noj)
             kmatbar(noi,noj)=sqrt(
     &        dot_product(d2xpos(noj,1:3),d2xpos(noj,1:3)))
             kmatbar(noj,noi)=kmatbar(noi,noj)
             dmat(noj,noi)=dmat(noi,noj)

             noi=2
             noj=2
             dmat(noi,noj)=1/2.0*
     &        dot_product(dxpos(noi,1:3),dxpos(noj,1:3))
     &        -dmat0_esh(ibdy,ne,i,noi,noj)
             kmatbar(noi,noj)=sqrt(dot_product(d2xpos(noj+1,1:3)
     &        ,d2xpos(noj+1,1:3)))

             kmat=kmatbar-kmat0_esh(ibdy,ne,i,1:2,1:2)


             iner1=2.0*(dmat(1,1)+dmat(2,2))
             iner2=2.0*(dmat(1,1)+dmat(2,2))
     &        +4.0*(dmat(1,1)*dmat(2,2)-dmat(1,2)*dmat(2,1))

             jner1= kmat(1,1)+kmat(2,2)
             jner2= kmat(1,1)*kmat(2,2)-kmat(1,2)*kmat(2,1)

! neo-hookean membrane Ws=\phi/2 (I_1 -1 + 1/(I_2+1))
! phi_mem_coef(1)=\phi
            if(MaterialTypeIBM(ibdyg) .eq. 1) then
            smat(1,1)=phi_mem_coef(ibdyg,1)
     &        *(1.0-(1.0+2.0*dmat(2,2))/(iner2+1.0)**2)
            smat(1,2)=phi_mem_coef(ibdyg,1)
     &        *(2.0*dmat(2,1)/(iner2+1.0)**2)
            smat(2,1)=smat(1,2)
            smat(2,2)=phi_mem_coef(ibdyg,1)
     &        *(1.0-(1.0+2.0*dmat(1,1))/(iner2+1.0)**2)
            elseif(MaterialTypeIBM(ibdyg) .eq. 2) then 
! skalak (SK) membrane Ws=\phi/2 (1/2 I_1^2 + I_1 - I_2 + C/2 I_2^2)
! phi_mem_coef(1)=\phi
! phi_mem_coef(2)=C
            smat(1,1)=phi_mem_coef(ibdyg,1)
     &             * (  iner1+1.0+(1.0+2.0*dmat(2,2))
     &                *(phi_mem_coef(ibdyg,2)*iner2-1)   )
            smat(2,2)=phi_mem_coef(ibdyg,1)
     &              *(  iner1+1.0+(1.0+2.0*dmat(1,1))
     &                *(phi_mem_coef(ibdyg,2)*iner2-1)   )
            smat(1,2)=-2.0d0*phi_mem_coef(ibdyg,1)*dmat(1,2)
     &                *(phi_mem_coef(ibdyg,2)*iner2-1)
            smat(2,1)=smat(1,2)
            elseif(MaterialTypeIBM(ibdyg) .eq. 3) then 
! Fung tissue model for heart valve

           if(Fibrous_Esh(ibdy ) .eq. 1) then
             do noj=1,3
                xposFib(noj)=
     &           dot_product(s(1,1:ntype),x_FibVec(1:ntype,noj))
             end do

             call crossvec(tmpv3,n_FibVec,xposFib)
             temp_ibm2=dot_product(n3_FibVec,tmpv3)
             if(temp_ibm2 .ge. 0.0)then
                temp_ibm2=1.0
             else
                temp_ibm2=-1.0
             endif
             tmpv3(1)=dot_product(xposFib,xposFib)
             tmpv3(2)=dot_product(n_FibVec,n_FibVec)
             tmpv3(3)=dot_product(n_FibVec,xposFib)
             temp_ibm1=temp_ibm2*acos(tmpv3(3)/sqrt(tmpv3(1)*tmpv3(2)))

             tmpv3(1)=(cos(temp_ibm1))**2
             tmpv3(2)=(sin(temp_ibm1))**2
             tmpv3(3)=sin(temp_ibm1)*cos(temp_ibm1)

             R_Fibmat(1,1:3)=(/tmpv3(1),tmpv3(2),2.0*tmpv3(3)/)
             R_Fibmat(2,1:3)=(/tmpv3(2),tmpv3(1),-2.0*tmpv3(3)/)
             R_Fibmat(3,1:3)=(/-tmpv3(3),tmpv3(3),tmpv3(1)-tmpv3(2)/)

             tmpv3(1)=dmat(1,1)
             tmpv3(2)=dmat(2,2)
             tmpv3(3)=dmat(1,2)   

             tmpv2=matmul(R_Fibmat,tmpv3)
             dmat(1,1)=tmpv2(1)
             dmat(2,2)=tmpv2(2)
             dmat(1,2)=tmpv2(3)
             dmat(2,1)=dmat(1,2)

           endif
            

            temp_ibm1=phi_mem_coef(ibdyg,2)*dmat(1,1)**2
     &           +phi_mem_coef(ibdyg,3)*dmat(2,2)**2
     &           +2.0*phi_mem_coef(ibdyg,4)*dmat(2,2)*dmat(1,1)
     &           +phi_mem_coef(ibdyg,5)*((dmat(1,2)+dmat(2,1))/2)**2
     &           +phi_mem_coef(ibdyg,6)*dmat(1,1)*(dmat(1,2)+dmat(2,1))
     &           +phi_mem_coef(ibdyg,7)*dmat(2,2)*(dmat(1,2)+dmat(2,1))


            temp_ibm2=phi_mem_coef(ibdyg,1)/2.0d0*exp(temp_ibm1)
             
            smat(1,1)=(
     &                2.0*phi_mem_coef(ibdyg,2)*dmat(1,1)
     &               +2.0*phi_mem_coef(ibdyg,4)*dmat(2,2)
     &               +phi_mem_coef(ibdyg,6)*(dmat(1,2)+dmat(2,1)))
     &               *temp_ibm2

            smat(2,2)=(
     &                2.0*phi_mem_coef(ibdyg,3)*dmat(2,2)
     &               +2.0*phi_mem_coef(ibdyg,4)*dmat(1,1)
     &               +phi_mem_coef(ibdyg,7)*(dmat(1,2)+dmat(2,1)))
     &               *temp_ibm2


            smat(1,2)=(
     &                phi_mem_coef(ibdyg,5)/2.0d0*(dmat(2,1)+dmat(1,2))
     &               +phi_mem_coef(ibdyg,6)*dmat(1,1)
     &               +phi_mem_coef(ibdyg,7)*dmat(2,2))
     &               *temp_ibm2
            smat(2,1)=smat(1,2)

           if(Fibrous_Esh(ibdy) .eq. 1) then
            R_Fibmat(1:2,3)=-R_Fibmat(1:2,3)
            R_Fibmat(3,1:2)=-R_Fibmat(3,1:2)

             tmpv3(1)=smat(1,1)
             tmpv3(2)=smat(2,2)
             tmpv3(3)=smat(1,2)   

             tmpv2=matmul(R_Fibmat,tmpv3)
             smat(1,1)=tmpv2(1)
             smat(2,2)=tmpv2(2)
             smat(1,2)=tmpv2(3)
             smat(2,1)=smat(1,2)

           endif



            endif

            !call invertelement(kmatbar,2) 
            
            do noi=1,2
              do noj=1,2
                 kmatbar(noi,noj)=1.0/(kmatbar(noi,noj)+1.0e-9)
              enddo
            enddo
            
            
            bmat(1:3,1:3)=0.0          
            bmat(1,1)=phi_ben_coef(ibdyg)
     &        *(kmat(1,1)+phi_nus_coef(ibdyg)*kmat(2,2))*kmatbar(1,1)
            bmat(2,2)=phi_ben_coef(ibdyg)
     &        *(1.0-phi_nus_coef(ibdyg))*kmat(2,1)*kmatbar(1,2)
            bmat(2,2)=bmat(2,2)
     &        +phi_ben_coef(ibdyg)
     &        *(1.0-phi_nus_coef(ibdyg))*kmat(1,2)*kmatbar(2,1)
            bmat(3,3)=phi_ben_coef(ibdyg)
     &        *(kmat(2,2)+phi_nus_coef(ibdyg)*kmat(1,1))*kmatbar(2,2)

                ks(1:ntype,1:ntype)=ks(1:ntype,1:ntype)
     &             +wei_i*matmul(matmul(transpose(amat1(1:2,1:ntype))
     &             ,smat),amat1(1:2,1:ntype))

                kb(1:ntype,1:ntype)=kb(1:ntype,1:ntype)
     &             +wei_i*matmul(matmul(transpose(amat2(1:3,1:ntype))
     &             ,bmat),amat2(1:3,1:ntype))


                call ecmat(ms(1:ntype,1:ntype),s(1,1:ntype),ntype,1)
                mass(1:ntype,1:ntype)=mass(1:ntype,1:ntype)
     &             +wei_i*ms(1:ntype,1:ntype)

           end do  ! gauss

           do noi=1,ntype
              ntemi=nea_esh(ibdy,ne,noi)
              do noj=1,ntype
                 ntemj=nea_esh(ibdy,ne,noj)
                 kks(ntemi,ntemj)=kks(ntemi,ntemj)+  ks(noi,noj)
                 kkb(ntemi,ntemj)=kkb(ntemi,ntemj)+  kb(noi,noj)
                 mms(ntemi,ntemj)=mms(ntemi,ntemj)+mass(noi,noj)
               end do
            end do
 
        end do  !element

         

!~~~~~~~~~~~~~~ Nodal oprator
        if (ExternalPressureFlag(ibdyg)) then

        i=ibdy  
        include "distIBM_normalPressure_fn.Fi"   !I need to readjust Fi file
        temp_ibm1=temp_ibm2*p_inflation
        do j=1,ns_ibm_r_esh(i)
             fibm1_esh(i,j)=fibm1_esh(i,j)
     &          -fibm1pres_esh(j)  /areapnt_esh(i,j)
     &          *temp_ibm1
             fibm2_esh(i,j)=fibm2_esh(i,j)
     &          -fibm2pres_esh(j)  /areapnt_esh(i,j)
     &          *temp_ibm1
             fibm3_esh(i,j)=fibm3_esh(i,j)
     &          -fibm3pres_esh(j)  /areapnt_esh(i,j)
     &          *temp_ibm1

        end do
        endif
        i=ibdy  
         if(contacttype .eq. -1) then
            do j=1,ns_ibm_r_esh(i)
                dxcont(1)=fibm1cont_esh(j)
                dxcont(2)=fibm2cont_esh(j)
                dxcont(3)=fibm3cont_esh(j)
                ddcont=sqrt(dxcont(1)**2+dxcont(2)**2+dxcont(3)**2)+eps
                normalpres_esh(j,1)=dxcont(1)/ddcont
                normalpres_esh(j,2)=dxcont(2)/ddcont
                normalpres_esh(j,3)=dxcont(3)/ddcont
            enddo
        endif

        i=ibdy
        i2l=i      
        i2g=ibdyg    

          aamat_esh=0.d0
         aamat_esh(1: ns_ibm_r_esh(i)+ns_ibm_i_esh(i)
     &        ,1: ns_ibm_r_esh(i)+ns_ibm_i_esh(i))
     &    =(density_coef(i2g)*timeMarchcoef(8)
     &     +(cs_ibm(i2g)+propDamp(i2g,1)*density_coef(i2g))
     &                *timeMarchcoef(9))*
     &        mms(1: ns_ibm_r_esh(i)+ns_ibm_i_esh(i)
     &           ,1: ns_ibm_r_esh(i)+ns_ibm_i_esh(i))
     &     +(propDamp(i2g,2)*timeMarchcoef(9)+timeMarchcoef(10))
     &      *(  kks(1: ns_ibm_r_esh(i)+ns_ibm_i_esh(i)
     &           ,1: ns_ibm_r_esh(i)+ns_ibm_i_esh(i))
     &         +kkb(1: ns_ibm_r_esh(i)+ns_ibm_i_esh(i)
     &           ,1: ns_ibm_r_esh(i)+ns_ibm_i_esh(i)) )

        do j=1,target_num(i2g)
             k=target_point_num_esh(i,j)
             temp_ibm1=
     &          (X_na_esh(k,1)-Xtar_na_esh(j,1))
             temp_ibm2=
     &          (X_na_esh(k,2)-Xtar_na_esh(j,2))
             temp_ibm3=
     &          (X_na_esh(k,3)-Xtar_na_esh(j,3))

             include "distIBM_target_k_rampfn.Fi"               
             if(time_alphaf .le. target_t_link_esh(i,j)) then
                ksh_tmp=target_k_link_esh(i,j)*target_timefn
             else
                ksh_tmp=0.0
             endif
             force_points_esh(i,j,1)=k_link*temp_ibm1*ksh_tmp
             force_points_esh(i,j,2)=k_link*temp_ibm2*ksh_tmp
             force_points_esh(i,j,3)=k_link*temp_ibm3*ksh_tmp

             temp_ibm1=dXtar_na_esh(j,1)
             temp_ibm2=dXtar_na_esh(j,2)
             temp_ibm3=dXtar_na_esh(j,3)

             temp_ibm1=dX_na_esh(k,1)-temp_ibm1
             temp_ibm2=dX_na_esh(k,2)-temp_ibm2
             temp_ibm3=dX_na_esh(k,3)-temp_ibm3

             temp2_ibm= cs_ibm_target(i2g)*k_link*temp_ibm1*ksh_tmp
             force_points_esh(i,j,1)=force_points_esh(i,j,1)+temp2_ibm


             temp2_ibm= cs_ibm_target(i2g)*k_link*temp_ibm2*ksh_tmp
             force_points_esh(i,j,2)=force_points_esh(i,j,2)+temp2_ibm

             temp2_ibm= cs_ibm_target(i2g)*k_link*temp_ibm3*ksh_tmp
             force_points_esh(i,j,3)=force_points_esh(i,j,3)+temp2_ibm

             f_link1_esh(i,k)=force_points_esh(i,j,1)
             f_link2_esh(i,k)=force_points_esh(i,j,2)
             f_link3_esh(i,k)=force_points_esh(i,j,3)
       enddo

        if(ndim .gt. 2) then
          ddcont=(min_grid_x*min_grid_y*min_grid_z)**(1.0/3.0)
        else
          ddcont=sqrt(min_grid_x*min_grid_y)
        endif
       
       i=ibdy
       i2g=ibdyg
       if(ContactForceFlag(i2g))then

       include "distIBM_Contact_Coeffn.Fi"   
       if(contacttype .ne. -1) then
         write(*,*) 'Implicit version is not implemented yet!'
         STOP
       endif

       do j2=1,ns_ibm_r_esh(i)
       do i2=1,nFixcontact
                        if((
     &                     abs((X_na_esh(j2,2)-
     &                          xFixcontact(i2,2))/min_grid_y)
     &                    .le.12.0) .and.
     &                    (abs((X_na_esh(j2,1)-
     &                          xFixcontact(i2,1))/min_grid_x)
     &                    .le.12.0) .and.
     &                    (abs((X_na_esh(j2,3)-
     &                          xFixcontact(i2,3))/min_grid_z)
     &                    .le.12.0) ) then
                              ksh_tmp=X_na_esh(j2,1)

                              temp_ibm1= 
     &                              ((X_na_esh(j2,2)
     &                               -xFixcontact(i2,2))
     &                           /(2.0*min_grid_y) )
                              call delta_fun(delta_typey,temp_ibm1,fn2)
                              temp_ibm2= 
     &                              ((ksh_tmp
     &                               -xFixcontact(i2,1))
     &                           /(2.0*min_grid_x) )
                              call delta_fun(delta_typex,temp_ibm2,fn1)
                              if(ndim .gt. 2)  then 
                                 temp_ibm3= 
     &                              ((X_na_esh(j2,3)
     &                               -xFixcontact(i2,3))
     &                              /(2.0*min_grid_z) )
                                  call 
     &                              delta_fun(delta_typez,temp_ibm3,fn3)
                              else
                                   temp_ibm3=0.0
                                   fn3=1.0
                              endif
                              temp3_ibm=
     &                        sqrt((temp_ibm1*min_grid_y)**2
     &                            +(temp_ibm2*min_grid_x)**2
     &                            +(temp_ibm3*min_grid_z)**2)*2.00
     &                            +1.0d-9
                              f_impuls1_esh(i,j2)= f_impuls1_esh(i,j2)+
     &                               fn1*fn2*fn3*areapnt_esh(i,j2)
     &                               *ds_ibm_esh(i,j2)*impactpen(1)
     &                               /(min_grid_x*min_grid_y*min_grid_z)
     &                               *(ksh_tmp-xFixcontact(i2,1))
     &                               /temp3_ibm
                              f_impuls2_esh(i,j2)= f_impuls2_esh(i,j2)+
     &                               fn1*fn2*fn3*areapnt_esh(i,j2)
     &                              *ds_ibm_esh(i,j2)*impactpen(1)
     &                              /(min_grid_x*min_grid_y*min_grid_z)
     &                              *(X_na_esh(j2,2)
     &                               -xFixcontact(i2,2))
     &                               /temp3_ibm
                              if(ndim .gt. 2)  
     &                           f_impuls3_esh(i,j2)=
     &                              f_impuls3_esh(i,j2)+
     &                               fn1*fn2*fn3*areapnt_esh(i,j2)
     &                              *ds_ibm_esh(i,j2)*impactpen(1)
     &                              /(min_grid_x*min_grid_y*min_grid_z)
     &                              *(X_na_esh(j2,1)
     &                               -xFixcontact(i2,3))
     &                               /temp3_ibm
             endif
       enddo
       enddo

       if(contacttype .eq. -1) then        
        if (i2g .le. nr_ibm_f) then
           do ibkt2=1,NBucketnum

             ibktmp1=mod(ibkt2,IBucketnum(1)*IBucketnum(2))
             if(ibktmp1 .eq. 0) ibktmp1=IBucketnum(1)*IBucketnum(2)

             ibktx=mod(ibktmp1,IBucketnum(1))
             if(ibktx .eq. 0) ibktx=IBucketnum(1)

             ibkty=int((ibktmp1-1)/IBucketnum(1))+1
             ibktz=int((ibkt2-1)/(IBucketnum(1)*IBucketnum(2)))+1

             ibktmin(1)=max(1,ibktx-1)
             ibktmax(1)=min(IBucketnum(1),ibktx+1)

             ibktmin(2)=max(1,ibkty-1)
             ibktmax(2)=min(IBucketnum(2),ibkty+1)

             ibktmin(3)=max(1,ibktz-1)
             ibktmax(3)=min(IBucketnum(3),ibktz+1)
             do ibkt_i=PBucket(i2g,ibkt2),PBucket(i2g,ibkt2+1)-1
                j2 =sBucket_esh(i,ibkt2,ibkt_i)
               do i2=1,nr_ibm_esh
                  i3g=Ilocglb_esh(i2)
                  if(i3g .le. nr_ibm_fb) then
                  if(i2 .ne. i) then
                    do ibkts1=ibktmin(1),ibktmax(1)
                    do ibkts2=ibktmin(2),ibktmax(2)
                    do ibkts3=ibktmin(3),ibktmax(3)
                      ibkt=
     &                       ibkts1
     &                     +(ibkts2-1)*IBucketnum(1)
     &                     +(ibkts3-1)*IBucketnum(1)*IBucketnum(2)

                      do ibkt2_i=PBucket(i3g,ibkt),PBucket(i3g,ibkt+1)-1
                         j =sBucket_esh(i2,ibkt,ibkt2_i) 

                           outcont(1)=X_na_esh(j2,1)-
     &                                gx_ibm_esh(i2,j)
                           outcont(2)=X_na_esh(j2,2)-
     &                                gy_ibm_esh(i2,j)
                           outcont(3)=X_na_esh(j2,3)-
     &                                gz_ibm_esh(i2,j)                    
                           outcont2(1)=normalpres_esh(j2,1)
                           outcont2(2)=normalpres_esh(j2,2)
                           outcont2(3)=normalpres_esh(j2,3)
                        ksh_tmp=sqrt(
     &                     outcont(1)**2+
     &                     outcont(2)**2+
     &                     outcont(3)**2)

                     dncont=dot_product(outcont(1:3),outcont2(1:3))
                     dncont=-dncont/(abs(dncont)+eps)

                        temp_ibm2=time_alphaf  


                        if( (ksh_tmp/ddcont   .le. 10.0) 
     &                .and. (temp_ibm2 .gt. 0.05) ) then
                              temp_ibm1= 
     &                            max(ksh_tmp*dncont/ddcont,0.0)
                              call delta_fun(delta_typey,temp_ibm1,fn1)

                              temp3_ibm=ksh_tmp
                              dxcont(1)=temp_ibm1 !max(ksh_tmp*dncont,0.0)/ddcont
                              dxcont(2)=1.0/(1+exp(10*(dxcont(1)-0.0)))
                              dxcont(3)=impactpen(1)
     &                            +dxcont(2)*impactpen(2)
                              dxcont(3)=dxcont(3)*dncont
                          
                              ksh_tmp=1.0 

                              f_impuls1_esh(i,j2)=
     &                                f_impuls1_esh(i,j2)+
     &                               fn1*2.0*areapnt_esh(i,j2)
     &                               *dxcont(3)*ksh_tmp
     &                               *( X_na_esh(j2,1)
     &                                 -gx_ibm_esh(i2,j))
     &                               /temp3_ibm


                              f_impuls2_esh(i,j2)=
     &                                f_impuls2_esh(i,j2)+
     &                               fn1*2.0*areapnt_esh(i,j2)
     &                               *dxcont(3)*ksh_tmp
     &                              *(X_na_esh(j2,2)
     &                               -gy_ibm_esh(i2,j))
     &                               /temp3_ibm
                              if(ndim .gt. 2) then
                                 f_impuls3_esh(i,j2)=
     &                               f_impuls3_esh(i,j2)+
     &                               fn1*2.0*areapnt_esh(i,j2)
     &                              *dxcont(3)*ksh_tmp
     &                              *(X_na_esh(j2,3)
     &                               -gz_ibm_esh(i2,j))
     &                               /temp3_ibm

                              endif
                         endif
                     end do  !ibkt2_i
                     enddo   !ibkts1
                     enddo   !ibkts2
                     enddo   !ibkts3
                  endif
                  endif
               enddo   !i2i

!============  This part is skiped in implicit version END

             enddo !ibkt_i
             enddo !ibkt2
             if(contactplanesFlag(ibdyg)) then
               do ibkt2=1,Ncontactplanes(ibdyg) 
                contactplane_point(1:3)= 
     &                       contactplanesPara(ibdyg,ibkt2,1:3)
                contactplane_n(1:3)=
     &                       contactplanesPara(ibdyg,ibkt2,4:6)

                dncont=0.0
                do i2=1,3
                   dncont=dncont+contactplane_n(i2) 
     &                          *contactplane_point(i2)
                enddo
                contactplane_n(4)=-dncont  !plane defined as ax+by+cz+d=0, here we save d

               temp_ibm2=s_function((time_alphaf-contact_time_esh(i,1))
     &                              /contact_time_esh(i,2) )
                                
               temp_ibm2=time_alphaf

               do j2=1,ns_ibm_r_esh(i)
                  ksh_tmp=contactplane_n(1) 
     &                   *X_na_esh(j2,1) 
     &                   +contactplane_n(2) 
     &                   *X_na_esh(j2,2) 
     &                   +contactplane_n(3) 
     &                   *X_na_esh(j2,3) 
     &                   +contactplane_n(4)
                
                  if(ksh_tmp/ddcont   .le. 8.0) then

                              temp_ibm1= 
     &                            max(ksh_tmp/(2*ddcont)-0.5,0.0)
                              call delta_fun(delta_typey,temp_ibm1,fn1)

                              temp3_ibm=ksh_tmp/(2*ddcont)-0.5
                              dxcont(1)=temp3_ibm     !max(ksh_tmp*dncont,0.0)/ddcont

                              if(temp3_ibm .le.0.0) then 
                                dxcont(2)=2.0*(
     &                         1.0/(1+exp(6.0*(dxcont(1)-0.0)))-0.5)
                              else
                                dxcont(2)=0.0
                              endif
                              dxcont(3)=(impactpen(1)
     &                            +dxcont(2)*impactpen(2))
     &                            *contact_coef_esh(i,1,j2)*temp_ibm2

                               f_impuls1_esh(i,j2)=
     &                                f_impuls1_esh(i,j2)+
     &                               fn1*2.0*areapnt_esh(i,j2)
     &                               *dxcont(3)
     &                               *contactplane_n(1)

                              f_impuls2_esh(i,j2)=
     &                                f_impuls2_esh(i,j2)+
     &                               fn1*2.0*areapnt_esh(i,j2)
     &                               *dxcont(3)
     &                              *contactplane_n(2)

                              if(ndim .gt. 2) then
                                 f_impuls3_esh(i,j2)=
     &                               f_impuls3_esh(i,j2)+
     &                               fn1*2.0*areapnt_esh(i,j2)
     &                              *dxcont(3)
     &                              *contactplane_n(3)
                              endif
                   endif
                enddo !j2
             enddo !ibkt2

             endif !contactplanesFlag

             if(channelcontacty) then
             do j2=1,ns_ibm_r_esh(i)
               do i2=1,2  !with channel bndry in y
                     if(i2 .eq. 1) then
                        h_channel=gy(nygrid_ibm)
                        if (gy_ibm_massive_esh(i,j2) 
     &                      .lt. h_channel) then
                            ksh_tmp=X_na_esh(j2,2)
                        else
                           ksh_tmp=h_channel-1.0d-9
                        endif
                     else
                        h_channel=gy(2)
                        if (gy_ibm_massive_esh(i,j2) 
     &                      .gt. h_channel) then
                            ksh_tmp=X_na_esh(j2,2)
                        else
                           ksh_tmp=h_channel+1.0d-9
                        endif
                     endif
                     do j=1,nxgrid_ibm
                       do k=1,nzgrid_ibm
                        if((
     &                  abs((X_na_esh(j2,2)-h_channel)
     &                       /min_grid_y)
     &                 .le.12.0) .and.
     &                 (abs((X_na_esh(j2,1)-gx(j))
     &                       /min_grid_x)
     &                 .le.12.0) .and.
     &                 (abs((X_na_esh(j2,3)-gz(k))
     &                       /min_grid_z)
     &                 .le.12.0) ) then

                         temp_ibm1= 
     &                         ((ksh_tmp-h_channel)
     &                     /(min_grid_y))

                           call delta_fun(delta_typey,temp_ibm1,fn2)

                          temp_ibm2= 
     &                        ((X_na_esh(j2,1)-gx(j))
     &                     /(min_grid_x))

                           call delta_fun(delta_typex,temp_ibm2,fn1)

                          if(ndim .gt. 2) then
                             temp_ibm3= 
     &                          ((X_na_esh(j2,3)-gz(k))
     &                       /(min_grid_z) )
                           call delta_fun(delta_typez,temp_ibm3,fn3)
                          else
                             temp_ibm3=0.0
                             fn3=1.0
                          endif

                         temp3_ibm=
     &                   sqrt((temp_ibm1*min_grid_y)**2
     &                      +(temp_ibm2*min_grid_x)**2
     &                      +(temp_ibm3*min_grid_z)**2)+1.0d-9

                          f_impuls1_esh(i,j2)= f_impuls1_esh(i,j2)+
     &                               fn1*fn2*fn3*areapnt_esh(i,j2)
     &                        *ds_ibm_esh(i,j2)*impactpen(1)
     &                        /(min_grid_x*min_grid_y*min_grid_z)
     &                      *(X_na_esh(j2,1)-gx(j))/temp3_ibm
                          f_impuls2_esh(i,j2)= f_impuls2_esh(i,j2)+
     &                               fn1*fn2*fn3*areapnt_esh(i,j2)
     &                        *ds_ibm_esh(i,j2)*impactpen(1)
     &                        /(min_grid_x*min_grid_y*min_grid_z)
     &                        *(ksh_tmp-h_channel)/temp3_ibm
                          if(ndim .gt. 2) 
     &                    f_impuls3_esh(i,j2)= f_impuls3_esh(i,j2)+
     &                               fn1*fn2*fn3*areapnt_esh(i,j2)
     &                        *ds_ibm_esh(i,j2)*impactpen(1)
     &                        /(min_grid_x*min_grid_y*min_grid_z)
     &                      *(X_na_esh(j2,3)-gz(k))/temp3_ibm
                        endif
                    
                   end do !k=1,nz 
                 end do !j=1,nx
               enddo  !i2=1,2
             end do    !j2
             endif !channelcontacty

             if((channelcontactz) .and. (ndim .gt. 2)) then
             do j2=1,ns_ibm_r_esh(i)

               do i2=1,2  !with channel bndry in z

                     if(i2 .eq. 1) then
                        h_channel=gz(nzgrid_ibm)
                        if (X_na_esh(j2,3) 
     &                      .lt. h_channel) then
                            ksh_tmp=X_na_esh(j2,3)
                        else
                            ksh_tmp=h_channel-1.0d-9
                        endif
                     else
                        h_channel=gz(2)
                        if (X_na_esh(j2,3) 
     &                      .gt. h_channel) then
                            ksh_tmp=X_na_esh(j2,3)
                        else
                           ksh_tmp=h_channel+1.0d-9
                        endif
                     endif
                     do j=1,nxgrid_ibm
                       do k=1,nygrid_ibm
                        if((
     &                  abs((X_na_esh(j2,2)-gy(k))
     &                       /min_grid_y)
     &                 .le.12.0) .and.
     &                 (abs((X_na_esh(j2,1)-gx(j))
     &                       /min_grid_x)
     &                 .le.12.0) .and.
     &                 (abs((X_na_esh(j2,3)-h_channel)
     &                       /min_grid_z)
     &                 .le.12.0) ) then

                        temp_ibm1= 
     &                         ((X_na_esh(j2,2)-gy(k))
     &                       /(min_grid_y) )
                           call delta_fun(delta_typey,temp_ibm1,fn2)

                        temp_ibm2= 
     &                        ((X_na_esh(j2,1)-gx(j))
     &                     /(min_grid_x))
                           call delta_fun(delta_typex,temp_ibm2,fn1)

                        temp_ibm3= 
     &                          ((ksh_tmp-h_channel)
     &                       /(min_grid_z) )
                           call delta_fun(delta_typez,temp_ibm3,fn3)


                         temp3_ibm=
     &                   sqrt((temp_ibm1*min_grid_y)**2
     &                      +(temp_ibm2*min_grid_x)**2
     &                      +(temp_ibm3*min_grid_z)**2)+1.0d-9

                          f_impuls1_esh(i,j2)= f_impuls1_esh(i,j2)+
     &                               fn1*fn2*fn3*areapnt_esh(i,j2)
     &                        *ds_ibm_esh(i,j2)*impactpen(1)
     &                        /(min_grid_x*min_grid_y*min_grid_z)
     &                        *(X_na_esh(j2,1)-gx(j))
     &                       /temp3_ibm

                          f_impuls2_esh(i,j2)= f_impuls2_esh(i,j2)+
     &                               fn1*fn2*fn3*areapnt_esh(i,j2)
     &                        *ds_ibm_esh(i,j2)*impactpen(1)
     &                        /(min_grid_x*min_grid_y*min_grid_z)
     &                        *(X_na_esh(j2,2)-gy(k))
     &                       /temp3_ibm

                          f_impuls3_esh(i,j2)= f_impuls3_esh(i,j2)+
     &                               fn1*fn2*fn3*areapnt_esh(i,j2)
     &                        *ds_ibm_esh(i,j2)*impactpen(1)
     &                        /(min_grid_x*min_grid_y*min_grid_z)
     &                        *(ksh_tmp-h_channel)/temp3_ibm
                        endif
                    
                   end do !k=1,nz 
                 end do !j=1,nx
               enddo  !i2=1,2
             end do    !j2
             endif !channelcontactz
          endif   !for if ((i .le. nr_ibm_f).and.(i .ge. 1)) then
       endif  !contacttypeif of contact model
       endif  !ContactForceFlag(i)

!here 2-16-2015 7:02pm
c calculation of total forces 
       i=ibdy
       i2g=ibdyg

        do j=1,ns_ibm_r_esh(i)
             fibm1_esh(i,j)=fibm1_esh(i,j)
     &          +f_link1_esh(i,j)
             fibm2_esh(i,j)=fibm2_esh(i,j)
     &          +f_link2_esh(i,j)
             fibm3_esh(i,j)=fibm3_esh(i,j)
     &          +f_link3_esh(i,j)
        end do

       do j=1,ns_ibm_r_esh(i) 
           f_link1_esh(i,j)=density_coef(i2g)*ddX_na_esh(j,1)
     &      +(cs_ibm(i2g)
     &        +propDamp(i2g,1)*density_coef(i2g))*dX_na_esh(j,1)

           f_link2_esh(i,j)=density_coef(i2g)*ddX_na_esh(j,2)
     &      +(cs_ibm(i2g)
     &        +propDamp(i2g,1)*density_coef(i2g))*dX_na_esh(j,2)

           f_link3_esh(i,j)=density_coef(i2g)*ddX_na_esh(j,3)
     &      +(cs_ibm(i2g)
     &        +propDamp(i2g,1)*density_coef(i2g))*dX_na_esh(j,3)
       end do

      do np=1,ns_ibm_i_esh(ibdy)  
         npg=ns_ibm_r_esh(ibdy)+np
         bodypoint(1)=boundrylist_esh(ibdy,np,1)
         bodypoint(2)=boundrylist_esh(ibdy,np,2)
         bodypoint(3)=boundrylist_esh(ibdy,np,3)
         f_link1_esh(ibdy,npg)=f_link1_esh(ibdy,bodypoint(1))
     &             +f_link1_esh(ibdy,bodypoint(2))
     &             -f_link1_esh(ibdy,bodypoint(3))       

         f_link2_esh(ibdy,npg)=f_link2_esh(ibdy,bodypoint(1))
     &             +f_link2_esh(ibdy,bodypoint(2))
     &             -f_link2_esh(ibdy,bodypoint(3))       

         f_link3_esh(ibdy,npg)=f_link3_esh(ibdy,bodypoint(1))
     &             +f_link3_esh(ibdy,bodypoint(2))
     &             -f_link3_esh(ibdy,bodypoint(3))       
      end do       

      f_link1_esh(i,1: ns_ibm_r_esh(i)+ns_ibm_i_esh(i))=
     & matmul(mms(1: ns_ibm_r_esh(i)+ns_ibm_i_esh(i),
     &            1: ns_ibm_r_esh(i)+ns_ibm_i_esh(i)),
     &         f_link1_esh(i,1: ns_ibm_r_esh(i)+ns_ibm_i_esh(i)) )

      f_link1_esh(i,1: ns_ibm_r_esh(i)+ns_ibm_i_esh(i))=
     &f_link1_esh(i,1: ns_ibm_r_esh(i)+ns_ibm_i_esh(i))
     & +matmul(kks(1: ns_ibm_r_esh(i)+ns_ibm_i_esh(i)
     &           ,1: ns_ibm_r_esh(i)+ns_ibm_i_esh(i))
     &        +kkb(1: ns_ibm_r_esh(i)+ns_ibm_i_esh(i)
     &           ,1: ns_ibm_r_esh(i)+ns_ibm_i_esh(i)),
     &         propDamp(2,i2g)*
     &         dX_na_esh(1: ns_ibm_r_esh(i)+ns_ibm_i_esh(i),1)
     &        + X_na_esh(1: ns_ibm_r_esh(i)+ns_ibm_i_esh(i),1) )
     &         

      f_link2_esh(i,1: ns_ibm_r_esh(i)+ns_ibm_i_esh(i))=
     & matmul( mms(1: ns_ibm_r_esh(i)+ns_ibm_i_esh(i),
     &             1: ns_ibm_r_esh(i)+ns_ibm_i_esh(i)),
     &         f_link2_esh(i,1: ns_ibm_r_esh(i)+ns_ibm_i_esh(i)) )

      f_link2_esh(i,1: ns_ibm_r_esh(i)+ns_ibm_i_esh(i))=
     &f_link2_esh(i,1: ns_ibm_r_esh(i)+ns_ibm_i_esh(i))
     & +matmul(kks(1: ns_ibm_r_esh(i)+ns_ibm_i_esh(i)
     &           ,1: ns_ibm_r_esh(i)+ns_ibm_i_esh(i))
     &        +kkb(1: ns_ibm_r_esh(i)+ns_ibm_i_esh(i)
     &           ,1: ns_ibm_r_esh(i)+ns_ibm_i_esh(i)),
     &         propDamp(2,i2g)*
     &         dX_na_esh(1: ns_ibm_r_esh(i)+ns_ibm_i_esh(i),2)
     &        + X_na_esh(1: ns_ibm_r_esh(i)+ns_ibm_i_esh(i),2) )

      f_link3_esh(i,1: ns_ibm_r_esh(i)+ns_ibm_i_esh(i))=
     & matmul(mms(1: ns_ibm_r_esh(i)+ns_ibm_i_esh(i),
     &            1: ns_ibm_r_esh(i)+ns_ibm_i_esh(i)),
     &         f_link3_esh(i,1: ns_ibm_r_esh(i)+ns_ibm_i_esh(i)))

      f_link3_esh(i,1: ns_ibm_r_esh(i)+ns_ibm_i_esh(i))=
     &f_link3_esh(i,1: ns_ibm_r_esh(i)+ns_ibm_i_esh(i))
     & +matmul(kks(1: ns_ibm_r_esh(i)+ns_ibm_i_esh(i)
     &           ,1: ns_ibm_r_esh(i)+ns_ibm_i_esh(i))
     &        +kkb(1: ns_ibm_r_esh(i)+ns_ibm_i_esh(i)
     &           ,1: ns_ibm_r_esh(i)+ns_ibm_i_esh(i)),
     &         propDamp(2,i2g)*
     &         dX_na_esh(1: ns_ibm_r_esh(i)+ns_ibm_i_esh(i),3)
     &        + X_na_esh(1: ns_ibm_r_esh(i)+ns_ibm_i_esh(i),3) )

c calculation of total forces 
       i=ibdy

        do j=1,ns_ibm_r_esh(i) 
           fibm1_esh(i,j)=-f_link1_esh(i,j)
     &                  + areapnt_esh(i,j)*(
     &                 -fibm1_esh(i,j)   
     &                 +density_coef(i2g)
     &                  *fr*cos(the_grav)*sin(phi_grav)*timetemp2
     &                 ) 
     &                +f_impuls1_esh(i,j)

           fibm2_esh(i,j)=-f_link2_esh(i,j)
     &                  + areapnt_esh(i,j)*(
     &                 -fibm2_esh(i,j)    
     &                 +density_coef(i2g)
     &                  *fr*sin(the_grav)*sin(phi_grav)*timetemp2
     &                 ) 
     &                 +f_impuls2_esh(i,j)

           fibm3_esh(i,j)=-f_link3_esh(i,j)
     &                  +areapnt_esh(i,j)*(
     &                 -fibm3_esh(i,j)    
     &                 +density_coef(i2g)
     &                  *fr*cos(phi_grav)*timetemp2
     &                 ) 
     &                 +f_impuls3_esh(i,j)
        end do


      ksh_tmp=-1000.0
      do np=1,ns_ibm_r_esh(ibdy)  
         ksh_tmp=max(ksh_tmp,aamat_esh(np,np))
      enddo
      k=ns_ibm_r_esh(ibdy)+ns_ibm_i_esh(ibdy)
      do np=1,ns_ibm_i_esh(ibdy)  
         npg=ns_ibm_r_esh(ibdy)+np
         bodypoint(1)=boundrylist_esh(ibdy,np,1)
         bodypoint(2)=boundrylist_esh(ibdy,np,2)
         bodypoint(3)=boundrylist_esh(ibdy,np,3)

         if(bndycnd_esh(ibdy,npg) .eq. 1) then
            aamat_esh(npg,1: ns_ibm_r_esh(ibdy)+ns_ibm_i_esh(ibdy))=0.0
            aamat_esh(npg,npg)=ksh_tmp
            aamat_esh(npg,bodypoint(1))=
     &                            aamat_esh(npg,bodypoint(1))-ksh_tmp
            aamat_esh(npg,bodypoint(2))=
     &                            aamat_esh(npg,bodypoint(2))-ksh_tmp
            aamat_esh(npg,bodypoint(3))=
     &                            aamat_esh(npg,bodypoint(3))+ksh_tmp
          elseif(bndycnd_esh(ibdy,npg) .eq. 2) then
            aamat_esh(npg,1: ns_ibm_r_esh(ibdy)+ns_ibm_i_esh(ibdy))=0.0

            aamat_esh(npg,npg)=ksh_tmp

            aamat_esh(bodypoint(1),1:k)=0.0
            aamat_esh(bodypoint(1),bodypoint(1))=ksh_tmp

            aamat_esh(bodypoint(2),1:k)=0.0
            aamat_esh(bodypoint(2),bodypoint(2))=ksh_tmp

          elseif(bndycnd_esh(ibdy,npg) .eq. 3) then   
            aamat_esh(npg,1: ns_ibm_r_esh(ibdy)+ns_ibm_i_esh(ibdy))=0.0
            aamat_esh(npg,npg)=ksh_tmp
            aamat_esh(npg,bodypoint(1))=
     &                            aamat_esh(npg,bodypoint(1))-ksh_tmp
            aamat_esh(npg,bodypoint(2))=
     &                            aamat_esh(npg,bodypoint(2))-ksh_tmp
            aamat_esh(npg,bodypoint(3))=
     &                            aamat_esh(npg,bodypoint(3))+ksh_tmp

            aamat_esh(bodypoint(1),1:k)=0.0
            aamat_esh(bodypoint(1),bodypoint(1))=ksh_tmp

            aamat_esh(bodypoint(2),1:k)=0.0
            aamat_esh(bodypoint(2),bodypoint(2))=ksh_tmp
         endif
      end do   


      do np=1,ns_ibm_i_esh(ibdy)  
         npg=ns_ibm_r_esh(ibdy)+np
         bodypoint(1)=boundrylist_esh(ibdy,np,1)
         bodypoint(2)=boundrylist_esh(ibdy,np,2)
         bodypoint(3)=boundrylist_esh(ibdy,np,3)
		 
         if(bndycnd_esh(ibdy,npg) .eq. 1) then		 
            fibm1_esh(ibdy,npg)=0.0
            fibm2_esh(ibdy,npg)=0.0
            fibm3_esh(ibdy,npg)=0.0
         elseif(bndycnd_esh(ibdy,npg) .eq. 2) then
            fibm1_esh(ibdy,npg)=ksh_tmp*coef_iter
     &      *(X0_np1_esh(npg,1)-gx_bp_esh(ibdy,npg))/timeMarchcoef(5)
            fibm1_esh(ibdy,bodypoint(1))=
     &             ksh_tmp*coef_iter
     &      *(X0_np1_esh(bodypoint(1),1)-gx_bp_esh(ibdy,bodypoint(1)))
     &             /timeMarchcoef(5)

            fibm1_esh(ibdy,bodypoint(2))=
     &             ksh_tmp*coef_iter
     &      *(X0_np1_esh(bodypoint(2),1)-gx_bp_esh(ibdy,bodypoint(2)))
     &             /timeMarchcoef(5)

            fibm2_esh(ibdy,npg)=ksh_tmp*coef_iter
     &      *(X0_np1_esh(npg,2)-gy_bp_esh(ibdy,npg))/timeMarchcoef(5)

            fibm2_esh(ibdy,bodypoint(1))=
     &             ksh_tmp*coef_iter
     &      *(X0_np1_esh(bodypoint(1),2)-gy_bp_esh(ibdy,bodypoint(1)))
     &             /timeMarchcoef(5)

            fibm2_esh(ibdy,bodypoint(2))=
     &             ksh_tmp*coef_iter
     &      *(X0_np1_esh(bodypoint(2),2)-gy_bp_esh(ibdy,bodypoint(2)))
     &             /timeMarchcoef(5)

            fibm3_esh(ibdy,npg)=ksh_tmp*coef_iter
     &      *(X0_np1_esh(npg,3)-gz_bp_esh(ibdy,npg))/timeMarchcoef(5)

            fibm3_esh(ibdy,bodypoint(1))=
     &             ksh_tmp*coef_iter
     &      *(X0_np1_esh(bodypoint(1),3)-gz_bp_esh(ibdy,bodypoint(1)))
     &             /timeMarchcoef(5)

            fibm3_esh(ibdy,bodypoint(2))=
     &             ksh_tmp*coef_iter
     &      *(X0_np1_esh(bodypoint(2),3)-gz_bp_esh(ibdy,bodypoint(2)))
     &             /timeMarchcoef(5)
		 
         elseif(bndycnd_esh(ibdy,npg) .eq. 3) then	!need to change
             fibm1_esh(ibdy,npg)=0.0

             fibm2_esh(ibdy,npg)=0.0

             fibm3_esh(ibdy,npg)=0.0

            fibm1_esh(ibdy,bodypoint(1))=
     &             ksh_tmp*coef_iter
     &      *(X0_np1_esh(bodypoint(1),1)-gx_bp_esh(ibdy,bodypoint(1)))
     &      /timeMarchcoef(5)

            fibm1_esh(ibdy,bodypoint(2))=
     &             ksh_tmp*coef_iter
     &      *(X0_np1_esh(bodypoint(2),1)-gx_bp_esh(ibdy,bodypoint(2)))
     &      /timeMarchcoef(5)

            fibm2_esh(ibdy,bodypoint(1))=
     &             ksh_tmp*coef_iter
     &      *(X0_np1_esh(bodypoint(1),2)-gy_bp_esh(ibdy,bodypoint(1)))
     &      /timeMarchcoef(5)

            fibm2_esh(ibdy,bodypoint(2))=
     &             ksh_tmp*coef_iter
     &      *(X0_np1_esh(bodypoint(2),2)-gy_bp_esh(ibdy,bodypoint(2)))
     &      /timeMarchcoef(5)

            fibm3_esh(ibdy,bodypoint(1))=
     &             ksh_tmp*coef_iter
     &      *(X0_np1_esh(bodypoint(1),3)-gz_bp_esh(ibdy,bodypoint(1)))
     &      /timeMarchcoef(5)
            fibm3_esh(ibdy,bodypoint(2))=
     &             ksh_tmp*coef_iter
     &      *(X0_np1_esh(bodypoint(2),3)-gz_bp_esh(ibdy,bodypoint(2)))
     &      /timeMarchcoef(5)
         endif
		 
      enddo

      if(allocated(aacsr))  then 
        deallocate(iacsr, jacsr,aacsr)
      endif
        allocate(iacsr(ns_ibm_esh))     
        ntemi=0
        do noj=1,ns_ibm_r_esh(i)+ns_ibm_i_esh(i)
        iacsr(noj)=ntemi+1
        do noi=1,ns_ibm_r_esh(i)+ns_ibm_i_esh(i)
           ksh_tmp=aamat_esh(noj,noi)
           if(abs(ksh_tmp) .gt. 1d-20) then
            ntemi=ntemi+1
           endif
         enddo
         enddo
         ntermiMAX=ntemi+1 
!         k_flagMAT=.false.
         allocate(aacsr(ntermiMAX),jacsr(ntermiMAX))
        iacsr=0
        aacsr=0.0
        jacsr=0

      ntemi=0
      do noj=1,ns_ibm_r_esh(i)+ns_ibm_i_esh(i)
      iacsr(noj)=ntemi+1
      do noi=1,ns_ibm_r_esh(i)+ns_ibm_i_esh(i)
         ksh_tmp=aamat_esh(noj,noi)
         if(abs(ksh_tmp) .gt. 1d-20) then
            ntemi=ntemi+1
            aacsr(ntemi)=ksh_tmp
            jacsr(ntemi)=noi
         endif
      enddo
      enddo
      noj=1+ns_ibm_r_esh(i)+ns_ibm_i_esh(i)
      iacsr(noj)=ntemi+1 

       j=ns_ibm_r_esh(i)+ns_ibm_i_esh(i)
       ddU_np1_esh=0.0
       call pmgmres_ilu_crMRHS(j
     &     ,ntermiMAX
     &     ,iacsr(1: j+1)
     &     ,jacsr(1: ntermiMAX)
     &     ,aacsr(1: ntermiMAX)
     &     ,ddU_np1_esh(1:j,1)
     &     ,ddU_np1_esh(1:j,2)
     &     ,ddU_np1_esh(1:j,3)
     &     ,fibm1_esh(i,1:j)
     &     ,fibm2_esh(i,1:j)
     &     ,fibm3_esh(i,1:j)
     &     ,SolverOutiter,SolverIniter
     &     ,Solverabstol,Solverreltol,SolverPre,monitorON)
      dxcont(1:3)=0.0
      outcont(1:3)=0.0
      do npg=1,ns_ibm_r_esh(i)+ns_ibm_i_esh(i)
        dxcont(1:3)=dxcont(1:3)+ddU_np1_esh(npg,1:3)**2
         ddX_np1_esh(npg,1:3)=ddX_np1_esh(npg,1:3)
     &     +ddU_np1_esh(npg,1:3)
         dX_np1_esh(npg,1:3)=dX_np1_esh(npg,1:3)
     &     +timeMarchcoef(4)*ddU_np1_esh(npg,1:3)
         X_np1_esh(npg,1:3) =X_np1_esh(npg,1:3)
     &     +timeMarchcoef(5)*ddU_np1_esh(npg,1:3)

        outcont(1:3)=outcont(1:3)
     &     +(X_np1_esh(npg,1:3)-X_n_esh(npg,1:3))**2

       enddo
       dxcont(1)=timeMarchcoef(5)*sqrt(dxcont(1)+dxcont(2)+dxcont(3))
       outcont(1)=sqrt(outcont(1)+outcont(2)+outcont(3))
       if(monitorON)
     &     print*, 'Error= ',dxcont(1),outcont(1),dxcont(1)/outcont(1)

       if(dxcont(1)/outcont(1) .lt. maxErrorstruct) exit

!==============================================   END ITERATION
      enddo       
      do npg=1,ns_ibm_r_esh(ibdy)+ns_ibm_i_esh(ibdy)
         gx_ibm_massive_esh(ibdy,npg)=X_np1_esh(npg,1)
         gy_ibm_massive_esh(ibdy,npg)=X_np1_esh(npg,2)
         gz_ibm_massive_esh(ibdy,npg)=X_np1_esh(npg,3)

         vibm1_esh(ibdy,npg)=dX_np1_esh(npg,1)
         vibm2_esh(ibdy,npg)=dX_np1_esh(npg,2)
         vibm3_esh(ibdy,npg)=dX_np1_esh(npg,3)

         aibm1_esh(ibdy,npg)=ddX_np1_esh(npg,1)
         aibm2_esh(ibdy,npg)=ddX_np1_esh(npg,2)
         aibm3_esh(ibdy,npg)=ddX_np1_esh(npg,3)
       
       enddo
      deallocate(
     &       aamat_esh,kks,kkb)  
      elseif(Genalpha_timesolver(ibdyg) .eq. 3) then
            write(*,*)'Totally Implicit Gen-a for acc'
            write(*,*)' is not implemented yet'
            write(*,*)'Maybe you can help!'
            stop
      elseif(Genalpha_timesolver(ibdyg) .eq. 4) then

      allocate(
     &       aamat_esh(ns_ibm_esh,ns_ibm_esh)
     &      ,kks(ns_ibm_esh,ns_ibm_esh)
     &      ,kkb(ns_ibm_esh,ns_ibm_esh)  )

        timeMarchcoef(1)= 1.0-alphaf_Coef(ibdyg)
        timeMarchcoef(2)=(1.0-alpham_Coef(ibdyg))/(dt2*beta_Coef(ibdyg))
        timeMarchcoef(3)=(1.0-alphaf_Coef(ibdyg))*gamma_Coef(ibdyg)
     &                  /(dt*beta_Coef(ibdyg))

        timeMarchcoef(4)=(1.0-alpham_Coef(ibdyg))/(dt2*beta_Coef(ibdyg))
        timeMarchcoef(5)=(1.0-alpham_Coef(ibdyg))/(dt*beta_Coef(ibdyg))
        timeMarchcoef(6)=(1.0-alpham_Coef(ibdyg)-2.0*beta_Coef(ibdyg))
     &                  /(2.0*beta_Coef(ibdyg))

        timeMarchcoef(7)=(1.0-alphaf_Coef(ibdyg))*gamma_Coef(ibdyg)
     &                  /(dt*beta_Coef(ibdyg))
        timeMarchcoef(8)=(
     &                  (1.0-alphaf_Coef(ibdyg))*gamma_Coef(ibdyg)
     &                   -beta_Coef(ibdyg)
     &                   )
     &                  /beta_Coef(ibdyg)

        timeMarchcoef(9)=(
     &                   (1.0-alphaf_Coef(ibdyg))
     &                  *(gamma_Coef(ibdyg)-2.0*beta_Coef(ibdyg)) )
     &                  /(2.0*beta_Coef(ibdyg))*dt

        timeMarchcoef(10)=gamma_Coef(ibdyg)/(dt*beta_Coef(ibdyg))
        timeMarchcoef(11)=-(gamma_Coef(ibdyg)/beta_Coef(ibdyg)-1)
        timeMarchcoef(12)=-(0.5*gamma_Coef(ibdyg)/beta_Coef(ibdyg)-1)*dt

        timeMarchcoef(13)=1.0/(dt2*beta_Coef(ibdyg))
        timeMarchcoef(14)=-1.0/(beta_Coef(ibdyg)*dt)
        timeMarchcoef(15)=-(0.5/beta_Coef(ibdyg)-1)

        time_alphaf=time2+(1.0-alphaf_Coef(ibdyg))*dt
!copy vectors
        do npg=1,ns_ibm_r_esh(ibdy)
         X_n_esh(npg,1)=gx_ibm_massive_esh(ibdy,npg)
         X_n_esh(npg,2)=gy_ibm_massive_esh(ibdy,npg)
         X_n_esh(npg,3)=gz_ibm_massive_esh(ibdy,npg)
         dX_n_esh(npg,1)=vibm1_esh(ibdy,npg)
         dX_n_esh(npg,2)=vibm2_esh(ibdy,npg)

         dX_n_esh(npg,3)=vibm3_esh(ibdy,npg)
         ddX_n_esh(npg,1)=aibm1_esh(ibdy,npg)
         ddX_n_esh(npg,2)=aibm2_esh(ibdy,npg)
         ddX_n_esh(npg,3)=aibm3_esh(ibdy,npg)
        enddo

        do npg=1,ns_ibm_r_esh(ibdy)
           X_np1_esh(npg,1:3) =  X_n_esh(npg,1:3)
           dX_np1_esh(npg,1:3)= dX_n_esh(npg,1:3)
          ddX_np1_esh(npg,1:3)=ddX_n_esh(npg,1:3)

          ddX_in_esh(npg,1:3)=timeMarchcoef(4)*X_n_esh(npg,1:3)
     &                      +timeMarchcoef(5)*dX_n_esh(npg,1:3)
     &                      +timeMarchcoef(6)*ddX_n_esh(npg,1:3)

          dX_in_esh(npg,1:3)=timeMarchcoef(7)*X_n_esh(npg,1:3)
     &                      +timeMarchcoef(8)*dX_n_esh(npg,1:3)
     &                      +timeMarchcoef(9)*ddX_n_esh(npg,1:3)
        enddo       

!===================  ITERATIONS
      Do iter=1,Genalpha_niter(ibdyg)
         if(monitorON)   write(*,*) '   === INER ===  ',iter
         if(iter .eq. 1) then 
            coef_iter=1.0
         else
            coef_iter=0.0      
         endif  

      do npg=1,ns_ibm_r_esh(ibdy)
          ddX_na_esh(npg,1:3)= (1.0-alpham_Coef(ibdyg))
     &                      *ddX_np1_esh(npg,1:3)
     &                      +alpham_Coef(ibdyg)* ddX_n_esh(npg,1:3)
          dX_na_esh(npg,1:3)= (1.0-alphaf_Coef(ibdyg))
     &                      *dX_np1_esh(npg,1:3)
     &                      +alphaf_Coef(ibdyg)* dX_n_esh(npg,1:3)
          X_na_esh(npg,1:3)= (1.0-alphaf_Coef(ibdyg))
     &                      *X_np1_esh(npg,1:3)
     &                      +alphaf_Coef(ibdyg)* X_n_esh(npg,1:3)

!       write(2323,2337)
!     & ibdy,npg
!     & ,X_na_esh(npg,1),X_np1_esh(npg,1),X_n_esh(npg,1)
!     & ,gx_ibm_massive_esh(ibdy,npg)
!     & ,X_na_esh(npg,2),X_np1_esh(npg,2),X_n_esh(npg,2)
!     & ,gy_ibm_massive_esh(ibdy,npg)
!     & ,X_na_esh(npg,3),X_np1_esh(npg,3),X_n_esh(npg,3)
!     & ,gz_ibm_massive_esh(ibdy,npg)
!2337       format(2(1x,i4),16(1x,f12.6)) 
      enddo   
!! calculate residule
      i=ibdy
      i2l=i
      fibm1_esh(i,1:Ns_IBM_esh)=0.0
      fibm2_esh(i,1:Ns_IBM_esh)=0.0
      fibm3_esh(i,1:Ns_IBM_esh)=0.0
      ffluidsum1_esh(i,1:Ns_IBM_esh)=0.0
      ffluidsum2_esh(i,1:Ns_IBM_esh)=0.0
      ffluidsum3_esh(i,1:Ns_IBM_esh)=0.0


      f_impuls1_esh(i,1:Ns_IBM_esh)=0.d0
      f_impuls2_esh(i,1:Ns_IBM_esh)=0.d0
      f_impuls3_esh(i,1:Ns_IBM_esh)=0.d0
      areapnt_esh(i,1:Ns_IBM_esh)=0.0
!      xpnt_esh(i,1:Ns_IBM_esh)=0.0
      force_points_esh(i,1:Ns_IBM_esh,1:3)=0.d0
      f_link1_esh(i,1:Ns_IBM_esh)=0.0
      f_link2_esh(i,1:Ns_IBM_esh)=0.0
      f_link3_esh(i,1:Ns_IBM_esh)=0.0

c
c calculating feedback force for matching bcs
       i2g=Ilocglb_esh(ibdy)
       if(FluidForceFlag(i2g)) then
        do j=1,ns_ibm_r_esh(i)
           fk_mass1_esh(i,j)=fk_mass1o_esh(i,j)
     &          +alpha_ibm*delta_t*(uibm1_esh(i,j)-dX_na_esh(j,1))
     &                   *timetemp2

            fk_mass2_esh(i,j)=fk_mass2o_esh(i,j)
     &          +alpha_ibm*delta_t*(uibm2_esh(i,j)-dX_na_esh(j,2))
     &                   *timetemp2

            ffluidsum1_esh(i,j)= fk_mass1_esh(i,j)
     &                   +beta_ibm*(uibm1_esh(i,j)-dX_na_esh(j,1))
     &                   *timetemp2
            ffluidsum2_esh(i,j)= fk_mass2_esh(i,j)
     &                   +beta_ibm*(uibm2_esh(i,j)-dX_na_esh(j,2))
     &                   *timetemp2
            if(ndim .gt. 2) then
            fk_mass3_esh(i,j)=fk_mass3o_esh(i,j)
     &          +alpha_ibm*delta_t*(uibm3_esh(i,j)-dX_na_esh(j,3))
     &                   *timetemp2

            ffluidsum3_esh(i,j)= fk_mass3_esh(i,j)
     &                   +beta_ibm*(uibm3_esh(i,j)-dX_na_esh(j,3))
     &                   *timetemp2
            endif
         end do
         do j=1,ns_ibm_r_esh(i)
              fibm1_esh(i,j)=fibm1_esh(i,j)+ffluidsum1_esh(i,j)
              fibm2_esh(i,j)=fibm2_esh(i,j)+ffluidsum2_esh(i,j)
              if(ndim .gt. 2) 
     &           fibm3_esh(i,j)=fibm3_esh(i,j)+ffluidsum3_esh(i,j)
          end do
        endif  

        call boundary_ibm_generalalpha(
     &       i2g
     &      ,Xtar_na_esh
     &      ,dXtar_na_esh
     &      ,X0_np1_esh)

      do npg=1,target_num(i2g)
         Xtar_na_esh(npg,1:3)= alphaf_Coef(ibdyg)
     &                        *target_points_esh(i,npg,1:3)
     &                      +timeMarchcoef(6)*Xtar_na_esh(npg,1:3)
        dXtar_na_esh(npg,1:3)= alphaf_Coef(ibdyg)
     &                        *target_points_v_esh(i,npg,1:3)
     &                      +timeMarchcoef(6)*dXtar_na_esh(npg,1:3)
      enddo   

      do np=1,ns_ibm_i_esh(ibdy)  
         npg=ns_ibm_r_esh(ibdy)+np
         bodypoint(1)=boundrylist_esh(ibdy,np,1)
         bodypoint(2)=boundrylist_esh(ibdy,np,2)
         bodypoint(3)=boundrylist_esh(ibdy,np,3)
         X0_np1_esh(npg,1:3)=X0_np1_esh(bodypoint(1),1:3)
     &                   +X0_np1_esh(bodypoint(2),1:3)
     &                   -X0_np1_esh(bodypoint(3),1:3)
         X_na_esh(npg,1:3)=X_na_esh(bodypoint(1),1:3)
     &                   +X_na_esh(bodypoint(2),1:3)
     &                   -X_na_esh(bodypoint(3),1:3)
         dX_na_esh(npg,1:3)=dX_na_esh(bodypoint(1),1:3)
     &                    +dX_na_esh(bodypoint(2),1:3)
     &                    -dX_na_esh(bodypoint(3),1:3)
         ddX_na_esh(npg,1:3)=ddX_na_esh(bodypoint(1),1:3)
     &                     +ddX_na_esh(bodypoint(2),1:3)
     &                     -ddX_na_esh(bodypoint(3),1:3)
         dX_in_esh(npg,1:3)=dX_in_esh(bodypoint(1),1:3)
     &                    +dX_in_esh(bodypoint(2),1:3)
     &                    -dX_in_esh(bodypoint(3),1:3)
         ddX_in_esh(npg,1:3)=ddX_in_esh(bodypoint(1),1:3)
     &                     +ddX_in_esh(bodypoint(2),1:3)
     &                     -ddX_in_esh(bodypoint(3),1:3)
         X_np1_esh(npg,1:3)=X_np1_esh(bodypoint(1),1:3)
     &                   +X_np1_esh(bodypoint(2),1:3)
     &                   -X_np1_esh(bodypoint(3),1:3)
         dX_np1_esh(npg,1:3)=dX_np1_esh(bodypoint(1),1:3)
     &                    +dX_np1_esh(bodypoint(2),1:3)
     &                    -dX_np1_esh(bodypoint(3),1:3)
         ddX_np1_esh(npg,1:3)=ddX_np1_esh(bodypoint(1),1:3)
     &                     +ddX_np1_esh(bodypoint(2),1:3)
     &                     -ddX_np1_esh(bodypoint(3),1:3)

      end do       
      aamat_esh=0.0
      mms=0.0
      kks=0.0
      kkb=0.0

      fibm1pres_esh=0.0
      fibm2pres_esh=0.0
      fibm3pres_esh=0.0

      fibm1cont_esh=0.0
      fibm2cont_esh=0.0
      fibm3cont_esh=0.0

      ntypeMAx_loc=-1000

      do ne=1,numelr(ibdyg)
         jtype=neatype_esh(ibdy,ne)
         itype=jtypeall(jtype)
         if(itype .eq. 0) then
           ntype=12  
         else
           ntype=6+itype
         end if
         ntypeMAx_loc=max(ntypeMAx_loc,ntype)

         do nos=1,ntype
            ntem=nea_esh(ibdy,ne,nos)
            noj=1
            x(nos,1:3)=X_na_esh(ntem,1:3)

            if(Fibrous_Esh(ibdy) .eq. 1) then
            noj=1
            x_FibVec(nos,noj)=Materialpara_esh(ibdy,ntem,noj)
            noj=2
            x_FibVec(nos,noj)=Materialpara_esh(ibdy,ntem,noj)
            noj=3
            x_FibVec(nos,noj)=Materialpara_esh(ibdy,ntem,noj)
            if(nos .eq. 1) then
               n_FibVec(1:3) =crFibCrv_esh(ibdy,ne,1:3)
               n3_FibVec(1:3)=crFibCrv_esh(ibdy,ne,4:6)
            endif
            endif
            do noj=1,2
               sx(noj,nos)=coorcurv_esh(ibdy,ne,nos,noj)
            enddo
         enddo

         if(itype .eq. 0) then
             xj1=x(4,1);xj2=x(7,1);xj3=x(8,1)
             yj1=x(4,2);yj2=x(7,2);yj3=x(8,2)
             zj1=x(4,3);zj2=x(7,3);zj3=x(8,3)
         else
             xj1=x(1,1);xj2=x(2,1);xj3=x(itype+1,1)
             yj1=x(1,2);yj2=x(2,2);yj3=x(itype+1,2)
             zj1=x(1,3);zj2=x(2,3);zj3=x(itype+1,3)
         endif
 
             tmpv1(1)=xj2-xj1
             tmpv1(2)=yj2-yj1
             tmpv1(3)=zj2-zj1
             tmpv2(1)=xj3-xj1
             tmpv2(2)=yj3-yj1
             tmpv2(3)=zj3-zj1
            call crossvec(tmpv3,tmpv1,tmpv2)


            tmpv1x(1)=xpcenter_esh(ibdy,ne,1)
            tmpv1x(2)=xpcenter_esh(ibdy,ne,2)
            tmpv1x(3)=xpcenter_esh(ibdy,ne,3)

        if(itype .eq. 0) then
             if (ExternalPressureFlag(ibdyg)) then
             
             fibm1cont_esh(nea_esh(ibdy,ne,4))=
     &                            fibm1cont_esh(nea_esh(ibdy,ne,4))+
     &                                 tmpv3(1)*tmpv1x(1)
             fibm1cont_esh(nea_esh(ibdy,ne,7))=
     &                            fibm1cont_esh(nea_esh(ibdy,ne,7))+
     &                                 tmpv3(1)*tmpv1x(2)
             fibm1cont_esh(nea_esh(ibdy,ne,8))=
     &                            fibm1cont_esh(nea_esh(ibdy,ne,8))+
     &                                 tmpv3(1)*tmpv1x(3)

             fibm1pres_esh(nea_esh(ibdy,ne,4))=
     &                            fibm1pres_esh(nea_esh(ibdy,ne,4))+
     &                                 tmpv3(1)*area(ibdy,ne)/3.0
             fibm1pres_esh(nea_esh(ibdy,ne,7))=
     &                            fibm1pres_esh(nea_esh(ibdy,ne,7))+
     &                                 tmpv3(1)*area(ibdy,ne)/3.0
             fibm1pres_esh(nea_esh(ibdy,ne,8))=
     &                            fibm1pres_esh(nea_esh(ibdy,ne,8))+
     &                                 tmpv3(1)*area(ibdy,ne)/3.0

             fibm2cont_esh(nea_esh(ibdy,ne,4))=
     &                            fibm2cont_esh(nea_esh(ibdy,ne,4))+
     &                                 tmpv3(2)*tmpv1x(1)
             fibm2cont_esh(nea_esh(ibdy,ne,7))=
     &                            fibm2cont_esh(nea_esh(ibdy,ne,7))+
     &                                 tmpv3(2)*tmpv1x(2)
             fibm2cont_esh(nea_esh(ibdy,ne,8))=
     &                            fibm2cont_esh(nea_esh(ibdy,ne,8))+
     &                                 tmpv3(2)*tmpv1x(3)
             fibm2pres_esh(nea_esh(ibdy,ne,4))=
     &                            fibm2pres_esh(nea_esh(ibdy,ne,4))+
     &                                 tmpv3(2) *area(ibdy,ne)/3.0
             fibm2pres_esh(nea_esh(ibdy,ne,7))=
     &                            fibm2pres_esh(nea_esh(ibdy,ne,7))+
     &                                 tmpv3(2)  *area(ibdy,ne)/3.0
             fibm2pres_esh(nea_esh(ibdy,ne,8))=
     &                            fibm2pres_esh(nea_esh(ibdy,ne,8))+
     &                                 tmpv3(2)  *area(ibdy,ne)/3.0

             fibm3cont_esh(nea_esh(ibdy,ne,4))=
     &                            fibm3cont_esh(nea_esh(ibdy,ne,4))+
     &                                 tmpv3(3)*tmpv1x(1)
             fibm3cont_esh(nea_esh(ibdy,ne,7))=
     &                            fibm3cont_esh(nea_esh(ibdy,ne,7))+
     &                                 tmpv3(3)*tmpv1x(2)
             fibm3cont_esh(nea_esh(ibdy,ne,8))=
     &                            fibm3cont_esh(nea_esh(ibdy,ne,8))+
     &                                 tmpv3(3)*tmpv1x(3)

             fibm3pres_esh(nea_esh(ibdy,ne,4))=
     &                            fibm3pres_esh(nea_esh(ibdy,ne,4))+
     &                                 tmpv3(3)  *area(ibdy,ne)/3.0
             fibm3pres_esh(nea_esh(ibdy,ne,7))=
     &                            fibm3pres_esh(nea_esh(ibdy,ne,7))+
     &                                 tmpv3(3)  *area(ibdy,ne)/3.0
             fibm3pres_esh(nea_esh(ibdy,ne,8))=
     &                            fibm3pres_esh(nea_esh(ibdy,ne,8))+
     &                                 tmpv3(3)  *area(ibdy,ne)/3.0
             endif
             if(nea_esh(ibdy,ne,4) .le. ns_ibm_r_esh(ibdy))
     &       areapnt_esh(ibdy,nea_esh(ibdy,ne,4))=
     &                  areapnt_esh(ibdy,nea_esh(ibdy,ne,4))
     &                                   +area(ibdy,ne)/3.0
             if(nea_esh(ibdy,ne,7) .le. ns_ibm_r_esh(ibdy))
     &        areapnt_esh(ibdy,nea_esh(ibdy,ne,7))=
     &                  areapnt_esh(ibdy,nea_esh(ibdy,ne,7))
     &                                   +area(ibdy,ne)/3.0
             if(nea_esh(ibdy,ne,8) .le. ns_ibm_r_esh(ibdy))
     &       areapnt_esh(ibdy,nea_esh(ibdy,ne,8))=
     &                  areapnt_esh(ibdy,nea_esh(ibdy,ne,8))
     &                                   +area(ibdy,ne)/3.0

!             xpnt_esh(ibdy,nea_esh(ibdy,ne,4))=
!     &                  xpnt_esh(ibdy,nea_esh(ibdy,ne,4))
!     &                                 +tmpv1x(1)
!             xpnt_esh(ibdy,nea_esh(ibdy,ne,7))=
!     &                  xpnt_esh(ibdy,nea_esh(ibdy,ne,7))
!     &                                 +tmpv1x(2)
!             xpnt_esh(ibdy,nea_esh(ibdy,ne,8))=
!     &                  xpnt_esh(ibdy,nea_esh(ibdy,ne,8))
!     &                                 +tmpv1x(3)


        else
             noj=itype+1
             if (ExternalPressureFlag(ibdyg)) then
             fibm1cont_esh(nea_esh(ibdy,ne,1))=
     &                            fibm1cont_esh(nea_esh(ibdy,ne,1))+
     &                                 tmpv3(1)*tmpv1x(1)
             fibm1cont_esh(nea_esh(ibdy,ne,2))=
     &                            fibm1cont_esh(nea_esh(ibdy,ne,2))+
     &                                 tmpv3(1)*tmpv1x(2)
             fibm1cont_esh(nea_esh(ibdy,ne,noj))=
     &                            fibm1cont_esh(nea_esh(ibdy,ne,noj))+
     &                                 tmpv3(1)*tmpv1x(3)

             fibm1pres_esh(nea_esh(ibdy,ne,1))=
     &                            fibm1pres_esh(nea_esh(ibdy,ne,1))+
     &                                 tmpv3(1)  *area(ibdy,ne)/3.0
             fibm1pres_esh(nea_esh(ibdy,ne,2))=
     &                            fibm1pres_esh(nea_esh(ibdy,ne,2))+
     &                                 tmpv3(1)  *area(ibdy,ne)/3.0
             fibm1pres_esh(nea_esh(ibdy,ne,noj))=
     &                            fibm1pres_esh(nea_esh(ibdy,ne,noj))+
     &                                 tmpv3(1)  *area(ibdy,ne)/3.0

             fibm2cont_esh(nea_esh(ibdy,ne,1))=
     &                            fibm2cont_esh(nea_esh(ibdy,ne,1))+
     &                                 tmpv3(2)*tmpv1x(1)
             fibm2cont_esh(nea_esh(ibdy,ne,2))=
     &                            fibm2cont_esh(nea_esh(ibdy,ne,2))+
     &                                 tmpv3(2)*tmpv1x(2)
             fibm2cont_esh(nea_esh(ibdy,ne,noj))=
     &                            fibm2cont_esh(nea_esh(ibdy,ne,noj))+
     &                                 tmpv3(2)*tmpv1x(3)

             fibm2pres_esh(nea_esh(ibdy,ne,1))=
     &                            fibm2pres_esh(nea_esh(ibdy,ne,1))+
     &                                 tmpv3(2)  *area(ibdy,ne)/3.0
             fibm2pres_esh(nea_esh(ibdy,ne,2))=
     &                            fibm2pres_esh(nea_esh(ibdy,ne,2))+
     &                                 tmpv3(2)  *area(ibdy,ne)/3.0
             fibm2pres_esh(nea_esh(ibdy,ne,noj))=
     &                            fibm2pres_esh(nea_esh(ibdy,ne,noj))+
     &                                 tmpv3(2)  *area(ibdy,ne)/3.0

             fibm3cont_esh(nea_esh(ibdy,ne,1))=
     &                            fibm3cont_esh(nea_esh(ibdy,ne,1))+
     &                                 tmpv3(3)*tmpv1x(1)

             fibm3cont_esh(nea_esh(ibdy,ne,2))=
     &                            fibm3cont_esh(nea_esh(ibdy,ne,2))+
     &                                 tmpv3(3)*tmpv1x(2)

             fibm3cont_esh(nea_esh(ibdy,ne,noj))=
     &                           fibm3cont_esh(nea_esh(ibdy,ne,noj))+
     &                                 tmpv3(3)*tmpv1x(3)

             fibm3pres_esh(nea_esh(ibdy,ne,1))=
     &                            fibm3pres_esh(nea_esh(ibdy,ne,1))+
     &                                 tmpv3(3)  *area(ibdy,ne)/3.0
             fibm3pres_esh(nea_esh(ibdy,ne,2))=
     &                            fibm3pres_esh(nea_esh(ibdy,ne,2))+
     &                                 tmpv3(3) *area(ibdy,ne)/3.0
             fibm3pres_esh(nea_esh(ibdy,ne,noj))=
     &                           fibm3pres_esh(nea_esh(ibdy,ne,noj))+
     &                                 tmpv3(3)  *area(ibdy,ne)/3.0
           endif

             if(nea_esh(ibdy,ne,1) .le. ns_ibm_r_esh(ibdy))
     &       areapnt_esh(ibdy,nea_esh(ibdy,ne,1))=
     &                  areapnt_esh(ibdy,nea_esh(ibdy,ne,1))
     &                                   +area(ibdy,ne)/3.0
             if(nea_esh(ibdy,ne,2) .le. ns_ibm_r_esh(ibdy))
     &       areapnt_esh(ibdy,nea_esh(ibdy,ne,2))=
     &                  areapnt_esh(ibdy,nea_esh(ibdy,ne,2))
     &                                   +area(ibdy,ne)/3.0
             if(nea_esh(ibdy,ne,3) .le. ns_ibm_r_esh(ibdy))
     &       areapnt_esh(ibdy,nea_esh(ibdy,ne,noj))=
     &                  areapnt_esh(ibdy,nea_esh(ibdy,ne,noj))
     &                                   +area(ibdy,ne)/3.0


!             xpnt_esh(ibdy,nea_esh(ibdy,ne,1))=
!     &                  xpnt_esh(ibdy,nea_esh(ibdy,ne,1))
!     &                                 +tmpv1x(1)
!             xpnt_esh(ibdy,nea_esh(ibdy,ne,2))=
!     &                  xpnt_esh(ibdy,nea_esh(ibdy,ne,2))
!     &                                 +tmpv1x(2)
!             xpnt_esh(ibdy,nea_esh(ibdy,ne,noj))=
!     &                  xpnt_esh(ibdy,nea_esh(ibdy,ne,noj))
!     &                                 +tmpv1x(3)

         endif

         mass=0.0
         ks=0.0
         kb=0.0

         do i=1,ngau
            wei_i=wei(i)
            s(1,1:ntype)=nn(jtype,i,1:ntype)
            dsdv(1,1:ntype)=dnndv(jtype,i,1:ntype)
            dsdv(2,1:ntype)=dnndw(jtype,i,1:ntype)
            ddsdvdv(1,1:ntype)=ddnndvdv(jtype,i,1:ntype)
            ddsdvdv(2,1:ntype)=ddnndvdw(jtype,i,1:ntype)
            ddsdvdv(3,1:ntype)=ddnndwdw(jtype,i,1:ntype)

             do noi=1,2
               do noj=1,2
                  jmat(noj,noi)=
     &              dot_product(dsdv(noj,1:ntype),sx(noi,1:ntype))
               end do
               do noj=1,3
                  gmat(noj,noi)=
     &              dot_product(ddsdvdv(noj,1:ntype),sx(noi,1:ntype))
               end do
             end do 
             hmat(1,1)= jmat(1,1)**2
             hmat(2,1)= jmat(1,1)*jmat(2,1)
             hmat(3,1)= jmat(2,1)**2  
             hmat(1,2)= 2.0*jmat(1,1)*jmat(1,2)
             hmat(2,2)= jmat(1,1)*jmat(2,2)+jmat(1,2)*jmat(2,1)
             hmat(3,2)= 2.0*jmat(2,1)*jmat(2,2) 
             hmat(1,3)= jmat(1,2)**2
             hmat(2,3)= jmat(1,2)*jmat(2,2)
             hmat(3,3)= jmat(2,2)**2  

             wei_i=wei_i
     &             *abs(jmat(1,1)*jmat(2,2)-jmat(1,2)*jmat(2,1))
 !            area(ibdy,ne)=area(ibdy,ne)+wei_i
             call invert(jmat,2)
             call invert(hmat,3)
  
             amat1(1:2,1:ntype)=matmul(jmat,dsdv(1:2,1:ntype))
             amat2(1:3,1:ntype)=matmul(gmat,amat1(1:2,1:ntype))   ! shape for memebrane effect
             amat2(1:3,1:ntype)=ddsdvdv(1:3,1:ntype)-amat2(1:3,1:ntype)
             amat2(1:3,1:ntype)=matmul(hmat,amat2(1:3,1:ntype)) !shape for bending part

             do noj=1,3
                xpos(noj)=dot_product(s(1,1:ntype),x(1:ntype,noj))
                do noi=1,2
                   dxpos(noi,noj)=
     &               dot_product(amat1(noi,1:ntype),x(1:ntype,noj))
                end do
                do noi=1,3
                   d2xpos(noi,noj)=
     &             dot_product(amat2(noi,1:ntype),x(1:ntype,noj))
                end do
             end do

             noi=1
             noj=1
             dmat(noi,noj)=1/2.0*
     &        dot_product(dxpos(noi,1:3),dxpos(noj,1:3))
     &        -dmat0_esh(ibdy,ne,i,noi,noj)
             kmatbar(noi,noj)=sqrt(
     &        dot_product(d2xpos(noi,1:3),d2xpos(noj,1:3)))
             noi=1
             noj=2
             dmat(noi,noj)=1/2.0*
     &        dot_product(dxpos(noi,1:3),dxpos(noj,1:3))
     &        -dmat0_esh(ibdy,ne,i,noi,noj)
             kmatbar(noi,noj)=sqrt(
     &        dot_product(d2xpos(noj,1:3),d2xpos(noj,1:3)))
             kmatbar(noj,noi)=kmatbar(noi,noj)
             dmat(noj,noi)=dmat(noi,noj)

             noi=2
             noj=2
             dmat(noi,noj)=1/2.0*
     &        dot_product(dxpos(noi,1:3),dxpos(noj,1:3))
     &        -dmat0_esh(ibdy,ne,i,noi,noj)
             kmatbar(noi,noj)=sqrt(dot_product(d2xpos(noj+1,1:3)
     &        ,d2xpos(noj+1,1:3)))

             kmat=kmatbar-kmat0_esh(ibdy,ne,i,1:2,1:2)


             iner1=2.0*(dmat(1,1)+dmat(2,2))
             iner2=2.0*(dmat(1,1)+dmat(2,2))
     &        +4.0*(dmat(1,1)*dmat(2,2)-dmat(1,2)*dmat(2,1))

             jner1= kmat(1,1)+kmat(2,2)
             jner2= kmat(1,1)*kmat(2,2)-kmat(1,2)*kmat(2,1)

! neo-hookean membrane Ws=\phi/2 (I_1 -1 + 1/(I_2+1))
! phi_mem_coef(1)=\phi
            if(MaterialTypeIBM(ibdyg) .eq. 1) then
            smat(1,1)=phi_mem_coef(ibdyg,1)
     &        *(1.0-(1.0+2.0*dmat(2,2))/(iner2+1.0)**2)
            smat(1,2)=phi_mem_coef(ibdyg,1)
     &        *(2.0*dmat(2,1)/(iner2+1.0)**2)
            smat(2,1)=smat(1,2)
            smat(2,2)=phi_mem_coef(ibdyg,1)
     &        *(1.0-(1.0+2.0*dmat(1,1))/(iner2+1.0)**2)
            elseif(MaterialTypeIBM(ibdyg) .eq. 2) then 
! skalak (SK) membrane Ws=\phi/2 (1/2 I_1^2 + I_1 - I_2 + C/2 I_2^2)
! phi_mem_coef(1)=\phi
! phi_mem_coef(2)=C
            smat(1,1)=phi_mem_coef(ibdyg,1)
     &             * (  iner1+1.0+(1.0+2.0*dmat(2,2))
     &                *(phi_mem_coef(ibdyg,2)*iner2-1)   )
            smat(2,2)=phi_mem_coef(ibdyg,1)
     &              *(  iner1+1.0+(1.0+2.0*dmat(1,1))
     &                *(phi_mem_coef(ibdyg,2)*iner2-1)   )
            smat(1,2)=-2.0d0*phi_mem_coef(ibdyg,1)*dmat(1,2)
     &                *(phi_mem_coef(ibdyg,2)*iner2-1)
            smat(2,1)=smat(1,2)
            elseif(MaterialTypeIBM(ibdyg) .eq. 3) then 
! Fung tissue model for heart valve

           if(Fibrous_Esh(ibdy ) .eq. 1) then
             do noj=1,3
                xposFib(noj)=
     &           dot_product(s(1,1:ntype),x_FibVec(1:ntype,noj))
             end do

             call crossvec(tmpv3,n_FibVec,xposFib)
             temp_ibm2=dot_product(n3_FibVec,tmpv3)
             if(temp_ibm2 .ge. 0.0)then
                temp_ibm2=1.0
             else
                temp_ibm2=-1.0
             endif
             tmpv3(1)=dot_product(xposFib,xposFib)
             tmpv3(2)=dot_product(n_FibVec,n_FibVec)
             tmpv3(3)=dot_product(n_FibVec,xposFib)
             temp_ibm1=temp_ibm2*acos(tmpv3(3)/sqrt(tmpv3(1)*tmpv3(2)))

             tmpv3(1)=(cos(temp_ibm1))**2
             tmpv3(2)=(sin(temp_ibm1))**2
             tmpv3(3)=sin(temp_ibm1)*cos(temp_ibm1)

             R_Fibmat(1,1:3)=(/tmpv3(1),tmpv3(2),2.0*tmpv3(3)/)
             R_Fibmat(2,1:3)=(/tmpv3(2),tmpv3(1),-2.0*tmpv3(3)/)
             R_Fibmat(3,1:3)=(/-tmpv3(3),tmpv3(3),tmpv3(1)-tmpv3(2)/)

             tmpv3(1)=dmat(1,1)
             tmpv3(2)=dmat(2,2)
             tmpv3(3)=dmat(1,2)   

             tmpv2=matmul(R_Fibmat,tmpv3)
             dmat(1,1)=tmpv2(1)
             dmat(2,2)=tmpv2(2)
             dmat(1,2)=tmpv2(3)
             dmat(2,1)=dmat(1,2)

           endif
            

            temp_ibm1=phi_mem_coef(ibdyg,2)*dmat(1,1)**2
     &           +phi_mem_coef(ibdyg,3)*dmat(2,2)**2
     &           +2.0*phi_mem_coef(ibdyg,4)*dmat(2,2)*dmat(1,1)
     &           +phi_mem_coef(ibdyg,5)*((dmat(1,2)+dmat(2,1))/2)**2
     &           +phi_mem_coef(ibdyg,6)*dmat(1,1)*(dmat(1,2)+dmat(2,1))
     &           +phi_mem_coef(ibdyg,7)*dmat(2,2)*(dmat(1,2)+dmat(2,1))


            temp_ibm2=phi_mem_coef(ibdyg,1)/2.0d0*exp(temp_ibm1)
             
            smat(1,1)=(
     &                2.0*phi_mem_coef(ibdyg,2)*dmat(1,1)
     &               +2.0*phi_mem_coef(ibdyg,4)*dmat(2,2)
     &               +phi_mem_coef(ibdyg,6)*(dmat(1,2)+dmat(2,1)))
     &               *temp_ibm2

            smat(2,2)=(
     &                2.0*phi_mem_coef(ibdyg,3)*dmat(2,2)
     &               +2.0*phi_mem_coef(ibdyg,4)*dmat(1,1)
     &               +phi_mem_coef(ibdyg,7)*(dmat(1,2)+dmat(2,1)))
     &               *temp_ibm2


            smat(1,2)=(
     &                phi_mem_coef(ibdyg,5)/2.0d0*(dmat(2,1)+dmat(1,2))
     &               +phi_mem_coef(ibdyg,6)*dmat(1,1)
     &               +phi_mem_coef(ibdyg,7)*dmat(2,2))
     &               *temp_ibm2
            smat(2,1)=smat(1,2)

           if(Fibrous_Esh(ibdy) .eq. 1) then
            R_Fibmat(1:2,3)=-R_Fibmat(1:2,3)
            R_Fibmat(3,1:2)=-R_Fibmat(3,1:2)

             tmpv3(1)=smat(1,1)
             tmpv3(2)=smat(2,2)
             tmpv3(3)=smat(1,2)   

             tmpv2=matmul(R_Fibmat,tmpv3)
             smat(1,1)=tmpv2(1)
             smat(2,2)=tmpv2(2)
             smat(1,2)=tmpv2(3)
             smat(2,1)=smat(1,2)
           endif
           endif

            !call invertelement(kmatbar,2) 
            
            do noi=1,2
              do noj=1,2
                 kmatbar(noi,noj)=1.0/(kmatbar(noi,noj)+1.0e-9)
              enddo
            enddo
            
            bmat(1:3,1:3)=0.0          
            bmat(1,1)=phi_ben_coef(ibdyg)
     &        *(kmat(1,1)+phi_nus_coef(ibdyg)*kmat(2,2))*kmatbar(1,1)
            bmat(2,2)=phi_ben_coef(ibdyg)
     &        *(1.0-phi_nus_coef(ibdyg))*kmat(2,1)*kmatbar(1,2)
            bmat(2,2)=bmat(2,2)
     &        +phi_ben_coef(ibdyg)
     &        *(1.0-phi_nus_coef(ibdyg))*kmat(1,2)*kmatbar(2,1)
            bmat(3,3)=phi_ben_coef(ibdyg)
     &        *(kmat(2,2)+phi_nus_coef(ibdyg)*kmat(1,1))*kmatbar(2,2)

                ks(1:ntype,1:ntype)=ks(1:ntype,1:ntype)
     &             +wei_i*matmul(matmul(transpose(amat1(1:2,1:ntype))
     &             ,smat),amat1(1:2,1:ntype))

                kb(1:ntype,1:ntype)=kb(1:ntype,1:ntype)
     &             +wei_i*matmul(matmul(transpose(amat2(1:3,1:ntype))
     &             ,bmat),amat2(1:3,1:ntype))


                call ecmat(ms(1:ntype,1:ntype),s(1,1:ntype),ntype,1)
                mass(1:ntype,1:ntype)=mass(1:ntype,1:ntype)
     &             +wei_i*ms(1:ntype,1:ntype)

           end do  ! gauss

           do noi=1,ntype
              ntemi=nea_esh(ibdy,ne,noi)
              do noj=1,ntype
                 ntemj=nea_esh(ibdy,ne,noj)
                 kks(ntemi,ntemj)=kks(ntemi,ntemj)+  ks(noi,noj)
                 kkb(ntemi,ntemj)=kkb(ntemi,ntemj)+  kb(noi,noj)
                 mms(ntemi,ntemj)=mms(ntemi,ntemj)+mass(noi,noj)
               end do
            end do
 
        end do  !element

         

!~~~~~~~~~~~~~~ Nodal oprator
        if (ExternalPressureFlag(ibdyg)) then

        i=ibdy  
        include "distIBM_normalPressure_fn.Fi"   !I need to readjust Fi file
        temp_ibm1=temp_ibm2*p_inflation
        do j=1,ns_ibm_r_esh(i)
             fibm1_esh(i,j)=fibm1_esh(i,j)
     &          -fibm1pres_esh(j)  /areapnt_esh(i,j)
     &          *temp_ibm1
             fibm2_esh(i,j)=fibm2_esh(i,j)
     &          -fibm2pres_esh(j)  /areapnt_esh(i,j)
     &          *temp_ibm1
             fibm3_esh(i,j)=fibm3_esh(i,j)
     &          -fibm3pres_esh(j)  /areapnt_esh(i,j)
     &          *temp_ibm1

        end do
        endif
        i=ibdy  
         if(contacttype .eq. -1) then
            do j=1,ns_ibm_r_esh(i)
                dxcont(1)=fibm1cont_esh(j)
                dxcont(2)=fibm2cont_esh(j)
                dxcont(3)=fibm3cont_esh(j)
                ddcont=sqrt(dxcont(1)**2+dxcont(2)**2+dxcont(3)**2)+eps
                normalpres_esh(j,1)=dxcont(1)/ddcont
                normalpres_esh(j,2)=dxcont(2)/ddcont
                normalpres_esh(j,3)=dxcont(3)/ddcont
            enddo
        endif

        i=ibdy
        i2l=i      
        i2g=ibdyg    

         aamat_esh=0.d0
         aamat_esh(1: ns_ibm_r_esh(i)+ns_ibm_i_esh(i)
     &        ,1: ns_ibm_r_esh(i)+ns_ibm_i_esh(i))
     &    =((density_coef(i2g)+density_coefp(i2g))*timeMarchcoef(2)
     &     +(cs_ibm(i2g)+propDamp(i2g,1)*density_coef(i2g))
     &                *timeMarchcoef(3))*
     &        mms(1: ns_ibm_r_esh(i)+ns_ibm_i_esh(i)
     &           ,1: ns_ibm_r_esh(i)+ns_ibm_i_esh(i))
     &     +(propDamp(i2g,2)*timeMarchcoef(3)+timeMarchcoef(1))
     &      *( kks(1: ns_ibm_r_esh(i)+ns_ibm_i_esh(i)
     &           ,1: ns_ibm_r_esh(i)+ns_ibm_i_esh(i))
     &        +kkb(1: ns_ibm_r_esh(i)+ns_ibm_i_esh(i)
     &           ,1: ns_ibm_r_esh(i)+ns_ibm_i_esh(i)) )

        do j=1,target_num(i2g)
             k=target_point_num_esh(i,j)
             temp_ibm1=
     &          (X_na_esh(k,1)-Xtar_na_esh(j,1))
             temp_ibm2=
     &          (X_na_esh(k,2)-Xtar_na_esh(j,2))
             temp_ibm3=
     &          (X_na_esh(k,3)-Xtar_na_esh(j,3))

             include "distIBM_target_k_rampfn.Fi"               
             if(time_alphaf .le. target_t_link_esh(i,j)) then
                ksh_tmp=target_k_link_esh(i,j)*target_timefn
             else
                ksh_tmp=0.0
             endif
             force_points_esh(i,j,1)=k_link*temp_ibm1*ksh_tmp
             force_points_esh(i,j,2)=k_link*temp_ibm2*ksh_tmp
             force_points_esh(i,j,3)=k_link*temp_ibm3*ksh_tmp

             temp_ibm1=dXtar_na_esh(j,1)
             temp_ibm2=dXtar_na_esh(j,2)
             temp_ibm3=dXtar_na_esh(j,3)

             temp_ibm1=dX_na_esh(k,1)-temp_ibm1
             temp_ibm2=dX_na_esh(k,2)-temp_ibm2
             temp_ibm3=dX_na_esh(k,3)-temp_ibm3

             temp2_ibm= cs_ibm_target(i2g)*k_link*temp_ibm1*ksh_tmp
             force_points_esh(i,j,1)=force_points_esh(i,j,1)+temp2_ibm


             temp2_ibm= cs_ibm_target(i2g)*k_link*temp_ibm2*ksh_tmp
             force_points_esh(i,j,2)=force_points_esh(i,j,2)+temp2_ibm

             temp2_ibm= cs_ibm_target(i2g)*k_link*temp_ibm3*ksh_tmp
             force_points_esh(i,j,3)=force_points_esh(i,j,3)+temp2_ibm

             f_link1_esh(i,k)=force_points_esh(i,j,1)
             f_link2_esh(i,k)=force_points_esh(i,j,2)
             f_link3_esh(i,k)=force_points_esh(i,j,3)
       enddo
        if(ndim .gt. 2) then
          ddcont=(min_grid_x*min_grid_y*min_grid_z)**(1.0/3.0)
        else
          ddcont=sqrt(min_grid_x*min_grid_y)
        endif       

       i=ibdy
       i2g=ibdyg
       if(ContactForceFlag(i2g))then

       include "distIBM_Contact_Coeffn.Fi"   
       if(contacttype .ne. -1) then
         write(*,*) 'Implicit version is not implemented yet!'
         STOP
       endif
       do j2=1,ns_ibm_r_esh(i)
       do i2=1,nFixcontact
                        if((
     &                     abs((X_na_esh(j2,2)-
     &                          xFixcontact(i2,2))/min_grid_y)
     &                    .le.12.0) .and.
     &                    (abs((X_na_esh(j2,1)-
     &                          xFixcontact(i2,1))/min_grid_x)
     &                    .le.12.0) .and.
     &                    (abs((X_na_esh(j2,3)-
     &                          xFixcontact(i2,3))/min_grid_z)
     &                    .le.12.0) ) then
                              ksh_tmp=X_na_esh(j2,1)

                              temp_ibm1= 
     &                              ((X_na_esh(j2,2)
     &                               -xFixcontact(i2,2))
     &                           /(2.0*min_grid_y) )
                              call delta_fun(delta_typey,temp_ibm1,fn2)
                              temp_ibm2= 
     &                              ((ksh_tmp
     &                               -xFixcontact(i2,1))
     &                           /(2.0*min_grid_x) )
                              call delta_fun(delta_typex,temp_ibm2,fn1)
                              if(ndim .gt. 2)  then 
                                 temp_ibm3= 
     &                              ((X_na_esh(j2,3)
     &                               -xFixcontact(i2,3))
     &                              /(2.0*min_grid_z) )
                                  call 
     &                              delta_fun(delta_typez,temp_ibm3,fn3)
                              else
                                   temp_ibm3=0.0
                                   fn3=1.0
                              endif
                              temp3_ibm=
     &                        sqrt((temp_ibm1*min_grid_y)**2
     &                            +(temp_ibm2*min_grid_x)**2
     &                            +(temp_ibm3*min_grid_z)**2)*2.00
     &                            +1.0d-9
                              f_impuls1_esh(i,j2)= f_impuls1_esh(i,j2)+
     &                               fn1*fn2*fn3*areapnt_esh(i,j2)
     &                               *ds_ibm_esh(i,j2)*impactpen(1)
     &                               /(min_grid_x*min_grid_y*min_grid_z)
     &                               *(ksh_tmp-xFixcontact(i2,1))
     &                               /temp3_ibm
                              f_impuls2_esh(i,j2)= f_impuls2_esh(i,j2)+
     &                               fn1*fn2*fn3*areapnt_esh(i,j2)
     &                              *ds_ibm_esh(i,j2)*impactpen(1)
     &                              /(min_grid_x*min_grid_y*min_grid_z)
     &                              *(X_na_esh(j2,2)
     &                               -xFixcontact(i2,2))
     &                               /temp3_ibm
                              if(ndim .gt. 2)  
     &                           f_impuls3_esh(i,j2)=
     &                              f_impuls3_esh(i,j2)+
     &                               fn1*fn2*fn3*areapnt_esh(i,j2)
     &                              *ds_ibm_esh(i,j2)*impactpen(1)
     &                              /(min_grid_x*min_grid_y*min_grid_z)
     &                              *(X_na_esh(j2,1)
     &                               -xFixcontact(i2,3))
     &                               /temp3_ibm
             endif
       enddo
       enddo

       if(contacttype .eq. -1) then        
        if (i2g .le. nr_ibm_f) then
           do ibkt2=1,NBucketnum

             ibktmp1=mod(ibkt2,IBucketnum(1)*IBucketnum(2))
             if(ibktmp1 .eq. 0) ibktmp1=IBucketnum(1)*IBucketnum(2)

             ibktx=mod(ibktmp1,IBucketnum(1))
             if(ibktx .eq. 0) ibktx=IBucketnum(1)

             ibkty=int((ibktmp1-1)/IBucketnum(1))+1
             ibktz=int((ibkt2-1)/(IBucketnum(1)*IBucketnum(2)))+1

             ibktmin(1)=max(1,ibktx-1)
             ibktmax(1)=min(IBucketnum(1),ibktx+1)

             ibktmin(2)=max(1,ibkty-1)
             ibktmax(2)=min(IBucketnum(2),ibkty+1)

             ibktmin(3)=max(1,ibktz-1)
             ibktmax(3)=min(IBucketnum(3),ibktz+1)
             do ibkt_i=PBucket(i2g,ibkt2),PBucket(i2g,ibkt2+1)-1
                j2 =sBucket_esh(i,ibkt2,ibkt_i)
               do i2=1,nr_ibm_esh
                  i3g=Ilocglb_esh(i2)
                  if(i3g .le. nr_ibm_fb) then
                  if(i2 .ne. i) then
                    do ibkts1=ibktmin(1),ibktmax(1)
                    do ibkts2=ibktmin(2),ibktmax(2)
                    do ibkts3=ibktmin(3),ibktmax(3)
                      ibkt=
     &                       ibkts1
     &                     +(ibkts2-1)*IBucketnum(1)
     &                     +(ibkts3-1)*IBucketnum(1)*IBucketnum(2)

                      do ibkt2_i=PBucket(i3g,ibkt),PBucket(i3g,ibkt+1)-1
                         j =sBucket_esh(i2,ibkt,ibkt2_i) 

                           outcont(1)=X_na_esh(j2,1)-
     &                                gx_ibm_esh(i2,j)
                           outcont(2)=X_na_esh(j2,2)-
     &                                gy_ibm_esh(i2,j)
                           outcont(3)=X_na_esh(j2,3)-
     &                                gz_ibm_esh(i2,j)                    
                           outcont2(1)=normalpres_esh(j2,1)
                           outcont2(2)=normalpres_esh(j2,2)
                           outcont2(3)=normalpres_esh(j2,3)
                        ksh_tmp=sqrt(
     &                     outcont(1)**2+
     &                     outcont(2)**2+
     &                     outcont(3)**2)

                     dncont=dot_product(outcont(1:3),outcont2(1:3))
                     dncont=-dncont/(abs(dncont)+eps)

                        temp_ibm2=time_alphaf  


                        if( (ksh_tmp/ddcont   .le. 10.0) 
     &                .and. (temp_ibm2 .gt. 0.05) ) then
                              temp_ibm1= 
     &                            max(ksh_tmp*dncont/ddcont,0.0)
                              call delta_fun(delta_typey,temp_ibm1,fn1)

                              temp3_ibm=ksh_tmp
                              dxcont(1)=temp_ibm1 !max(ksh_tmp*dncont,0.0)/ddcont
                              dxcont(2)=1.0/(1+exp(10*(dxcont(1)-0.0)))
                              dxcont(3)=impactpen(1)
     &                            +dxcont(2)*impactpen(2)
                              dxcont(3)=dxcont(3)*dncont



!                              if(0 .eq. 1) then
!                                fn1=1.0/4.0
!                                if(temp3_ibm/ddcont>1.0)then
!                                  dxcont(1)=ksh_tmp*
!     &                             exp(-impactpen(1)*
!     &                             (temp3_ibm/ddcont-1.0)/ksh_tmp)
!                                else
!                                  dxcont(1)=ksh_tmp
!     &                             -impactpen(2)*(temp3_ibm/ddcont-1.0)
!                                endif
!                                dxcont(3)=dxcont(1)   
!                              endif    
                          
                              ksh_tmp=1.0 

                              f_impuls1_esh(i,j2)=
     &                                f_impuls1_esh(i,j2)+
     &                               fn1*2.0*areapnt_esh(i,j2)
     &                               *dxcont(3)*ksh_tmp
     &                               *( X_na_esh(j2,1)
     &                                 -gx_ibm_esh(i2,j))
     &                               /temp3_ibm


                              f_impuls2_esh(i,j2)=
     &                                f_impuls2_esh(i,j2)+
     &                               fn1*2.0*areapnt_esh(i,j2)
     &                               *dxcont(3)*ksh_tmp
     &                              *(X_na_esh(j2,2)
     &                               -gy_ibm_esh(i2,j))
     &                               /temp3_ibm
                              if(ndim .gt. 2) then
                                 f_impuls3_esh(i,j2)=
     &                               f_impuls3_esh(i,j2)+
     &                               fn1*2.0*areapnt_esh(i,j2)
     &                              *dxcont(3)*ksh_tmp
     &                              *(X_na_esh(j2,3)
     &                               -gz_ibm_esh(i2,j))
     &                               /temp3_ibm

                              endif
                         endif
                     end do  !ibkt2_i
                     enddo   !ibkts1
                     enddo   !ibkts2
                     enddo   !ibkts3
                  endif
                  endif
               enddo   !i2i

!============  This part is skiped in implicit version END

             enddo !ibkt_i
             enddo !ibkt2
             if(contactplanesFlag(ibdyg)) then
               do ibkt2=1,Ncontactplanes(ibdyg) 
                contactplane_point(1:3)= 
     &                       contactplanesPara(ibdyg,ibkt2,1:3)
                contactplane_n(1:3)=
     &                       contactplanesPara(ibdyg,ibkt2,4:6)

                dncont=0.0
                do i2=1,3
                   dncont=dncont+contactplane_n(i2) 
     &                          *contactplane_point(i2)
                enddo
                contactplane_n(4)=-dncont  !plane defined as ax+by+cz+d=0, here we save d

               temp_ibm2=s_function((time_alphaf-contact_time_esh(i,1))
     &                              /contact_time_esh(i,2) )
                                
               temp_ibm2=time_alphaf

               do j2=1,ns_ibm_r_esh(i)
                  ksh_tmp=contactplane_n(1) 
     &                   *X_na_esh(j2,1) 
     &                   +contactplane_n(2) 
     &                   *X_na_esh(j2,2) 
     &                   +contactplane_n(3) 
     &                   *X_na_esh(j2,3) 
     &                   +contactplane_n(4)
                
                  if(ksh_tmp/ddcont   .le. 8.0) then

                              temp_ibm1= 
     &                            max(ksh_tmp/(2*ddcont)-0.5,0.0)
                              call delta_fun(delta_typey,temp_ibm1,fn1)

                              temp3_ibm=ksh_tmp/(2*ddcont)-0.5
                              dxcont(1)=temp3_ibm     !max(ksh_tmp*dncont,0.0)/ddcont

                              if(temp3_ibm .le.0.0) then 
                                dxcont(2)=2.0*(
     &                         1.0/(1+exp(6.0*(dxcont(1)-0.0)))-0.5)
                              else
                                dxcont(2)=0.0
                              endif
                              dxcont(3)=(impactpen(1)
     &                            +dxcont(2)*impactpen(2))
     &                            *contact_coef_esh(i,1,j2)*temp_ibm2

                               f_impuls1_esh(i,j2)=
     &                                f_impuls1_esh(i,j2)+
     &                               fn1*2.0*areapnt_esh(i,j2)
     &                               *dxcont(3)
     &                               *contactplane_n(1)

                              f_impuls2_esh(i,j2)=
     &                                f_impuls2_esh(i,j2)+
     &                               fn1*2.0*areapnt_esh(i,j2)
     &                               *dxcont(3)
     &                              *contactplane_n(2)

                              if(ndim .gt. 2) then
                                 f_impuls3_esh(i,j2)=
     &                               f_impuls3_esh(i,j2)+
     &                               fn1*2.0*areapnt_esh(i,j2)
     &                              *dxcont(3)
     &                              *contactplane_n(3)
                              endif
                   endif
                enddo !j2
             enddo !ibkt2
             endif !contactplanesFlag

             if(channelcontacty) then
             do j2=1,ns_ibm_r_esh(i)
               do i2=1,2  !with channel bndry in y
                     if(i2 .eq. 1) then
                        h_channel=gy(nygrid_ibm)
                        if (gy_ibm_massive_esh(i,j2) 
     &                      .lt. h_channel) then
                            ksh_tmp=X_na_esh(j2,2)
                        else
                           ksh_tmp=h_channel-1.0d-9
                        endif
                     else
                        h_channel=gy(2)
                        if (gy_ibm_massive_esh(i,j2) 
     &                      .gt. h_channel) then
                            ksh_tmp=X_na_esh(j2,2)
                        else
                           ksh_tmp=h_channel+1.0d-9
                        endif
                     endif
                     do j=1,nxgrid_ibm
                       do k=1,nzgrid_ibm
                        if((
     &                  abs((X_na_esh(j2,2)-h_channel)
     &                       /min_grid_y)
     &                 .le.12.0) .and.
     &                 (abs((X_na_esh(j2,1)-gx(j))
     &                       /min_grid_x)
     &                 .le.12.0) .and.
     &                 (abs((X_na_esh(j2,3)-gz(k))
     &                       /min_grid_z)
     &                 .le.12.0) ) then

                         temp_ibm1= 
     &                         ((ksh_tmp-h_channel)
     &                     /(min_grid_y))

                           call delta_fun(delta_typey,temp_ibm1,fn2)

                          temp_ibm2= 
     &                        ((X_na_esh(j2,1)-gx(j))
     &                     /(min_grid_x))

                           call delta_fun(delta_typex,temp_ibm2,fn1)

                          if(ndim .gt. 2) then
                             temp_ibm3= 
     &                          ((X_na_esh(j2,3)-gz(k))
     &                       /(min_grid_z) )
                           call delta_fun(delta_typez,temp_ibm3,fn3)
                          else
                             temp_ibm3=0.0
                             fn3=1.0
                          endif

                         temp3_ibm=
     &                   sqrt((temp_ibm1*min_grid_y)**2
     &                      +(temp_ibm2*min_grid_x)**2
     &                      +(temp_ibm3*min_grid_z)**2)+1.0d-9

                          f_impuls1_esh(i,j2)= f_impuls1_esh(i,j2)+
     &                               fn1*fn2*fn3*areapnt_esh(i,j2)
     &                        *ds_ibm_esh(i,j2)*impactpen(1)
     &                        /(min_grid_x*min_grid_y*min_grid_z)
     &                      *(X_na_esh(j2,1)-gx(j))/temp3_ibm
                          f_impuls2_esh(i,j2)= f_impuls2_esh(i,j2)+
     &                               fn1*fn2*fn3*areapnt_esh(i,j2)
     &                        *ds_ibm_esh(i,j2)*impactpen(1)
     &                        /(min_grid_x*min_grid_y*min_grid_z)
     &                        *(ksh_tmp-h_channel)/temp3_ibm
                          if(ndim .gt. 2) 
     &                    f_impuls3_esh(i,j2)= f_impuls3_esh(i,j2)+
     &                               fn1*fn2*fn3*areapnt_esh(i,j2)
     &                        *ds_ibm_esh(i,j2)*impactpen(1)
     &                        /(min_grid_x*min_grid_y*min_grid_z)
     &                      *(X_na_esh(j2,3)-gz(k))/temp3_ibm
                        endif
                    
                   end do !k=1,nz 
                 end do !j=1,nx
               enddo  !i2=1,2
             end do    !j2
             endif !channelcontacty

             if((channelcontactz) .and. (ndim .gt. 2)) then
             do j2=1,ns_ibm_r_esh(i)

               do i2=1,2  !with channel bndry in z

                     if(i2 .eq. 1) then
                        h_channel=gz(nzgrid_ibm)
                        if (X_na_esh(j2,3) 
     &                      .lt. h_channel) then
                            ksh_tmp=X_na_esh(j2,3)
                        else
                            ksh_tmp=h_channel-1.0d-9
                        endif
                     else
                        h_channel=gz(2)
                        if (X_na_esh(j2,3) 
     &                      .gt. h_channel) then
                            ksh_tmp=X_na_esh(j2,3)
                        else
                           ksh_tmp=h_channel+1.0d-9
                        endif
                     endif
                     do j=1,nxgrid_ibm
                       do k=1,nygrid_ibm
                        if((
     &                  abs((X_na_esh(j2,2)-gy(k))
     &                       /min_grid_y)
     &                 .le.12.0) .and.
     &                 (abs((X_na_esh(j2,1)-gx(j))
     &                       /min_grid_x)
     &                 .le.12.0) .and.
     &                 (abs((X_na_esh(j2,3)-h_channel)
     &                       /min_grid_z)
     &                 .le.12.0) ) then

                        temp_ibm1= 
     &                         ((X_na_esh(j2,2)-gy(k))
     &                       /(min_grid_y) )
                           call delta_fun(delta_typey,temp_ibm1,fn2)

                        temp_ibm2= 
     &                        ((X_na_esh(j2,1)-gx(j))
     &                     /(min_grid_x))
                           call delta_fun(delta_typex,temp_ibm2,fn1)

                        temp_ibm3= 
     &                          ((ksh_tmp-h_channel)
     &                       /(min_grid_z) )
                           call delta_fun(delta_typez,temp_ibm3,fn3)


                         temp3_ibm=
     &                   sqrt((temp_ibm1*min_grid_y)**2
     &                      +(temp_ibm2*min_grid_x)**2
     &                      +(temp_ibm3*min_grid_z)**2)+1.0d-9

                          f_impuls1_esh(i,j2)= f_impuls1_esh(i,j2)+
     &                               fn1*fn2*fn3*areapnt_esh(i,j2)
     &                        *ds_ibm_esh(i,j2)*impactpen(1)
     &                        /(min_grid_x*min_grid_y*min_grid_z)
     &                        *(X_na_esh(j2,1)-gx(j))
     &                       /temp3_ibm

                          f_impuls2_esh(i,j2)= f_impuls2_esh(i,j2)+
     &                               fn1*fn2*fn3*areapnt_esh(i,j2)
     &                        *ds_ibm_esh(i,j2)*impactpen(1)
     &                        /(min_grid_x*min_grid_y*min_grid_z)
     &                        *(X_na_esh(j2,2)-gy(k))
     &                       /temp3_ibm

                          f_impuls3_esh(i,j2)= f_impuls3_esh(i,j2)+
     &                               fn1*fn2*fn3*areapnt_esh(i,j2)
     &                        *ds_ibm_esh(i,j2)*impactpen(1)
     &                        /(min_grid_x*min_grid_y*min_grid_z)
     &                        *(ksh_tmp-h_channel)/temp3_ibm
                        endif
                    
                   end do !k=1,nz 
                 end do !j=1,nx
               enddo  !i2=1,2
             end do    !j2
             endif !channelcontactz
          endif   !for if ((i .le. nr_ibm_f).and.(i .ge. 1)) then
       endif  !contacttypeif of contact model
       endif  !ContactForceFlag(i)

        do j=1,ns_ibm_r_esh(i)+ns_ibm_i_esh(i)
           finer_1_ibm_esh(i,j)= density_coefp(i2g) *
     &    ddX_na_esh(j,1)
           finer_2_ibm_esh(i,j)= density_coefp(i2g) *
     &    ddX_na_esh(j,2)
           finer_3_ibm_esh(i,j)= density_coefp(i2g) *
     &    ddX_na_esh(j,3)
         end do

!here 2-16-2015 7:02pm
c calculation of total forces 
       i=ibdy
       i2g=ibdyg

        do j=1,ns_ibm_r_esh(i)
             fibm1_esh(i,j)=fibm1_esh(i,j)
     &          +f_link1_esh(i,j)
             fibm2_esh(i,j)=fibm2_esh(i,j)
     &          +f_link2_esh(i,j)
             fibm3_esh(i,j)=fibm3_esh(i,j)
     &          +f_link3_esh(i,j)
        end do

       do j=1,ns_ibm_r_esh(i) +ns_ibm_i_esh(i) 
           f_link1_esh(i,j)=(density_coef(i2g)*
     &        (timeMarchcoef(2)+propDamp(i2g,1)*timeMarchcoef(3))
     &        +density_coefp(i2g)*timeMarchcoef(2)
     &        +cs_ibm(i2g)*timeMarchcoef(3))*X_np1_esh(j,1)
     &        -density_coef(i2g)*ddX_in_esh(j,1)
     &        -density_coefp(i2g)*ddX_in_esh(j,1)
     &        -(cs_ibm(i2g)+
     &        +propDamp(i2g,1)*density_coef(i2g))*dX_in_esh(j,1)
     &        -finer_1_ibm_esh(i,j)

           f_link2_esh(i,j)=(density_coef(i2g)*
     &        (timeMarchcoef(2)+propDamp(i2g,1)*timeMarchcoef(3))
     &        +density_coefp(i2g)*timeMarchcoef(2)
     &        +cs_ibm(i2g)*timeMarchcoef(3))*X_np1_esh(j,2)
     &        -density_coef(i2g)*ddX_in_esh(j,2)
     &        -density_coefp(i2g)*ddX_in_esh(j,2)
     &        -(cs_ibm(i2g)+
     &        +propDamp(i2g,1)*density_coef(i2g))*dX_in_esh(j,2)
     &        -finer_2_ibm_esh(i,j)

           f_link3_esh(i,j)=(density_coef(i2g)*
     &        (timeMarchcoef(2)+propDamp(i2g,1)*timeMarchcoef(3))
     &        +density_coefp(i2g)*timeMarchcoef(2)
     &        +cs_ibm(i2g)*timeMarchcoef(3))*X_np1_esh(j,3)
     &        -density_coef(i2g)*ddX_in_esh(j,3)
     &        -density_coefp(i2g)*ddX_in_esh(j,3)
     &        -(cs_ibm(i2g)+
     &        +propDamp(i2g,1)*density_coef(i2g))*dX_in_esh(j,3)
     &        -finer_3_ibm_esh(i,j)
       end do

      f_link1_esh(i,1: ns_ibm_r_esh(i)+ns_ibm_i_esh(i))=
     & matmul(mms(1: ns_ibm_r_esh(i)+ns_ibm_i_esh(i),
     &            1: ns_ibm_r_esh(i)+ns_ibm_i_esh(i)),
     &         f_link1_esh(i,1: ns_ibm_r_esh(i)+ns_ibm_i_esh(i)) )

      f_link1_esh(i,1: ns_ibm_r_esh(i)+ns_ibm_i_esh(i))=
     &f_link1_esh(i,1: ns_ibm_r_esh(i)+ns_ibm_i_esh(i))
     & +matmul(kks(1: ns_ibm_r_esh(i)+ns_ibm_i_esh(i)
     &           ,1: ns_ibm_r_esh(i)+ns_ibm_i_esh(i))
     &        +kkb(1: ns_ibm_r_esh(i)+ns_ibm_i_esh(i)
     &           ,1: ns_ibm_r_esh(i)+ns_ibm_i_esh(i)),
     &         propDamp(2,i2g)*
     &         (timeMarchcoef(3)*
     &          X_np1_esh(1: ns_ibm_r_esh(i)+ns_ibm_i_esh(i),1)
     &         -dX_in_esh(1: ns_ibm_r_esh(i)+ns_ibm_i_esh(i),1))
     &        + X_na_esh(1: ns_ibm_r_esh(i)+ns_ibm_i_esh(i),1) )
     &         

      f_link2_esh(i,1: ns_ibm_r_esh(i)+ns_ibm_i_esh(i))=
     & matmul( mms(1: ns_ibm_r_esh(i)+ns_ibm_i_esh(i),
     &             1: ns_ibm_r_esh(i)+ns_ibm_i_esh(i)),
     &         f_link2_esh(i,1: ns_ibm_r_esh(i)+ns_ibm_i_esh(i)) )

      f_link2_esh(i,1: ns_ibm_r_esh(i)+ns_ibm_i_esh(i))=
     &f_link2_esh(i,1: ns_ibm_r_esh(i)+ns_ibm_i_esh(i))
     & +matmul(kks(1: ns_ibm_r_esh(i)+ns_ibm_i_esh(i)
     &           ,1: ns_ibm_r_esh(i)+ns_ibm_i_esh(i))
     &        +kkb(1: ns_ibm_r_esh(i)+ns_ibm_i_esh(i)
     &           ,1: ns_ibm_r_esh(i)+ns_ibm_i_esh(i)),
     &         propDamp(2,i2g)*
     &         (timeMarchcoef(3)*
     &          X_np1_esh(1: ns_ibm_r_esh(i)+ns_ibm_i_esh(i),2)
     &         -dX_in_esh(1: ns_ibm_r_esh(i)+ns_ibm_i_esh(i),2))
     &        + X_na_esh(1: ns_ibm_r_esh(i)+ns_ibm_i_esh(i),2) )


      f_link3_esh(i,1: ns_ibm_r_esh(i)+ns_ibm_i_esh(i))=
     & matmul(mms(1: ns_ibm_r_esh(i)+ns_ibm_i_esh(i),
     &            1: ns_ibm_r_esh(i)+ns_ibm_i_esh(i)),
     &         f_link3_esh(i,1: ns_ibm_r_esh(i)+ns_ibm_i_esh(i)))

      f_link3_esh(i,1: ns_ibm_r_esh(i)+ns_ibm_i_esh(i))=
     &f_link3_esh(i,1: ns_ibm_r_esh(i)+ns_ibm_i_esh(i))
     & +matmul(kks(1: ns_ibm_r_esh(i)+ns_ibm_i_esh(i)
     &           ,1: ns_ibm_r_esh(i)+ns_ibm_i_esh(i))
     &        +kkb(1: ns_ibm_r_esh(i)+ns_ibm_i_esh(i)
     &           ,1: ns_ibm_r_esh(i)+ns_ibm_i_esh(i)),
     &         propDamp(2,i2g)*
     &         (timeMarchcoef(3)*
     &          X_np1_esh(1: ns_ibm_r_esh(i)+ns_ibm_i_esh(i),3)
     &         -dX_in_esh(1: ns_ibm_r_esh(i)+ns_ibm_i_esh(i),3))
     &        + X_na_esh(1: ns_ibm_r_esh(i)+ns_ibm_i_esh(i),3) )

c calculation of total forces 
       i=ibdy

        do j=1,ns_ibm_r_esh(i) 
           fibm1_esh(i,j)=-f_link1_esh(i,j)
     &                  + areapnt_esh(i,j)*(
     &                 -fibm1_esh(i,j)   
     &                 +density_coef(i2g)
     &                  *fr*cos(the_grav)*sin(phi_grav)*timetemp2
     &                 ) 
     &                +f_impuls1_esh(i,j)

           fibm2_esh(i,j)=-f_link2_esh(i,j)
     &                  + areapnt_esh(i,j)*(
     &                 -fibm2_esh(i,j)    
     &                 +density_coef(i2g)
     &                  *fr*sin(the_grav)*sin(phi_grav)*timetemp2
     &                 ) 
     &                 +f_impuls2_esh(i,j)

           fibm3_esh(i,j)=-f_link3_esh(i,j)
     &                  + areapnt_esh(i,j)*(
     &                 -fibm3_esh(i,j)    
     &                 +density_coef(i2g)
     &                  *fr*cos(phi_grav)*timetemp2
     &                 ) 
     &                 +f_impuls3_esh(i,j)
        end do


      ksh_tmp=-1000.0
      do np=1,ns_ibm_r_esh(ibdy)  
         ksh_tmp=max(ksh_tmp,aamat_esh(np,np))
      enddo
      k=ns_ibm_r_esh(ibdy)+ns_ibm_i_esh(ibdy)
      do np=1,ns_ibm_i_esh(ibdy)  
         npg=ns_ibm_r_esh(ibdy)+np
         bodypoint(1)=boundrylist_esh(ibdy,np,1)
         bodypoint(2)=boundrylist_esh(ibdy,np,2)
         bodypoint(3)=boundrylist_esh(ibdy,np,3)

         if(bndycnd_esh(ibdy,npg) .eq. 1) then
            aamat_esh(npg,1: ns_ibm_r_esh(ibdy)+ns_ibm_i_esh(ibdy))=0.0
            aamat_esh(npg,npg)=ksh_tmp
            aamat_esh(npg,bodypoint(1))=
     &                            aamat_esh(npg,bodypoint(1))-ksh_tmp
            aamat_esh(npg,bodypoint(2))=
     &                            aamat_esh(npg,bodypoint(2))-ksh_tmp
            aamat_esh(npg,bodypoint(3))=
     &                            aamat_esh(npg,bodypoint(3))+ksh_tmp
          elseif(bndycnd_esh(ibdy,npg) .eq. 2) then
            aamat_esh(npg,1: ns_ibm_r_esh(ibdy)+ns_ibm_i_esh(ibdy))=0.0

            aamat_esh(npg,npg)=ksh_tmp

            aamat_esh(bodypoint(1),1:k)=0.0
            aamat_esh(bodypoint(1),bodypoint(1))=ksh_tmp

            aamat_esh(bodypoint(2),1:k)=0.0
            aamat_esh(bodypoint(2),bodypoint(2))=ksh_tmp

          elseif(bndycnd_esh(ibdy,npg) .eq. 3) then   
            aamat_esh(npg,1: ns_ibm_r_esh(ibdy)+ns_ibm_i_esh(ibdy))=0.0
            aamat_esh(npg,npg)=ksh_tmp
            aamat_esh(npg,bodypoint(1))=
     &                            aamat_esh(npg,bodypoint(1))-ksh_tmp
            aamat_esh(npg,bodypoint(2))=
     &                            aamat_esh(npg,bodypoint(2))-ksh_tmp
            aamat_esh(npg,bodypoint(3))=
     &                            aamat_esh(npg,bodypoint(3))+ksh_tmp

            aamat_esh(bodypoint(1),1:k)=0.0
            aamat_esh(bodypoint(1),bodypoint(1))=ksh_tmp

            aamat_esh(bodypoint(2),1:k)=0.0
            aamat_esh(bodypoint(2),bodypoint(2))=ksh_tmp
         endif
      end do   


      do np=1,ns_ibm_i_esh(ibdy)  
         npg=ns_ibm_r_esh(ibdy)+np
         bodypoint(1)=boundrylist_esh(ibdy,np,1)
         bodypoint(2)=boundrylist_esh(ibdy,np,2)
         bodypoint(3)=boundrylist_esh(ibdy,np,3)
		 
         if(bndycnd_esh(ibdy,npg) .eq. 1) then		 
            fibm1_esh(ibdy,npg)=0.0
            fibm2_esh(ibdy,npg)=0.0
            fibm3_esh(ibdy,npg)=0.0
         elseif(bndycnd_esh(ibdy,npg) .eq. 2) then
            fibm1_esh(ibdy,npg)=ksh_tmp*coef_iter
     &      *(X0_np1_esh(npg,1)-gx_bp_esh(ibdy,npg))
            fibm1_esh(ibdy,bodypoint(1))=
     &             ksh_tmp*coef_iter
     &      *(X0_np1_esh(bodypoint(1),1)-gx_bp_esh(ibdy,bodypoint(1)))

            fibm1_esh(ibdy,bodypoint(2))=
     &             ksh_tmp*coef_iter
     &      *(X0_np1_esh(bodypoint(2),1)-gx_bp_esh(ibdy,bodypoint(2)))

            fibm2_esh(ibdy,npg)=ksh_tmp*coef_iter
     &      *(X0_np1_esh(npg,2)         -gy_bp_esh(ibdy,npg))

            fibm2_esh(ibdy,bodypoint(1))=
     &             ksh_tmp*coef_iter
     &      *(X0_np1_esh(bodypoint(1),2)-gy_bp_esh(ibdy,bodypoint(1)))

            fibm2_esh(ibdy,bodypoint(2))=
     &             ksh_tmp*coef_iter
     &      *(X0_np1_esh(bodypoint(2),2)-gy_bp_esh(ibdy,bodypoint(2)))

            fibm3_esh(ibdy,npg)=ksh_tmp*coef_iter
     &      *(X0_np1_esh(npg,3)         -gz_bp_esh(ibdy,npg))

            fibm3_esh(ibdy,bodypoint(1))=
     &             ksh_tmp*coef_iter
     &      *(X0_np1_esh(bodypoint(1),3)-gz_bp_esh(ibdy,bodypoint(1)))

            fibm3_esh(ibdy,bodypoint(2))=
     &             ksh_tmp*coef_iter
     &      *(X0_np1_esh(bodypoint(2),3)-gz_bp_esh(ibdy,bodypoint(2)))
		 
         elseif(bndycnd_esh(ibdy,npg) .eq. 3) then	!need to change
             fibm1_esh(ibdy,npg)=0.0

             fibm2_esh(ibdy,npg)=0.0

             fibm3_esh(ibdy,npg)=0.0

            fibm1_esh(ibdy,bodypoint(1))=
     &             ksh_tmp*coef_iter
     &      *(X0_np1_esh(bodypoint(1),1)-gx_bp_esh(ibdy,bodypoint(1)))

            fibm1_esh(ibdy,bodypoint(2))=
     &             ksh_tmp*coef_iter
     &      *(X0_np1_esh(bodypoint(2),1)-gx_bp_esh(ibdy,bodypoint(2)))

            fibm2_esh(ibdy,bodypoint(1))=
     &             ksh_tmp*coef_iter
     &      *(X0_np1_esh(bodypoint(1),2)-gy_bp_esh(ibdy,bodypoint(1)))

            fibm2_esh(ibdy,bodypoint(2))=
     &             ksh_tmp*coef_iter
     &      *(X0_np1_esh(bodypoint(2),2)-gy_bp_esh(ibdy,bodypoint(2)))

            fibm3_esh(ibdy,bodypoint(1))=
     &             ksh_tmp*coef_iter
     &      *(X0_np1_esh(bodypoint(1),3)-gz_bp_esh(ibdy,bodypoint(1)))

            fibm3_esh(ibdy,bodypoint(2))=
     &             ksh_tmp*coef_iter
     &      *(X0_np1_esh(bodypoint(2),3)-gz_bp_esh(ibdy,bodypoint(2)))

         endif

      enddo

      if(allocated(aacsr))  then 
        deallocate(iacsr, jacsr,aacsr)
      endif
        allocate(iacsr(ns_ibm_esh))     
        ntemi=0
        do noj=1,ns_ibm_r_esh(i)+ns_ibm_i_esh(i)
        iacsr(noj)=ntemi+1
        do noi=1,ns_ibm_r_esh(i)+ns_ibm_i_esh(i)
           ksh_tmp=aamat_esh(noj,noi)
           if(abs(ksh_tmp) .gt. 1d-16) then
            ntemi=ntemi+1
           endif
         enddo
         enddo
         ntermiMAX=ntemi+1 
!         k_flagMAT=.false.
         allocate(aacsr(ntermiMAX),jacsr(ntermiMAX))
        iacsr=0
        aacsr=0.0
        jacsr=0



      ntemi=0
      do noj=1,ns_ibm_r_esh(i)+ns_ibm_i_esh(i)
      iacsr(noj)=ntemi+1
      do noi=1,ns_ibm_r_esh(i)+ns_ibm_i_esh(i)
         ksh_tmp=aamat_esh(noj,noi)
         if(abs(ksh_tmp) .gt. 1d-16) then
            ntemi=ntemi+1
            aacsr(ntemi)=ksh_tmp
            jacsr(ntemi)=noi
         endif
      enddo
      enddo
      noj=1+ns_ibm_r_esh(i)+ns_ibm_i_esh(i)
      iacsr(noj)=ntemi+1 

       j=ns_ibm_r_esh(i)+ns_ibm_i_esh(i)
       ddU_np1_esh=0.0
       call pmgmres_ilu_crMRHS(j
     &     ,ntermiMAX
     &     ,iacsr(1: j+1)
     &     ,jacsr(1: ntermiMAX)
     &     ,aacsr(1: ntermiMAX)
     &     ,ddU_np1_esh(1:j,1)
     &     ,ddU_np1_esh(1:j,2)
     &     ,ddU_np1_esh(1:j,3)
     &     ,fibm1_esh(i,1:j)
     &     ,fibm2_esh(i,1:j)
     &     ,fibm3_esh(i,1:j)
     &     ,SolverOutiter,SolverIniter
     &     ,Solverabstol,Solverreltol,SolverPre,monitorON)
      dxcont(1:3)=0.0
      outcont(1:3)=0.0
      do npg=1,ns_ibm_r_esh(i)+ns_ibm_i_esh(i)
        dxcont(1:3)=dxcont(1:3)+ddU_np1_esh(npg,1:3)**2
         X_np1_esh(npg,1:3) =X_np1_esh(npg,1:3)
     &     +ddU_np1_esh(npg,1:3)
        outcont(1:3)=outcont(1:3)
     &     +(X_np1_esh(npg,1:3)-X_n_esh(npg,1:3))**2
       enddo
       dxcont(1)=sqrt(dxcont(1)+dxcont(2)+dxcont(3))
       outcont(1)=sqrt(outcont(1)+outcont(2)+outcont(3))
       if(monitorON)
     & print*, 'Error= ',dxcont(1),outcont(1),dxcont(1)/outcont(1)

        do npg=1,ns_ibm_r_esh(ibdy)
           dX_np1_esh(npg,1:3)=
     &       timeMarchcoef(10)*(X_np1_esh(npg,1:3)-X_n_esh(npg,1:3))
     &      +timeMarchcoef(11)*dX_n_esh(npg,1:3)
     &      +timeMarchcoef(12)*ddX_n_esh(npg,1:3)
          ddX_np1_esh(npg,1:3)=
     &       timeMarchcoef(13)*(X_np1_esh(npg,1:3)-X_n_esh(npg,1:3))
     &      +timeMarchcoef(14)*dX_n_esh(npg,1:3)
     &      +timeMarchcoef(15)*ddX_n_esh(npg,1:3)
        enddo

       if(dxcont(1)/outcont(1) .lt. maxErrorstruct) exit
!==============================================   END ITERATION
      enddo       
      do npg=1,ns_ibm_r_esh(ibdy)+ns_ibm_i_esh(ibdy)
         gx_ibm_massive_esh(ibdy,npg)=X_np1_esh(npg,1)
         gy_ibm_massive_esh(ibdy,npg)=X_np1_esh(npg,2)
         gz_ibm_massive_esh(ibdy,npg)=X_np1_esh(npg,3)

         vibm1_esh(ibdy,npg)=dX_np1_esh(npg,1)
         vibm2_esh(ibdy,npg)=dX_np1_esh(npg,2)
         vibm3_esh(ibdy,npg)=dX_np1_esh(npg,3)

         aibm1_esh(ibdy,npg)=ddX_np1_esh(npg,1)
         aibm2_esh(ibdy,npg)=ddX_np1_esh(npg,2)
         aibm3_esh(ibdy,npg)=ddX_np1_esh(npg,3)
       
       enddo
2327       format(2(1x,i4),16(1x,f12.6)) 
      deallocate(
     &       aamat_esh,kks,kkb)  
      elseif(Genalpha_timesolver(ibdyg) .eq. 5) then
        allocate(
     &       aamat_esh(3*ns_ibm_esh,3*ns_ibm_esh)
     &      ,matdir1(3,maxordern)
     &      ,matdir2(3,maxordern)
     &      ,matdir3(3,maxordern)
     &      ,Dmat_Stiff1(maxordern,3)
     &      ,Dmat_Stiff2(maxordern,3)
     &      ,Dmat_Stiff3(maxordern,3)
     &      ,kb11(maxordern,maxordern)
     &      ,kb12(maxordern,maxordern)
     &      ,kb13(maxordern,maxordern)
     &      ,kb21(maxordern,maxordern)
     &      ,kb22(maxordern,maxordern)
     &      ,kb23(maxordern,maxordern)
     &      ,kb31(maxordern,maxordern)
     &      ,kb32(maxordern,maxordern)
     &      ,kb33(maxordern,maxordern)
     &      ,kks(3*ns_ibm_esh,3*ns_ibm_esh)
     &      ,kkb(3*ns_ibm_esh,3*ns_ibm_esh)
     &      ,kksf(ns_ibm_esh,ns_ibm_esh)
     &      ,kkbf(ns_ibm_esh,ns_ibm_esh)
     &          )

        timeMarchcoef(1)= 1.0-alphaf_Coef(ibdyg)
        timeMarchcoef(2)=(1.0-alpham_Coef(ibdyg))/(dt2*beta_Coef(ibdyg))
        timeMarchcoef(3)=(1.0-alphaf_Coef(ibdyg))*gamma_Coef(ibdyg)
     &                  /(dt*beta_Coef(ibdyg))

        timeMarchcoef(4)=(1.0-alpham_Coef(ibdyg))/(dt2*beta_Coef(ibdyg))
        timeMarchcoef(5)=(1.0-alpham_Coef(ibdyg))/(dt*beta_Coef(ibdyg))
        timeMarchcoef(6)=(1.0-alpham_Coef(ibdyg)-2.0*beta_Coef(ibdyg))
     &                  /(2.0*beta_Coef(ibdyg))

        timeMarchcoef(7)=(1.0-alphaf_Coef(ibdyg))*gamma_Coef(ibdyg)
     &                  /(dt*beta_Coef(ibdyg))
        timeMarchcoef(8)=(
     &                  (1.0-alphaf_Coef(ibdyg))*gamma_Coef(ibdyg)
     &                   -beta_Coef(ibdyg)
     &                   )
     &                  /beta_Coef(ibdyg)

        timeMarchcoef(9)=(
     &                   (1.0-alphaf_Coef(ibdyg))
     &                  *(gamma_Coef(ibdyg)-2.0*beta_Coef(ibdyg)) )
     &                  /(2.0*beta_Coef(ibdyg))*dt

        timeMarchcoef(10)=gamma_Coef(ibdyg)/(dt*beta_Coef(ibdyg))
        timeMarchcoef(11)=-(gamma_Coef(ibdyg)/beta_Coef(ibdyg)-1.0)
        timeMarchcoef(12)=
     &                  -(0.5*gamma_Coef(ibdyg)/beta_Coef(ibdyg)-1.0)*dt

        timeMarchcoef(13)=1.0/(dt2*beta_Coef(ibdyg))
        timeMarchcoef(14)=-1.0/(beta_Coef(ibdyg)*dt)
        timeMarchcoef(15)=-(0.5/beta_Coef(ibdyg)-1.0)

        time_alphaf=time2+(1.0-alphaf_Coef(ibdyg))*dt
!copy vectors
        do npg=1,ns_ibm_r_esh(ibdy)
         X_n_esh(npg,1)=gx_ibm_massive_esh(ibdy,npg)
         X_n_esh(npg,2)=gy_ibm_massive_esh(ibdy,npg)
         X_n_esh(npg,3)=gz_ibm_massive_esh(ibdy,npg)
         dX_n_esh(npg,1)=vibm1_esh(ibdy,npg)
         dX_n_esh(npg,2)=vibm2_esh(ibdy,npg)
         dX_n_esh(npg,3)=vibm3_esh(ibdy,npg)
         ddX_n_esh(npg,1)=aibm1_esh(ibdy,npg)
         ddX_n_esh(npg,2)=aibm2_esh(ibdy,npg)
         ddX_n_esh(npg,3)=aibm3_esh(ibdy,npg)
        enddo

        do npg=1,ns_ibm_r_esh(ibdy)
           X_np1_esh(npg,1:3) =  X_n_esh(npg,1:3)
           dX_np1_esh(npg,1:3)= dX_n_esh(npg,1:3)
          ddX_np1_esh(npg,1:3)=ddX_n_esh(npg,1:3)

          ddX_in_esh(npg,1:3)=timeMarchcoef(4)* X_n_esh(npg,1:3)
     &                      +timeMarchcoef(5)* dX_n_esh(npg,1:3)
     &                      +timeMarchcoef(6)*ddX_n_esh(npg,1:3)

          dX_in_esh(npg,1:3)=timeMarchcoef(7)*X_n_esh(npg,1:3)
     &                      +timeMarchcoef(8)*dX_n_esh(npg,1:3)
     &                      +timeMarchcoef(9)*ddX_n_esh(npg,1:3)
        enddo       

!===================  ITERATIONS
      Do iter=1,Genalpha_niter(ibdyg)
         if(monitorON)   write(*,*) '   === INER ===  ',iter
         if(iter .eq. 1) then 
            coef_iter=1.0
         else
            coef_iter=0.0      
         endif  

      do npg=1,ns_ibm_r_esh(ibdy)
          ddX_na_esh(npg,1:3)= (1.0-alpham_Coef(ibdyg))
     &                      *ddX_np1_esh(npg,1:3)
     &                      +alpham_Coef(ibdyg)* ddX_n_esh(npg,1:3)
          dX_na_esh(npg,1:3)= (1.0-alphaf_Coef(ibdyg))
     &                      *dX_np1_esh(npg,1:3)
     &                      +alphaf_Coef(ibdyg)* dX_n_esh(npg,1:3)
          X_na_esh(npg,1:3)= (1.0-alphaf_Coef(ibdyg))
     &                      *X_np1_esh(npg,1:3)
     &                      +alphaf_Coef(ibdyg)* X_n_esh(npg,1:3)
      enddo   
!! calculate residule
      i=ibdy
      i2l=i
      fibm1_esh(i,1:Ns_IBM_esh)=0.0
      fibm2_esh(i,1:Ns_IBM_esh)=0.0
      fibm3_esh(i,1:Ns_IBM_esh)=0.0
      ffluidsum1_esh(i,1:Ns_IBM_esh)=0.0
      ffluidsum2_esh(i,1:Ns_IBM_esh)=0.0
      ffluidsum3_esh(i,1:Ns_IBM_esh)=0.0


      f_impuls1_esh(i,1:Ns_IBM_esh)=0.d0
      f_impuls2_esh(i,1:Ns_IBM_esh)=0.d0
      f_impuls3_esh(i,1:Ns_IBM_esh)=0.d0
      areapnt_esh(i,1:Ns_IBM_esh)=0.0
!      xpnt_esh(i,1:Ns_IBM_esh)=0.0
      force_points_esh(i,1:Ns_IBM_esh,1:3)=0.d0
      f_link1_esh(i,1:Ns_IBM_esh)=0.0
      f_link2_esh(i,1:Ns_IBM_esh)=0.0
      f_link3_esh(i,1:Ns_IBM_esh)=0.0

c
c calculating feedback force for matching bcs
       i2g=Ilocglb_esh(ibdy)
       ImplicitFSI_coef=0.0
       if(FluidForceFlag(i2g)) then
        ImplicitFSI_coef=(alpha_ibm*delta_t+beta_ibm)*timetemp2
        do j=1,ns_ibm_r_esh(i)
           fk_mass1_esh(i,j)=fk_mass1o_esh(i,j)
     &          +alpha_ibm*delta_t*(uibm1_esh(i,j)-dX_na_esh(j,1))
     &                   *timetemp2

            fk_mass2_esh(i,j)=fk_mass2o_esh(i,j)
     &          +alpha_ibm*delta_t*(uibm2_esh(i,j)-dX_na_esh(j,2))
     &                   *timetemp2

            ffluidsum1_esh(i,j)= fk_mass1_esh(i,j)
     &                   +beta_ibm*(uibm1_esh(i,j)-dX_na_esh(j,1))
     &                   *timetemp2
            ffluidsum2_esh(i,j)= fk_mass2_esh(i,j)
     &                   +beta_ibm*(uibm2_esh(i,j)-dX_na_esh(j,2))
     &                   *timetemp2
            if(ndim .gt. 2) then
            fk_mass3_esh(i,j)=fk_mass3o_esh(i,j)
     &          +alpha_ibm*delta_t*(uibm3_esh(i,j)-dX_na_esh(j,3))
     &                   *timetemp2

            ffluidsum3_esh(i,j)= fk_mass3_esh(i,j)
     &                   +beta_ibm*(uibm3_esh(i,j)-dX_na_esh(j,3))
     &                   *timetemp2
            endif
         end do
         do j=1,ns_ibm_r_esh(i)
              fibm1_esh(i,j)=fibm1_esh(i,j)+ffluidsum1_esh(i,j)
              fibm2_esh(i,j)=fibm2_esh(i,j)+ffluidsum2_esh(i,j)
              if(ndim .gt. 2) 
     &           fibm3_esh(i,j)=fibm3_esh(i,j)+ffluidsum3_esh(i,j)
          end do
        endif  

        call boundary_ibm_generalalpha(
     &       i2g
     &      ,Xtar_na_esh
     &      ,dXtar_na_esh
     &      ,X0_np1_esh)

      do npg=1,target_num(i2g)
         Xtar_na_esh(npg,1:3)= alphaf_Coef(ibdyg)
     &                        *target_points_esh(i,npg,1:3)
     &                      +timeMarchcoef(6)*Xtar_na_esh(npg,1:3)
        dXtar_na_esh(npg,1:3)= alphaf_Coef(ibdyg)
     &                        *target_points_v_esh(i,npg,1:3)
     &                      +timeMarchcoef(6)*dXtar_na_esh(npg,1:3)
      enddo   

      do np=1,ns_ibm_i_esh(ibdy)  
         npg=ns_ibm_r_esh(ibdy)+np
         bodypoint(1)=boundrylist_esh(ibdy,np,1)
         bodypoint(2)=boundrylist_esh(ibdy,np,2)
         bodypoint(3)=boundrylist_esh(ibdy,np,3)
         X0_np1_esh(npg,1:3)=X0_np1_esh(bodypoint(1),1:3)
     &                      +X0_np1_esh(bodypoint(2),1:3)
     &                      -X0_np1_esh(bodypoint(3),1:3)

         X_na_esh(npg,1:3)=X_na_esh(bodypoint(1),1:3)
     &                    +X_na_esh(bodypoint(2),1:3)
     &                    -X_na_esh(bodypoint(3),1:3)

         dX_na_esh(npg,1:3)=dX_na_esh(bodypoint(1),1:3)
     &                     +dX_na_esh(bodypoint(2),1:3)
     &                     -dX_na_esh(bodypoint(3),1:3)

         ddX_na_esh(npg,1:3)=ddX_na_esh(bodypoint(1),1:3)
     &                      +ddX_na_esh(bodypoint(2),1:3)
     &                      -ddX_na_esh(bodypoint(3),1:3)

         dX_in_esh(npg,1:3)=dX_in_esh(bodypoint(1),1:3)
     &                     +dX_in_esh(bodypoint(2),1:3)
     &                     -dX_in_esh(bodypoint(3),1:3)

         ddX_in_esh(npg,1:3)=ddX_in_esh(bodypoint(1),1:3)
     &                      +ddX_in_esh(bodypoint(2),1:3)
     &                      -ddX_in_esh(bodypoint(3),1:3)

         X_np1_esh(npg,1:3)=X_np1_esh(bodypoint(1),1:3)
     &                      +X_np1_esh(bodypoint(2),1:3)
     &                      -X_np1_esh(bodypoint(3),1:3)

         dX_np1_esh(npg,1:3)=dX_np1_esh(bodypoint(1),1:3)
     &                       +dX_np1_esh(bodypoint(2),1:3)
     &                       -dX_np1_esh(bodypoint(3),1:3)

         ddX_np1_esh(npg,1:3)=ddX_np1_esh(bodypoint(1),1:3)
     &                       +ddX_np1_esh(bodypoint(2),1:3)
     &                       -ddX_np1_esh(bodypoint(3),1:3)

      end do       
      aamat_esh=0.0
      mms=0.0
      kksf=0.0
      kkbf=0.0
      kks=0.0
      kkb=0.0

      fibm1pres_esh=0.0
      fibm2pres_esh=0.0
      fibm3pres_esh=0.0

      fibm1cont_esh=0.0
      fibm2cont_esh=0.0
      fibm3cont_esh=0.0

      ntypeMAx_loc=-1000

      do ne=1,numelr(ibdyg)
         jtype=neatype_esh(ibdy,ne)
         itype=jtypeall(jtype)
         if(itype .eq. 0) then
           ntype=12  
         else
           ntype=6+itype
         end if
         ntypeMAx_loc=max(ntypeMAx_loc,ntype)

         do nos=1,ntype
            ntem=nea_esh(ibdy,ne,nos)
            x(nos,1:3)=X_na_esh(ntem,1:3)

            if(Fibrous_Esh(ibdy) .eq. 1) then
            noj=1
            x_FibVec(nos,noj)=Materialpara_esh(ibdy,ntem,noj)
            noj=2
            x_FibVec(nos,noj)=Materialpara_esh(ibdy,ntem,noj)
            noj=3
            x_FibVec(nos,noj)=Materialpara_esh(ibdy,ntem,noj)
            if(nos .eq. 1) then
               n_FibVec(1:3) =crFibCrv_esh(ibdy,ne,1:3)
               n3_FibVec(1:3)=crFibCrv_esh(ibdy,ne,4:6)
            endif
            endif
            do noj=1,2
               sx(noj,nos)=coorcurv_esh(ibdy,ne,nos,noj)
            enddo
         enddo

         if(itype .eq. 0) then
             xj1=x(4,1);xj2=x(7,1);xj3=x(8,1)
             yj1=x(4,2);yj2=x(7,2);yj3=x(8,2)
             zj1=x(4,3);zj2=x(7,3);zj3=x(8,3)
         else
             xj1=x(1,1);xj2=x(2,1);xj3=x(itype+1,1)
             yj1=x(1,2);yj2=x(2,2);yj3=x(itype+1,2)
             zj1=x(1,3);zj2=x(2,3);zj3=x(itype+1,3)
         endif
 
             tmpv1(1)=xj2-xj1
             tmpv1(2)=yj2-yj1
             tmpv1(3)=zj2-zj1
             tmpv2(1)=xj3-xj1
             tmpv2(2)=yj3-yj1
             tmpv2(3)=zj3-zj1
            call crossvec(tmpv3,tmpv1,tmpv2)

            tmpv1x(1)=xpcenter_esh(ibdy,ne,1)
            tmpv1x(2)=xpcenter_esh(ibdy,ne,2)
            tmpv1x(3)=xpcenter_esh(ibdy,ne,3)

        if(itype .eq. 0) then
             if (ExternalPressureFlag(ibdyg)) then
             
             fibm1cont_esh(nea_esh(ibdy,ne,4))=
     &                            fibm1cont_esh(nea_esh(ibdy,ne,4))+
     &                                 tmpv3(1)*tmpv1x(1)
             fibm1cont_esh(nea_esh(ibdy,ne,7))=
     &                            fibm1cont_esh(nea_esh(ibdy,ne,7))+
     &                                 tmpv3(1)*tmpv1x(2)
             fibm1cont_esh(nea_esh(ibdy,ne,8))=
     &                            fibm1cont_esh(nea_esh(ibdy,ne,8))+
     &                                 tmpv3(1)*tmpv1x(3)

             fibm1pres_esh(nea_esh(ibdy,ne,4))=
     &                            fibm1pres_esh(nea_esh(ibdy,ne,4))+
     &                                 tmpv3(1)*area(ibdy,ne)/3.0
             fibm1pres_esh(nea_esh(ibdy,ne,7))=
     &                            fibm1pres_esh(nea_esh(ibdy,ne,7))+
     &                                 tmpv3(1)*area(ibdy,ne)/3.0
             fibm1pres_esh(nea_esh(ibdy,ne,8))=
     &                            fibm1pres_esh(nea_esh(ibdy,ne,8))+
     &                                 tmpv3(1)*area(ibdy,ne)/3.0

             fibm2cont_esh(nea_esh(ibdy,ne,4))=
     &                            fibm2cont_esh(nea_esh(ibdy,ne,4))+
     &                                 tmpv3(2)*tmpv1x(1)
             fibm2cont_esh(nea_esh(ibdy,ne,7))=
     &                            fibm2cont_esh(nea_esh(ibdy,ne,7))+
     &                                 tmpv3(2)*tmpv1x(2)
             fibm2cont_esh(nea_esh(ibdy,ne,8))=
     &                            fibm2cont_esh(nea_esh(ibdy,ne,8))+
     &                                 tmpv3(2)*tmpv1x(3)
             fibm2pres_esh(nea_esh(ibdy,ne,4))=
     &                            fibm2pres_esh(nea_esh(ibdy,ne,4))+
     &                                 tmpv3(2) *area(ibdy,ne)/3.0
             fibm2pres_esh(nea_esh(ibdy,ne,7))=
     &                            fibm2pres_esh(nea_esh(ibdy,ne,7))+
     &                                 tmpv3(2)  *area(ibdy,ne)/3.0
             fibm2pres_esh(nea_esh(ibdy,ne,8))=
     &                            fibm2pres_esh(nea_esh(ibdy,ne,8))+
     &                                 tmpv3(2)  *area(ibdy,ne)/3.0

             fibm3cont_esh(nea_esh(ibdy,ne,4))=
     &                            fibm3cont_esh(nea_esh(ibdy,ne,4))+
     &                                 tmpv3(3)*tmpv1x(1)
             fibm3cont_esh(nea_esh(ibdy,ne,7))=
     &                            fibm3cont_esh(nea_esh(ibdy,ne,7))+
     &                                 tmpv3(3)*tmpv1x(2)
             fibm3cont_esh(nea_esh(ibdy,ne,8))=
     &                            fibm3cont_esh(nea_esh(ibdy,ne,8))+
     &                                 tmpv3(3)*tmpv1x(3)

             fibm3pres_esh(nea_esh(ibdy,ne,4))=
     &                            fibm3pres_esh(nea_esh(ibdy,ne,4))+
     &                                 tmpv3(3)  *area(ibdy,ne)/3.0
             fibm3pres_esh(nea_esh(ibdy,ne,7))=
     &                            fibm3pres_esh(nea_esh(ibdy,ne,7))+
     &                                 tmpv3(3)  *area(ibdy,ne)/3.0
             fibm3pres_esh(nea_esh(ibdy,ne,8))=
     &                            fibm3pres_esh(nea_esh(ibdy,ne,8))+
     &                                 tmpv3(3)  *area(ibdy,ne)/3.0
             endif
             if(nea_esh(ibdy,ne,4) .le. ns_ibm_r_esh(ibdy))
     &       areapnt_esh(ibdy,nea_esh(ibdy,ne,4))=
     &                  areapnt_esh(ibdy,nea_esh(ibdy,ne,4))
     &                                   +area(ibdy,ne)/3.0
             if(nea_esh(ibdy,ne,7) .le. ns_ibm_r_esh(ibdy))
     &        areapnt_esh(ibdy,nea_esh(ibdy,ne,7))=
     &                  areapnt_esh(ibdy,nea_esh(ibdy,ne,7))
     &                                   +area(ibdy,ne)/3.0
             if(nea_esh(ibdy,ne,8) .le. ns_ibm_r_esh(ibdy))
     &       areapnt_esh(ibdy,nea_esh(ibdy,ne,8))=
     &                  areapnt_esh(ibdy,nea_esh(ibdy,ne,8))
     &                                   +area(ibdy,ne)/3.0

!             xpnt_esh(ibdy,nea_esh(ibdy,ne,4))=
!     &                  xpnt_esh(ibdy,nea_esh(ibdy,ne,4))
!     &                                 +tmpv1x(1)
!             xpnt_esh(ibdy,nea_esh(ibdy,ne,7))=
!     &                  xpnt_esh(ibdy,nea_esh(ibdy,ne,7))
!     &                                 +tmpv1x(2)
!             xpnt_esh(ibdy,nea_esh(ibdy,ne,8))=
!     &                  xpnt_esh(ibdy,nea_esh(ibdy,ne,8))
!     &                                 +tmpv1x(3)

        else
             noj=itype+1
             if (ExternalPressureFlag(ibdyg)) then
             fibm1cont_esh(nea_esh(ibdy,ne,1))=
     &                            fibm1cont_esh(nea_esh(ibdy,ne,1))+
     &                                 tmpv3(1)*tmpv1x(1)
             fibm1cont_esh(nea_esh(ibdy,ne,2))=
     &                            fibm1cont_esh(nea_esh(ibdy,ne,2))+
     &                                 tmpv3(1)*tmpv1x(2)
             fibm1cont_esh(nea_esh(ibdy,ne,noj))=
     &                            fibm1cont_esh(nea_esh(ibdy,ne,noj))+
     &                                 tmpv3(1)*tmpv1x(3)

             fibm1pres_esh(nea_esh(ibdy,ne,1))=
     &                            fibm1pres_esh(nea_esh(ibdy,ne,1))+
     &                                 tmpv3(1)  *area(ibdy,ne)/3.0
             fibm1pres_esh(nea_esh(ibdy,ne,2))=
     &                            fibm1pres_esh(nea_esh(ibdy,ne,2))+
     &                                 tmpv3(1)  *area(ibdy,ne)/3.0
             fibm1pres_esh(nea_esh(ibdy,ne,noj))=
     &                            fibm1pres_esh(nea_esh(ibdy,ne,noj))+
     &                                 tmpv3(1)  *area(ibdy,ne)/3.0

             fibm2cont_esh(nea_esh(ibdy,ne,1))=
     &                            fibm2cont_esh(nea_esh(ibdy,ne,1))+
     &                                 tmpv3(2)*tmpv1x(1)
             fibm2cont_esh(nea_esh(ibdy,ne,2))=
     &                            fibm2cont_esh(nea_esh(ibdy,ne,2))+
     &                                 tmpv3(2)*tmpv1x(2)
             fibm2cont_esh(nea_esh(ibdy,ne,noj))=
     &                            fibm2cont_esh(nea_esh(ibdy,ne,noj))+
     &                                 tmpv3(2)*tmpv1x(3)

             fibm2pres_esh(nea_esh(ibdy,ne,1))=
     &                            fibm2pres_esh(nea_esh(ibdy,ne,1))+
     &                                 tmpv3(2)  *area(ibdy,ne)/3.0
             fibm2pres_esh(nea_esh(ibdy,ne,2))=
     &                            fibm2pres_esh(nea_esh(ibdy,ne,2))+
     &                                 tmpv3(2)  *area(ibdy,ne)/3.0
             fibm2pres_esh(nea_esh(ibdy,ne,noj))=
     &                            fibm2pres_esh(nea_esh(ibdy,ne,noj))+
     &                                 tmpv3(2)  *area(ibdy,ne)/3.0

             fibm3cont_esh(nea_esh(ibdy,ne,1))=
     &                            fibm3cont_esh(nea_esh(ibdy,ne,1))+
     &                                 tmpv3(3)*tmpv1x(1)

             fibm3cont_esh(nea_esh(ibdy,ne,2))=
     &                            fibm3cont_esh(nea_esh(ibdy,ne,2))+
     &                                 tmpv3(3)*tmpv1x(2)

             fibm3cont_esh(nea_esh(ibdy,ne,noj))=
     &                           fibm3cont_esh(nea_esh(ibdy,ne,noj))+
     &                                 tmpv3(3)*tmpv1x(3)

             fibm3pres_esh(nea_esh(ibdy,ne,1))=
     &                            fibm3pres_esh(nea_esh(ibdy,ne,1))+
     &                                 tmpv3(3)  *area(ibdy,ne)/3.0
             fibm3pres_esh(nea_esh(ibdy,ne,2))=
     &                            fibm3pres_esh(nea_esh(ibdy,ne,2))+
     &                                 tmpv3(3) *area(ibdy,ne)/3.0
             fibm3pres_esh(nea_esh(ibdy,ne,noj))=
     &                           fibm3pres_esh(nea_esh(ibdy,ne,noj))+
     &                                 tmpv3(3)  *area(ibdy,ne)/3.0
           endif

             if(nea_esh(ibdy,ne,1) .le. ns_ibm_r_esh(ibdy))
     &       areapnt_esh(ibdy,nea_esh(ibdy,ne,1))=
     &                  areapnt_esh(ibdy,nea_esh(ibdy,ne,1))
     &                                   +area(ibdy,ne)/3.0
             if(nea_esh(ibdy,ne,2) .le. ns_ibm_r_esh(ibdy))
     &       areapnt_esh(ibdy,nea_esh(ibdy,ne,2))=
     &                  areapnt_esh(ibdy,nea_esh(ibdy,ne,2))
     &                                   +area(ibdy,ne)/3.0
             if(nea_esh(ibdy,ne,3) .le. ns_ibm_r_esh(ibdy))
     &       areapnt_esh(ibdy,nea_esh(ibdy,ne,noj))=
     &                  areapnt_esh(ibdy,nea_esh(ibdy,ne,noj))
     &                                   +area(ibdy,ne)/3.0


!             xpnt_esh(ibdy,nea_esh(ibdy,ne,1))=
!     &                  xpnt_esh(ibdy,nea_esh(ibdy,ne,1))
!     &                                 +tmpv1x(1)
!             xpnt_esh(ibdy,nea_esh(ibdy,ne,2))=
!     &                  xpnt_esh(ibdy,nea_esh(ibdy,ne,2))
!     &                                 +tmpv1x(2)
!             xpnt_esh(ibdy,nea_esh(ibdy,ne,noj))=
!     &                  xpnt_esh(ibdy,nea_esh(ibdy,ne,noj))
!     &                                 +tmpv1x(3)

         endif

         mass=0.0
         ks=0.0
         kb=0.0

         do i=1,ngau
            wei_i=wei(i)
            s(1,1:ntype)=nn(jtype,i,1:ntype)
            dsdv(1,1:ntype)=dnndv(jtype,i,1:ntype)
            dsdv(2,1:ntype)=dnndw(jtype,i,1:ntype)
            ddsdvdv(1,1:ntype)=ddnndvdv(jtype,i,1:ntype)
            ddsdvdv(2,1:ntype)=ddnndvdw(jtype,i,1:ntype)
            ddsdvdv(3,1:ntype)=ddnndwdw(jtype,i,1:ntype)

             do noi=1,2
               do noj=1,2
                  jmat(noj,noi)=
     &              dot_product(dsdv(noj,1:ntype),sx(noi,1:ntype))
               end do
               do noj=1,3
                  gmat(noj,noi)=
     &              dot_product(ddsdvdv(noj,1:ntype),sx(noi,1:ntype))
               end do
             end do 
             hmat(1,1)= jmat(1,1)**2
             hmat(2,1)= jmat(1,1)*jmat(2,1)
             hmat(3,1)= jmat(2,1)**2  
             hmat(1,2)= 2.0*jmat(1,1)*jmat(1,2)
             hmat(2,2)= jmat(1,1)*jmat(2,2)+jmat(1,2)*jmat(2,1)
             hmat(3,2)= 2.0*jmat(2,1)*jmat(2,2) 
             hmat(1,3)= jmat(1,2)**2
             hmat(2,3)= jmat(1,2)*jmat(2,2)
             hmat(3,3)= jmat(2,2)**2  

             wei_i=wei_i
     &             *abs(jmat(1,1)*jmat(2,2)-jmat(1,2)*jmat(2,1))

             call invert(jmat,2)
             call invert(hmat,3)
  
             amat1(1:2,1:ntype)=matmul(jmat,dsdv(1:2,1:ntype))
             amat2(1:3,1:ntype)=matmul(gmat,amat1(1:2,1:ntype))   ! shape for memebrane effect
             amat2(1:3,1:ntype)=ddsdvdv(1:3,1:ntype)-amat2(1:3,1:ntype)
             amat2(1:3,1:ntype)=matmul(hmat,amat2(1:3,1:ntype)) !shape for bending part

             do noj=1,3
                xpos(noj)=dot_product(s(1,1:ntype),x(1:ntype,noj))
                do noi=1,2
                   dxpos(noi,noj)=
     &               dot_product(amat1(noi,1:ntype),x(1:ntype,noj))
                end do
                do noi=1,3
                   d2xpos(noi,noj)=
     &             dot_product(amat2(noi,1:ntype),x(1:ntype,noj))
                end do
             end do

             noi=1
             noj=1
             dmat(noi,noj)=1/2.0*
     &        dot_product(dxpos(noi,1:3),dxpos(noj,1:3))
     &        -dmat0_esh(ibdy,ne,i,noi,noj)
             kmatbar(noi,noj)=sqrt(
     &        dot_product(d2xpos(noi,1:3),d2xpos(noj,1:3)))
             noi=1
             noj=2
             dmat(noi,noj)=1/2.0*
     &        dot_product(dxpos(noi,1:3),dxpos(noj,1:3))
     &        -dmat0_esh(ibdy,ne,i,noi,noj)
             kmatbar(noi,noj)=sqrt(
     &        dot_product(d2xpos(noj,1:3),d2xpos(noj,1:3)))
             kmatbar(noj,noi)=kmatbar(noi,noj)
             dmat(noj,noi)=dmat(noi,noj)

             noi=2
             noj=2
             dmat(noi,noj)=1/2.0*
     &        dot_product(dxpos(noi,1:3),dxpos(noj,1:3))
     &        -dmat0_esh(ibdy,ne,i,noi,noj)
             kmatbar(noi,noj)=sqrt(dot_product(d2xpos(noj+1,1:3)
     &        ,d2xpos(noj+1,1:3)))

             kmat=kmatbar-kmat0_esh(ibdy,ne,i,1:2,1:2)


             iner1=2.0*(dmat(1,1)+dmat(2,2))
             iner2=2.0*(dmat(1,1)+dmat(2,2))
     &        +4.0*(dmat(1,1)*dmat(2,2)-dmat(1,2)*dmat(2,1))

             jner1= kmat(1,1)+kmat(2,2)
             jner2= kmat(1,1)*kmat(2,2)-kmat(1,2)*kmat(2,1)

! neo-hookean membrane Ws=\phi/2 (I_1 -1 + 1/(I_2+1))
! phi_mem_coef(1)=\phi
            if(MaterialTypeIBM(ibdyg) .eq. 1) then
            smat(1,1)=phi_mem_coef(ibdyg,1)
     &        *(1.0-(1.0+2.0*dmat(2,2))/(iner2+1.0)**2)
            smat(1,2)=phi_mem_coef(ibdyg,1)
     &        *(2.0*dmat(2,1)/(iner2+1.0)**2)
            smat(2,1)=smat(1,2)
            smat(2,2)=phi_mem_coef(ibdyg,1)
     &        *(1.0-(1.0+2.0*dmat(1,1))/(iner2+1.0)**2)
            elseif(MaterialTypeIBM(ibdyg) .eq. 2) then 
! skalak (SK) membrane Ws=\phi/2 (1/2 I_1^2 + I_1 - I_2 + C/2 I_2^2)
! phi_mem_coef(1)=\phi
! phi_mem_coef(2)=C
            smat(1,1)=phi_mem_coef(ibdyg,1)
     &             * (  iner1+1.0+(1.0+2.0*dmat(2,2))
     &                *(phi_mem_coef(ibdyg,2)*iner2-1)   )
            smat(2,2)=phi_mem_coef(ibdyg,1)
     &              *(  iner1+1.0+(1.0+2.0*dmat(1,1))
     &                *(phi_mem_coef(ibdyg,2)*iner2-1)   )
            smat(1,2)=-2.0d0*phi_mem_coef(ibdyg,1)*dmat(1,2)
     &                *(phi_mem_coef(ibdyg,2)*iner2-1)
            smat(2,1)=smat(1,2)
            elseif(MaterialTypeIBM(ibdyg) .eq. 3) then 
! Fung tissue model for heart valve

           if(Fibrous_Esh(ibdy ) .eq. 1) then
             do noj=1,3
                xposFib(noj)=
     &           dot_product(s(1,1:ntype),x_FibVec(1:ntype,noj))
             end do

             call crossvec(tmpv3,n_FibVec,xposFib)
             temp_ibm2=dot_product(n3_FibVec,tmpv3)
             if(temp_ibm2 .ge. 0.0)then
                temp_ibm2=1.0
             else
                temp_ibm2=-1.0
             endif
             tmpv3(1)=dot_product(xposFib,xposFib)
             tmpv3(2)=dot_product(n_FibVec,n_FibVec)
             tmpv3(3)=dot_product(n_FibVec,xposFib)
             temp_ibm1=temp_ibm2*acos(tmpv3(3)/sqrt(tmpv3(1)*tmpv3(2)))

             tmpv3(1)=(cos(temp_ibm1))**2
             tmpv3(2)=(sin(temp_ibm1))**2
             tmpv3(3)=sin(temp_ibm1)*cos(temp_ibm1)

             R_Fibmat(1,1:3)=(/tmpv3(1),tmpv3(2),2.0*tmpv3(3)/)
             R_Fibmat(2,1:3)=(/tmpv3(2),tmpv3(1),-2.0*tmpv3(3)/)
             R_Fibmat(3,1:3)=(/-tmpv3(3),tmpv3(3),tmpv3(1)-tmpv3(2)/)

             tmpv3(1)=dmat(1,1)
             tmpv3(2)=dmat(2,2)
             tmpv3(3)=dmat(1,2)   !!LOCAL

             tmpv2=matmul(R_Fibmat,tmpv3)
             dmat(1,1)=tmpv2(1)
             dmat(2,2)=tmpv2(2)
             dmat(1,2)=tmpv2(3)
             dmat(2,1)=dmat(1,2)

           endif
            

            temp_ibm1=phi_mem_coef(ibdyg,2)*dmat(1,1)**2
     &           +phi_mem_coef(ibdyg,3)*dmat(2,2)**2
     &           +2.0*phi_mem_coef(ibdyg,4)*dmat(2,2)*dmat(1,1)
     &           +phi_mem_coef(ibdyg,5)*((dmat(1,2)+dmat(2,1))/2)**2
     &           +phi_mem_coef(ibdyg,6)*dmat(1,1)*(dmat(1,2)+dmat(2,1))
     &           +phi_mem_coef(ibdyg,7)*dmat(2,2)*(dmat(1,2)+dmat(2,1))


            temp_ibm2=phi_mem_coef(ibdyg,1)/2.0d0*exp(temp_ibm1)
             
            smat(1,1)=(
     &                2.0*phi_mem_coef(ibdyg,2)*dmat(1,1)
     &               +2.0*phi_mem_coef(ibdyg,4)*dmat(2,2)
     &               +phi_mem_coef(ibdyg,6)*(dmat(1,2)+dmat(2,1)))
     &               *temp_ibm2

            smat(2,2)=(
     &                2.0*phi_mem_coef(ibdyg,3)*dmat(2,2)
     &               +2.0*phi_mem_coef(ibdyg,4)*dmat(1,1)
     &               +phi_mem_coef(ibdyg,7)*(dmat(1,2)+dmat(2,1)))
     &               *temp_ibm2


            smat(1,2)=(
     &                phi_mem_coef(ibdyg,5)/2.0d0*(dmat(2,1)+dmat(1,2))
     &               +phi_mem_coef(ibdyg,6)*dmat(1,1)
     &               +phi_mem_coef(ibdyg,7)*dmat(2,2))
     &               *temp_ibm2
            smat(2,1)=smat(1,2)


            if(flag_fractal_esh(ibdy)) then
              smatsave_esh(1,i,ne)=smat(1,1)
              smatsave_esh(2,i,ne)=smat(2,2)
              smatsave_esh(3,i,ne)=smat(1,2)
              jq=nifractal_esh(ibdy)
              jq2=3*jq
              smat(1,1)=fractalpara_esh(ibdy,3)
     &               *dot_product(Hfractal2_esh(1:jq,1,ibdy)
     &                          ,Xfractal_esh(1:jq,i,ne,ibdy))
     &              +fractalpara_esh(ibdy,3)
     &               *dot_product(Ifractal2_esh(1:jq,1,ibdy)
     &                          ,Xfractal_esh(jq2+1:jq2+jq,i,ne,ibdy))
     &              +( fractalpara_esh(ibdy,3)*Jfractal2_esh(1,ibdy)
     &                +fractalpara_esh(ibdy,2))*smat(1,1)

              smat(2,2)=fractalpara_esh(ibdy,6)
     &               *dot_product(Hfractal2_esh(1:jq,2,ibdy)
     &                          ,Xfractal_esh(jq+1:2*jq,i,ne,ibdy))
     &              +fractalpara_esh(ibdy,6)
     &               *dot_product(Ifractal2_esh(1:jq,2,ibdy)
     &                   ,Xfractal_esh(jq2+jq+1:jq2+2*jq,i,ne,ibdy))
     &              +( fractalpara_esh(ibdy,6)*Jfractal2_esh(2,ibdy)
     &                +fractalpara_esh(ibdy,5))*smat(2,2)

              smat(1,2)=fractalpara_esh(ibdy,9)
     &               *dot_product(Hfractal2_esh(1:jq,3,ibdy)
     &                          ,Xfractal_esh(2*jq+1:3*jq,i,ne,ibdy))
     &              +fractalpara_esh(ibdy,9)
     &               *dot_product(Ifractal2_esh(1:jq,3,ibdy)
     &                   ,Xfractal_esh(jq2+2*jq+1:jq2+3*jq,i,ne,ibdy))
     &              +( fractalpara_esh(ibdy,9)*Jfractal2_esh(3,ibdy)
     &                +fractalpara_esh(ibdy,8))*smat(1,2)
             smat(2,1)=smat(1,2)
            endif


             tmpv3(1)=2.0*phi_mem_coef(ibdyg,2)*dmat(1,1)
     &               +2.0*phi_mem_coef(ibdyg,4)*dmat(2,2)
     &               +2.0*phi_mem_coef(ibdyg,6)*dmat(1,2)

             tmpv3(2)=2.0*phi_mem_coef(ibdyg,3)*dmat(2,2)
     &               +2.0*phi_mem_coef(ibdyg,4)*dmat(1,1)
     &               +2.0*phi_mem_coef(ibdyg,7)*dmat(1,2)

             tmpv3(3)=2.0*phi_mem_coef(ibdyg,5)*dmat(1,2)
     &               +2.0*phi_mem_coef(ibdyg,6)*dmat(1,1)
     &               +2.0*phi_mem_coef(ibdyg,7)*dmat(2,2)


            d_smat(1,1)=temp_ibm2*
     &                  (2.0*phi_mem_coef(ibdyg,2)+tmpv3(1)**2)
            d_smat(1,2)=temp_ibm2*
     &                  (2.0*phi_mem_coef(ibdyg,4)+tmpv3(1)*tmpv3(2))
            d_smat(1,3)=temp_ibm2*
     &                  (2.0*phi_mem_coef(ibdyg,6)+tmpv3(1)*tmpv3(3))
            if(flag_fractal_esh(ibdy))
     &         d_smat(1,1:3)=
     &         ( fractalpara_esh(ibdy,3)*Jfractal2_esh(1,ibdy)
     &          +fractalpara_esh(ibdy,2)
     &          )*d_smat(1,1:3)

            d_smat(2,1)=d_smat(1,2)
            d_smat(2,2)=temp_ibm2*
     &                  (2.0*phi_mem_coef(ibdyg,3)+tmpv3(2)**2)
            d_smat(2,3)=temp_ibm2*
     &                  (2.0*phi_mem_coef(ibdyg,7)+tmpv3(2)*tmpv3(3))
            if(flag_fractal_esh(ibdy))
     &         d_smat(2,1:3)=
     &         ( fractalpara_esh(ibdy,6)*Jfractal2_esh(2,ibdy)
     &          +fractalpara_esh(ibdy,5)
     &          )*d_smat(2,1:3)

            d_smat(3,1)=d_smat(1,3)
            d_smat(3,2)=d_smat(2,3)
            d_smat(3,3)=temp_ibm2*
     &                  (2.0*phi_mem_coef(ibdyg,5)+tmpv3(3)**2)
            if(flag_fractal_esh(ibdy))
     &         d_smat(3,1:3)=
     &         ( fractalpara_esh(ibdy,9)*Jfractal2_esh(3,ibdy)
     &          +fractalpara_esh(ibdy,8)
     &          )*d_smat(3,1:3)

            d_smat=matmul(d_smat(1:3,1:3),R_Fibmat)

             if(Fibrous_Esh(ibdy) .eq. 1) then
               R_Fibmat(1:2,3)=-R_Fibmat(1:2,3)
               R_Fibmat(3,1:2)=-R_Fibmat(3,1:2)

               tmpv3(1)=smat(1,1)
               tmpv3(2)=smat(2,2)
               tmpv3(3)=smat(1,2)   

               tmpv2=matmul(R_Fibmat,tmpv3)
               smat(1,1)=tmpv2(1)
               smat(2,2)=tmpv2(2)
               smat(1,2)=tmpv2(3)
               smat(2,1)=smat(1,2)
               d_smat=matmul(R_Fibmat,d_smat(1:3,1:3))
             endif
            endif

!reorganize the matrix (for stretching stiffness we use (E11,E22,E12) convention
! therefore we do not need to reorganize dSpq/dEmn matrix
!            R_Fibmat=d_smat
!            d_smat(2,2)=R_Fibmat(3,3)
!            d_smat(3,3)=R_Fibmat(2,2)
!            d_smat(1,2)=R_Fibmat(1,3)
!            d_smat(1,3)=R_Fibmat(1,2)
!            d_smat(3,1)=d_smat(1,3)
!            d_smat(3,2)=d_smat(2,3)


            do noi=1,2
              do noj=1,2
                 kmatbar(noi,noj)=1.0/(kmatbar(noi,noj)+1.0e-9)
              enddo
            enddo
            
           temp_ibm1=kmat(1,1)+kmat(2,2)


           do noi=1,3
               matdir1(noi,1:ntype)=d2xpos(noi,1)*amat2(noi,1:ntype)
               matdir2(noi,1:ntype)=d2xpos(noi,2)*amat2(noi,1:ntype)
               matdir3(noi,1:ntype)=d2xpos(noi,3)*amat2(noi,1:ntype)
           enddo

! derivatives in x 
           Dmat_Stiff1(1:ntype,1)=phi_ben_coef(ibdyg)*(
     &            -matdir1(1,1:ntype)*kmatbar(1,1)**3
     &              *(temp_ibm1-(1.0-phi_nus_coef(ibdyg))*kmat(2,2))
     &            +kmatbar(1,1)
     &              *( matdir1(1,1:ntype)*kmatbar(1,1)
     &                +matdir1(3,1:ntype)*kmatbar(2,2)
     &                -(1.0-phi_nus_coef(ibdyg))*matdir1(3,1:ntype)
     &                *kmatbar(2,2) )
     &            )

           Dmat_Stiff1(1:ntype,2)=phi_ben_coef(ibdyg)*(
     &            -matdir1(2,1:ntype)*kmatbar(1,2)**3
     &              *(        +(1.0-phi_nus_coef(ibdyg))*kmat(1,2))
     &            +kmatbar(1,2)
     &              *( 
     &                +(1.0-phi_nus_coef(ibdyg))*matdir1(2,1:ntype)
     &                *kmatbar(1,2) )
     &            )*2.0

           Dmat_Stiff1(1:ntype,3)=phi_ben_coef(ibdyg)*(
     &            -matdir1(3,1:ntype)*kmatbar(2,2)**3
     &              *(temp_ibm1-(1.0-phi_nus_coef(ibdyg))*kmat(1,1))
     &            +kmatbar(2,2)
     &              *( matdir1(1,1:ntype)*kmatbar(1,1)
     &                +matdir1(3,1:ntype)*kmatbar(2,2)
     &                -(1.0-phi_nus_coef(ibdyg))*matdir1(1,1:ntype)
     &                *kmatbar(1,1) )
     &            )

! derivatives in y 
           Dmat_Stiff2(1:ntype,1)=phi_ben_coef(ibdyg)*(
     &            -matdir2(1,1:ntype)*kmatbar(1,1)**3
     &              *(temp_ibm1-(1.0-phi_nus_coef(ibdyg))*kmat(2,2))
     &            +kmatbar(1,1)
     &              *( matdir2(1,1:ntype)*kmatbar(1,1)
     &                +matdir2(3,1:ntype)*kmatbar(2,2)
     &                -(1.0-phi_nus_coef(ibdyg))*matdir2(3,1:ntype)
     &                *kmatbar(2,2) )
     &            )

           Dmat_Stiff2(1:ntype,2)=phi_ben_coef(ibdyg)*(
     &            -matdir2(2,1:ntype)*kmatbar(1,2)**3
     &              *(        +(1.0-phi_nus_coef(ibdyg))*kmat(1,2))
     &            +kmatbar(1,2)
     &              *( 
     &                +(1.0-phi_nus_coef(ibdyg))*matdir2(2,1:ntype)
     &                *kmatbar(1,2) )
     &            )*2.0

           Dmat_Stiff2(1:ntype,3)=phi_ben_coef(ibdyg)*(
     &            -matdir2(3,1:ntype)*kmatbar(2,2)**3
     &              *(temp_ibm1-(1.0-phi_nus_coef(ibdyg))*kmat(1,1))
     &            +kmatbar(2,2)
     &              *( matdir2(1,1:ntype)*kmatbar(1,1)
     &                +matdir2(3,1:ntype)*kmatbar(2,2)
     &                -(1.0-phi_nus_coef(ibdyg))*matdir2(1,1:ntype)
     &                *kmatbar(1,1) )
     &            )

! derivatives in z 
           Dmat_Stiff3(1:ntype,1)=phi_ben_coef(ibdyg)*(
     &            -matdir3(1,1:ntype)*kmatbar(1,1)**3
     &              *(temp_ibm1-(1.0-phi_nus_coef(ibdyg))*kmat(2,2))
     &            +kmatbar(1,1)
     &              *( matdir3(1,1:ntype)*kmatbar(1,1)
     &                +matdir3(3,1:ntype)*kmatbar(2,2)
     &                -(1.0-phi_nus_coef(ibdyg))*matdir3(3,1:ntype)
     &                *kmatbar(2,2) )
     &            )

           Dmat_Stiff3(1:ntype,2)=phi_ben_coef(ibdyg)*(
     &            -matdir3(2,1:ntype)*kmatbar(1,2)**3
     &              *(        +(1.0-phi_nus_coef(ibdyg))*kmat(1,2))
     &            +kmatbar(1,2)
     &              *( 
     &                +(1.0-phi_nus_coef(ibdyg))*matdir3(2,1:ntype)
     &                *kmatbar(1,2) )
     &            )*2.0

           Dmat_Stiff3(1:ntype,3)=phi_ben_coef(ibdyg)*(
     &            -matdir3(3,1:ntype)*kmatbar(2,2)**3
     &              *(temp_ibm1-(1.0-phi_nus_coef(ibdyg))*kmat(1,1))
     &            +kmatbar(2,2)
     &              *( matdir3(1,1:ntype)*kmatbar(1,1)
     &                +matdir3(3,1:ntype)*kmatbar(2,2)
     &                -(1.0-phi_nus_coef(ibdyg))*matdir3(1,1:ntype)
     &                *kmatbar(1,1) )
     &            )
       
           
            bmat(1:3,1:3)=0.0          
            bmat(1,1)=phi_ben_coef(ibdyg)
     &        *(kmat(1,1)+phi_nus_coef(ibdyg)*kmat(2,2))*kmatbar(1,1)
            bmat(2,2)=phi_ben_coef(ibdyg)
     &        *(1.0-phi_nus_coef(ibdyg))*kmat(2,1)*kmatbar(1,2)
            bmat(2,2)=bmat(2,2)
     &        +phi_ben_coef(ibdyg)
     &        *(1.0-phi_nus_coef(ibdyg))*kmat(1,2)*kmatbar(2,1)
            bmat(3,3)=phi_ben_coef(ibdyg)
     &        *(kmat(2,2)+phi_nus_coef(ibdyg)*kmat(1,1))*kmatbar(2,2)


            kb(1:ntype,1:ntype)=
     &              wei_i*matmul(matmul(transpose(amat2(1:3,1:ntype))
     &             ,bmat),amat2(1:3,1:ntype))

             do noi=1,ntype
              ntemi=nea_esh(ibdy,ne,noi)
              do noj=1,ntype
                 ntemj=nea_esh(ibdy,ne,noj)
                 kkbf(ntemi,ntemj)=kkbf(ntemi,ntemj)
     &             +kb(noi,noj) 
              enddo
             enddo

            mattmp_eye(1:3,1:3)=0.0
            mattmp_eye(1,1)= d2xpos(1,1)
            mattmp_eye(2,2)= d2xpos(2,1)
            mattmp_eye(3,3)= d2xpos(3,1)
            
            kb11(1:ntype,1:ntype)=
     &             +kb(1:ntype,1:ntype)
     &             +wei_i*transpose(
     &             matmul(Dmat_Stiff1(1:ntype,1:3)
     &                     ,matmul(mattmp_eye,amat2(1:3,1:ntype))
     &                    ))
            kb12(1:ntype,1:ntype)=
     &             wei_i*transpose(
     &             matmul(Dmat_Stiff2(1:ntype,1:3)
     &                     ,matmul(mattmp_eye,amat2(1:3,1:ntype))
     &                    ))
            kb13(1:ntype,1:ntype)=
     &             wei_i*transpose(
     &             matmul(Dmat_Stiff3(1:ntype,1:3)
     &                     ,matmul(mattmp_eye,amat2(1:3,1:ntype))
     &                    ))

            mattmp_eye(1,1)= d2xpos(1,2)
            mattmp_eye(2,2)= d2xpos(2,2)
            mattmp_eye(3,3)= d2xpos(3,2)

            kb21(1:ntype,1:ntype)=
     &             wei_i*transpose(
     &             matmul(Dmat_Stiff1(1:ntype,1:3)
     &                     ,matmul(mattmp_eye,amat2(1:3,1:ntype))
     &                    ))
            kb22(1:ntype,1:ntype)=
     &             kb(1:ntype,1:ntype)
     &             +wei_i*transpose(
     &             matmul(Dmat_Stiff2(1:ntype,1:3)
     &                     ,matmul(mattmp_eye,amat2(1:3,1:ntype))
     &                    ))
            kb23(1:ntype,1:ntype)=
     &             wei_i*transpose(
     &             matmul(Dmat_Stiff3(1:ntype,1:3)
     &                     ,matmul(mattmp_eye,amat2(1:3,1:ntype))
     &                    ))

            mattmp_eye(1,1)= d2xpos(1,3)
            mattmp_eye(2,2)= d2xpos(2,3)
            mattmp_eye(3,3)= d2xpos(3,3)

            kb31(1:ntype,1:ntype)=
     &             wei_i*transpose(
     &             matmul(Dmat_Stiff1(1:ntype,1:3)
     &                     ,matmul(mattmp_eye,amat2(1:3,1:ntype))
     &                    ))
            kb32(1:ntype,1:ntype)=
     &             wei_i*transpose(
     &             matmul(Dmat_Stiff2(1:ntype,1:3)
     &                     ,matmul(mattmp_eye,amat2(1:3,1:ntype))
     &                    ))
            kb33(1:ntype,1:ntype)=
     &             kb(1:ntype,1:ntype)
     &             +wei_i*transpose(
     &             matmul(Dmat_Stiff3(1:ntype,1:3)
     &                     ,matmul(mattmp_eye,amat2(1:3,1:ntype))
     &                    ))

           j=ns_ibm_r_esh(i)+ns_ibm_i_esh(i)
           do noi=1,ntype
              ntemi=nea_esh(ibdy,ne,noi)
              do noj=1,ntype
                 ntemj=nea_esh(ibdy,ne,noj)
                 kkb(ntemi,ntemj)=kkb(ntemi,ntemj)
     &             +kb11(noi,noj)
                 kkb(ntemi,ntemj+j)=kkb(ntemi,ntemj+j)
     &             +kb12(noi,noj)
                 kkb(ntemi,ntemj+2*j)=kkb(ntemi,ntemj+2*j)
     &             +kb13(noi,noj)
                 kkb(ntemi+j,ntemj)=kkb(ntemi+j,ntemj)
     &             +kb21(noi,noj)
                 kkb(ntemi+j,ntemj+j)=kkb(ntemi+j,ntemj+j)
     &             +kb22(noi,noj)
                 kkb(ntemi+j,ntemj+2*j)=kkb(ntemi+j,ntemj+2*j)
     &             +kb23(noi,noj)
                 kkb(ntemi+2*j,ntemj)=kkb(ntemi+2*j,ntemj)
     &             +kb31(noi,noj)
                 kkb(ntemi+2*j,ntemj+j)=kkb(ntemi+2*j,ntemj+j)
     &             +kb32(noi,noj)
                 kkb(ntemi+2*j,ntemj+2*j)=kkb(ntemi+2*j,ntemj+2*j)
     &             +kb33(noi,noj)
               end do
            end do

            call ecmat(ms(1:ntype,1:ntype),s(1,1:ntype),ntype,1)
              mass(1:ntype,1:ntype)=mass(1:ntype,1:ntype)
     &             +wei_i*ms(1:ntype,1:ntype)

! derivatives in x 
           do noi=1,2
               matdir1(noi,1:ntype)=2.0*dxpos(noi,1)*amat1(noi,1:ntype)
               matdir2(noi,1:ntype)=2.0*dxpos(noi,2)*amat1(noi,1:ntype)
               matdir3(noi,1:ntype)=2.0*dxpos(noi,3)*amat1(noi,1:ntype)
           enddo
           noi=3
           matdir1(noi,1:ntype)=dxpos(1,1)*amat1(2,1:ntype)
     &                         +dxpos(2,1)*amat1(1,1:ntype)
           matdir2(noi,1:ntype)=dxpos(1,2)*amat1(2,1:ntype)
     &                         +dxpos(2,2)*amat1(1,1:ntype)
           matdir3(noi,1:ntype)=dxpos(1,3)*amat1(2,1:ntype)
     &                         +dxpos(2,3)*amat1(1,1:ntype)

! derivatives in x
           Dmat_Stiff1(1:ntype,1:3)=
     &        matmul(transpose(matdir1(1:3,1:ntype)),d_smat(1:3,1:3))
! derivatives in y 
           Dmat_Stiff2(1:ntype,1:3)=
     &        matmul(transpose(matdir2(1:3,1:ntype)),d_smat(1:3,1:3))
! derivatives in z 
           Dmat_Stiff3(1:ntype,1:3)=
     &        matmul(transpose(matdir3(1:3,1:ntype)),d_smat(1:3,1:3))

            ks(1:ntype,1:ntype)=
     &             wei_i*matmul(matmul(transpose(amat1(1:2,1:ntype))
     &             ,smat),amat1(1:2,1:ntype))

             do noi=1,ntype
              ntemi=nea_esh(ibdy,ne,noi)
              do noj=1,ntype
                 ntemj=nea_esh(ibdy,ne,noj)
                 kksf(ntemi,ntemj)=kksf(ntemi,ntemj)
     &             +ks(noi,noj) 
              enddo
             enddo

            kb11(1:ntype,1:ntype)=
     &             +ks(1:ntype,1:ntype)
     &             +wei_i
     &             *transpose(
     &               matmul(Dmat_Stiff1(1:ntype,1:1)
     &                     ,amat1(1:1,1:ntype))
     &                    *dxpos(1,1)
     &              +matmul(Dmat_Stiff1(1:ntype,2:2)
     &                     ,amat1(2:2,1:ntype))
     &                    *dxpos(2,1)
     &              +matmul(Dmat_Stiff1(1:ntype,3:3)
     &                     ,amat1(1:1,1:ntype)*dxpos(2,1)
     &                     +amat1(2:2,1:ntype)*dxpos(1,1))
     &                    )

            kb12(1:ntype,1:ntype)=
     &              wei_i
     &             *transpose(
     &               matmul(Dmat_Stiff2(1:ntype,1:1)
     &                     ,amat1(1:1,1:ntype))
     &                    *dxpos(1,1)
     &              +matmul(Dmat_Stiff2(1:ntype,2:2)
     &                     ,amat1(2:2,1:ntype))
     &                    *dxpos(2,1)
     &              +matmul(Dmat_Stiff2(1:ntype,3:3)
     &                     ,amat1(1:1,1:ntype)*dxpos(2,1)
     &                     +amat1(2:2,1:ntype)*dxpos(1,1))
     &                    )

            kb13(1:ntype,1:ntype)=
     &              wei_i
     &             *transpose(
     &               matmul(Dmat_Stiff3(1:ntype,1:1)
     &                     ,amat1(1:1,1:ntype))
     &                    *dxpos(1,1)
     &              +matmul(Dmat_Stiff3(1:ntype,2:2)
     &                     ,amat1(2:2,1:ntype))
     &                    *dxpos(2,1)
     &              +matmul(Dmat_Stiff3(1:ntype,3:3)
     &                     ,amat1(1:1,1:ntype)*dxpos(2,1)
     &                     +amat1(2:2,1:ntype)*dxpos(1,1))
     &                    )

            kb21(1:ntype,1:ntype)=
     &             wei_i
     &             *transpose(
     &               matmul(Dmat_Stiff1(1:ntype,1:1)
     &                     ,amat1(1:1,1:ntype))
     &                    *dxpos(1,2)
     &              +matmul(Dmat_Stiff1(1:ntype,2:2)
     &                     ,amat1(2:2,1:ntype))
     &                    *dxpos(2,2)
     &              +matmul(Dmat_Stiff1(1:ntype,3:3)
     &                     ,amat1(1:1,1:ntype)*dxpos(2,2)
     &                     +amat1(2:2,1:ntype)*dxpos(1,2))
     &                    )

            kb22(1:ntype,1:ntype)=
     &              ks(1:ntype,1:ntype)
     &             +wei_i
     &             *transpose(
     &               matmul(Dmat_Stiff2(1:ntype,1:1)
     &                     ,amat1(1:1,1:ntype))
     &                    *dxpos(1,2)
     &              +matmul(Dmat_Stiff2(1:ntype,2:2)
     &                     ,amat1(2:2,1:ntype))
     &                    *dxpos(2,2)
     &              +matmul(Dmat_Stiff2(1:ntype,3:3)
     &                     ,amat1(1:1,1:ntype)*dxpos(2,2)
     &                     +amat1(2:2,1:ntype)*dxpos(1,2))
     &                    )

            kb23(1:ntype,1:ntype)=
     &              wei_i
     &             *transpose(
     &               matmul(Dmat_Stiff3(1:ntype,1:1)
     &                     ,amat1(1:1,1:ntype))
     &                    *dxpos(1,2)
     &              +matmul(Dmat_Stiff3(1:ntype,2:2)
     &                     ,amat1(2:2,1:ntype))
     &                    *dxpos(2,2)
     &              +matmul(Dmat_Stiff3(1:ntype,3:3)
     &                     ,amat1(1:1,1:ntype)*dxpos(2,2)
     &                     +amat1(2:2,1:ntype)*dxpos(1,2))
     &                    )

            kb31(1:ntype,1:ntype)=
     &             wei_i
     &             *transpose(
     &               matmul(Dmat_Stiff1(1:ntype,1:1)
     &                     ,amat1(1:1,1:ntype))
     &                    *dxpos(1,3)
     &              +matmul(Dmat_Stiff1(1:ntype,2:2)
     &                     ,amat1(2:2,1:ntype))
     &                    *dxpos(2,3)
     &              +matmul(Dmat_Stiff1(1:ntype,3:3)
     &                     ,amat1(1:1,1:ntype)*dxpos(2,3)
     &                     +amat1(2:2,1:ntype)*dxpos(1,3))
     &                    )

            kb32(1:ntype,1:ntype)=
     &              wei_i
     &             *transpose(
     &               matmul(Dmat_Stiff2(1:ntype,1:1)
     &                     ,amat1(1:1,1:ntype))
     &                    *dxpos(1,3)
     &              +matmul(Dmat_Stiff2(1:ntype,2:2)
     &                     ,amat1(2:2,1:ntype))
     &                    *dxpos(2,3)
     &              +matmul(Dmat_Stiff2(1:ntype,3:3)
     &                     ,amat1(1:1,1:ntype)*dxpos(2,3)
     &                     +amat1(2:2,1:ntype)*dxpos(1,3))
     &                    )

            kb33(1:ntype,1:ntype)=
     &              ks(1:ntype,1:ntype)
     &             +wei_i
     &             *transpose(
     &               matmul(Dmat_Stiff3(1:ntype,1:1)
     &                     ,amat1(1:1,1:ntype))
     &                    *dxpos(1,3)
     &              +matmul(Dmat_Stiff3(1:ntype,2:2)
     &                     ,amat1(2:2,1:ntype))
     &                    *dxpos(2,3)
     &              +matmul(Dmat_Stiff3(1:ntype,3:3)
     &                     ,amat1(1:1,1:ntype)*dxpos(2,3)
     &                     +amat1(2:2,1:ntype)*dxpos(1,3))
     &                    )


             j=ns_ibm_r_esh(i)+ns_ibm_i_esh(i)
             do noi=1,ntype
              ntemi=nea_esh(ibdy,ne,noi)
              do noj=1,ntype
                 ntemj=nea_esh(ibdy,ne,noj)
                 kks(ntemi,ntemj)=kks(ntemi,ntemj)
     &             +kb11(noi,noj)
                 kks(ntemi,ntemj+j)=kks(ntemi,ntemj+j)
     &             +kb12(noi,noj)
                 kks(ntemi,ntemj+2*j)=kks(ntemi,ntemj+2*j)
     &             +kb13(noi,noj)
                 kks(ntemi+j,ntemj)=kks(ntemi+j,ntemj)
     &             +kb21(noi,noj)
                 kks(ntemi+j,ntemj+j)=kks(ntemi+j,ntemj+j)
     &             +kb22(noi,noj)
                 kks(ntemi+j,ntemj+2*j)=kks(ntemi+j,ntemj+2*j)
     &             +kb23(noi,noj)
                 kks(ntemi+2*j,ntemj)=kks(ntemi+2*j,ntemj)
     &             +kb31(noi,noj)
                 kks(ntemi+2*j,ntemj+j)=kks(ntemi+2*j,ntemj+j)
     &             +kb32(noi,noj)
                 kks(ntemi+2*j,ntemj+2*j)=kks(ntemi+2*j,ntemj+2*j)
     &             +kb33(noi,noj)
               end do
              end do
           end do  ! gauss

           do noi=1,ntype
              ntemi=nea_esh(ibdy,ne,noi)
              do noj=1,ntype
                 ntemj=nea_esh(ibdy,ne,noj)
                 mms(ntemi,ntemj)=mms(ntemi,ntemj)
     &             +mass(noi,noj)
                end do
            end do
        end do  !element

         

!~~~~~~~~~~~~~~ Nodal oprator
        if (ExternalPressureFlag(ibdyg)) then

        i=ibdy  
        include "distIBM_normalPressure_fn.Fi"   !I need to readjust Fi file
        temp_ibm1=temp_ibm2*p_inflation
        do j=1,ns_ibm_r_esh(i)
             fibm1_esh(i,j)=fibm1_esh(i,j)
     &          -fibm1pres_esh(j)  /areapnt_esh(i,j)
     &          *temp_ibm1
             fibm2_esh(i,j)=fibm2_esh(i,j)
     &          -fibm2pres_esh(j)  /areapnt_esh(i,j)
     &          *temp_ibm1
             fibm3_esh(i,j)=fibm3_esh(i,j)
     &          -fibm3pres_esh(j)  /areapnt_esh(i,j)
     &          *temp_ibm1

        end do
        endif
        i=ibdy  
         if(contacttype .eq. -1) then
            do j=1,ns_ibm_r_esh(i)
                dxcont(1)=fibm1cont_esh(j)
                dxcont(2)=fibm2cont_esh(j)
                dxcont(3)=fibm3cont_esh(j)
                ddcont=sqrt(dxcont(1)**2+dxcont(2)**2+dxcont(3)**2)+eps
                normalpres_esh(j,1)=dxcont(1)/ddcont
                normalpres_esh(j,2)=dxcont(2)/ddcont
                normalpres_esh(j,3)=dxcont(3)/ddcont
            enddo
        endif

        i=ibdy
        i2l=i      
        i2g=ibdyg    

        aamat_esh=0.d0
        do j=1,3
          ibktx=(j-1)*(ns_ibm_r_esh(i)+ns_ibm_i_esh(i))+1
          ibkty=j*(ns_ibm_r_esh(i)+ns_ibm_i_esh(i))
          ibktmin(1)=ibktx  !(j-1)*ns_ibm_r_esh(i)+1
          ibktmax(1)=ibkty  !j*ns_ibm_r_esh(i)

          do j2=1,3
            ibkts1=(j2-1)*(ns_ibm_r_esh(i)+ns_ibm_i_esh(i))+1
            ibkts2=j2*(ns_ibm_r_esh(i)+ns_ibm_i_esh(i))
            ibktmin(2)=ibkts1  !(j2-1)*ns_ibm_r_esh(i)+1
            ibktmax(2)=ibkts2  !j2*ns_ibm_r_esh(i)
            if(j .eq. j2) then
            aamat_esh(ibktmin(1):ibktmax(1),ibktmin(2):ibktmax(2))
     &          =(density_coef(i2g)*timeMarchcoef(2)
     &          +(cs_ibm(i2g)+propDamp(i2g,1)*density_coef(i2g))
     &                  *timeMarchcoef(3))*
     &            mms(1:ns_ibm_r_esh(i)+ns_ibm_i_esh(i)
     &               ,1:ns_ibm_r_esh(i)+ns_ibm_i_esh(i))
            endif
            aamat_esh(ibktmin(1):ibktmax(1),ibktmin(2):ibktmax(2))
     &          =
     &          aamat_esh(ibktmin(1):ibktmax(1),ibktmin(2):ibktmax(2))
     &         +(propDamp(i2g,2)*timeMarchcoef(3)+timeMarchcoef(1))
     &          *( kks(ibktx:ibkty,ibkts1:ibkts2)
     &            +kkb(ibktx:ibkty,ibkts1:ibkts2) )

          enddo
        enddo

       if(FluidForceFlag(i2g) ) then
          j2=ns_ibm_r_esh(i)+ns_ibm_i_esh(i)
          do j=1,j2
           aamat_esh(j,j)
     &       =aamat_esh(j,j)-timeMarchcoef(3)
     &        *ImplicitFSI_coef*areapnt_esh(i,j)
           aamat_esh(j+j2,j+j2)
     &       =aamat_esh(j+j2,j+j2)-timeMarchcoef(3)
     &        *ImplicitFSI_coef*areapnt_esh(i,j)
           aamat_esh(j+2*j2,j+2*j2)
     &       =aamat_esh(j+2*j2,j+2*j2)-timeMarchcoef(3)
     &        *ImplicitFSI_coef*areapnt_esh(i,j)
          enddo
        endif

        j2=ns_ibm_r_esh(i)+ns_ibm_i_esh(i)
        do j=1,target_num(i2g)
             k=target_point_num_esh(i,j)
             temp_ibm1=
     &          (X_na_esh(k,1)-Xtar_na_esh(j,1))
             temp_ibm2=
     &          (X_na_esh(k,2)-Xtar_na_esh(j,2))
             temp_ibm3=
     &          (X_na_esh(k,3)-Xtar_na_esh(j,3))

             include "distIBM_target_k_rampfn.Fi"               
             if(time_alphaf .le. target_t_link_esh(i,j)) then
                ksh_tmp=target_k_link_esh(i,j)*target_timefn
             else
                ksh_tmp=0.0
             endif
             force_points_esh(i,j,1)=k_link*temp_ibm1*ksh_tmp
             force_points_esh(i,j,2)=k_link*temp_ibm2*ksh_tmp
             force_points_esh(i,j,3)=k_link*temp_ibm3*ksh_tmp


             ddcont=timeMarchcoef(1)*k_link*ksh_tmp
             aamat_esh(k,k)          =aamat_esh(k,k)          +ddcont
             aamat_esh(k+j2,k+j2)    =aamat_esh(k+j2,k+j2)    +ddcont
             aamat_esh(k+2*j2,k+2*j2)=aamat_esh(k+2*j2,k+2*j2)+ddcont

             temp_ibm1=dXtar_na_esh(j,1)
             temp_ibm2=dXtar_na_esh(j,2)
             temp_ibm3=dXtar_na_esh(j,3)

             temp_ibm1=dX_na_esh(k,1)-temp_ibm1
             temp_ibm2=dX_na_esh(k,2)-temp_ibm2
             temp_ibm3=dX_na_esh(k,3)-temp_ibm3

             temp2_ibm= cs_ibm_target(i2g)*k_link*ksh_tmp
             force_points_esh(i,j,1)=force_points_esh(i,j,1)+
     &              temp2_ibm*temp_ibm1

             force_points_esh(i,j,2)=force_points_esh(i,j,2)+
     &              temp2_ibm*temp_ibm2

             force_points_esh(i,j,3)=force_points_esh(i,j,3)+
     &              temp2_ibm*temp_ibm3

             ddcont=timeMarchcoef(3)*k_link*ksh_tmp
             aamat_esh(k,k)          =aamat_esh(k,k)          +ddcont
             aamat_esh(k+j2,k+j2)    =aamat_esh(k+j2,k+j2)    +ddcont
             aamat_esh(k+2*j2,k+2*j2)=aamat_esh(k+2*j2,k+2*j2)+ddcont


             f_link1_esh(i,k)=force_points_esh(i,j,1)
             f_link2_esh(i,k)=force_points_esh(i,j,2)
             f_link3_esh(i,k)=force_points_esh(i,j,3)
       enddo

        if(ndim .gt. 2) then
          ddcont=(min_grid_x*min_grid_y*min_grid_z)**(1.0/3.0)
        else
          ddcont=sqrt(min_grid_x*min_grid_y)
        endif
       
       i=ibdy
       i2g=ibdyg
       if(ContactForceFlag(i2g))then
       include "distIBM_Contact_Coeffn.Fi"   
       if(contacttype .ne. -1) then
         write(*,*) 'Implicit version is not implemented yet!'
         STOP
       endif

       do ibkt2=1,NBucketnum

             ibktmp1=mod(ibkt2,IBucketnum(1)*IBucketnum(2))

             if(ibktmp1 .eq. 0) ibktmp1=IBucketnum(1)*IBucketnum(2)

             ibktx=mod(ibktmp1,IBucketnum(1))
             if(ibktx .eq. 0) ibktx=IBucketnum(1)

             ibkty=int((ibktmp1-1)/IBucketnum(1))+1
             ibktz=int((ibkt2-1)/(IBucketnum(1)*IBucketnum(2)))+1

             ibktmin(1)=max(1,ibktx-1)
             ibktmax(1)=min(IBucketnum(1),ibktx+1)

             ibktmin(2)=max(1,ibkty-1)
             ibktmax(2)=min(IBucketnum(2),ibkty+1)

             ibktmin(3)=max(1,ibktz-1)
             ibktmax(3)=min(IBucketnum(3),ibktz+1)
             do ibkt_i=PBucket(i2g,ibkt2),PBucket(i2g,ibkt2+1)-1
                 j2 =sBucket_esh(i,ibkt2,ibkt_i)

                 do i2=1,nFixcontact
                        if((
     &                     abs((X_na_esh(j2,2)-
     &                          xFixcontact(i2,2))/min_grid_y)
     &                    .le.12.0) .and.
     &                    (abs((X_na_esh(j2,1)-
     &                          xFixcontact(i2,1))/min_grid_x)
     &                    .le.12.0) .and.
     &                    (abs((X_na_esh(j2,3)-
     &                          xFixcontact(i2,3))/min_grid_z)
     &                    .le.12.0) ) then
!!                              ksh_tmp=X_na_esh(j2,1)

                              temp_ibm1= 
     &                              ((X_na_esh(j2,2)
     &                               -xFixcontact(i2,2))
     &                           /(min_grid_y) )
                              call delta_fun(delta_typey,temp_ibm1,fn2)
                              temp_ibm2= 
     &                              ((X_na_esh(j2,1)
     &                               -xFixcontact(i2,1))
     &                           /(min_grid_x) )
                              call delta_fun(delta_typex,temp_ibm2,fn1)
                              if(ndim .gt. 2)  then 
                                 temp_ibm3= 
     &                              ((X_na_esh(j2,3)
     &                               -xFixcontact(i2,3))
     &                              /(min_grid_z) )
                                  call 
     &                              delta_fun(delta_typez,temp_ibm3,fn3)
                              else
                                   temp_ibm3=0.0
                                   fn3=1.0
                              endif
                              temp3_ibm=
     &                        sqrt((temp_ibm1*min_grid_y)**2
     &                            +(temp_ibm2*min_grid_x)**2
     &                            +(temp_ibm3*min_grid_z)**2)
     &                            +1.0d-9
                              f_impuls1_esh(i,j2)= f_impuls1_esh(i,j2)+
     &                               fn1*fn2*fn3*areapnt_esh(i,j2)
     &                               *ds_ibm_esh(i,j2)*impactpen(1)
     &                               /(min_grid_x*min_grid_y*min_grid_z)
     &                               *(ksh_tmp-xFixcontact(i2,1))
     &                               /temp3_ibm
                              f_impuls2_esh(i,j2)= f_impuls2_esh(i,j2)+
     &                               fn1*fn2*fn3*areapnt_esh(i,j2)
     &                              *ds_ibm_esh(i,j2)*impactpen(1)
     &                              /(min_grid_x*min_grid_y*min_grid_z)
     &                              *(X_na_esh(j2,2)
     &                               -xFixcontact(i2,2))
     &                               /temp3_ibm
                              if(ndim .gt. 2)  
     &                           f_impuls3_esh(i,j2)=
     &                              f_impuls3_esh(i,j2)+
     &                               fn1*fn2*fn3*areapnt_esh(i,j2)
     &                              *ds_ibm_esh(i,j2)*impactpen(1)
     &                              /(min_grid_x*min_grid_y*min_grid_z)
     &                              *(X_na_esh(j2,1)
     &                               -xFixcontact(i2,3))
     &                               /temp3_ibm
                          endif
                  enddo
            enddo
        enddo


       if(contacttype .eq. -1) then        
        if (i2g .le. nr_ibm_f) then
           do ibkt2=1,NBucketnum

             ibktmp1=mod(ibkt2,IBucketnum(1)*IBucketnum(2))
             if(ibktmp1 .eq. 0) ibktmp1=IBucketnum(1)*IBucketnum(2)

             ibktx=mod(ibktmp1,IBucketnum(1))
             if(ibktx .eq. 0) ibktx=IBucketnum(1)

             ibkty=int((ibktmp1-1)/IBucketnum(1))+1
             ibktz=int((ibkt2-1)/(IBucketnum(1)*IBucketnum(2)))+1

             ibktmin(1)=max(1,ibktx-1)
             ibktmax(1)=min(IBucketnum(1),ibktx+1)

             ibktmin(2)=max(1,ibkty-1)
             ibktmax(2)=min(IBucketnum(2),ibkty+1)

             ibktmin(3)=max(1,ibktz-1)
             ibktmax(3)=min(IBucketnum(3),ibktz+1)
             do ibkt_i=PBucket(i2g,ibkt2),PBucket(i2g,ibkt2+1)-1
                j2 =sBucket_esh(i,ibkt2,ibkt_i)
               do i2=1,nr_ibm_esh
                  i3g=Ilocglb_esh(i2)
                  if(i3g .le. nr_ibm_fb) then
                  if(i2 .ne. i) then
                    do ibkts1=ibktmin(1),ibktmax(1)
                    do ibkts2=ibktmin(2),ibktmax(2)
                    do ibkts3=ibktmin(3),ibktmax(3)
                      ibkt=
     &                       ibkts1
     &                     +(ibkts2-1)*IBucketnum(1)
     &                     +(ibkts3-1)*IBucketnum(1)*IBucketnum(2)

                      do ibkt2_i=PBucket(i3g,ibkt),PBucket(i3g,ibkt+1)-1
                         j =sBucket_esh(i2,ibkt,ibkt2_i) 

                           outcont(1)=X_na_esh(j2,1)-
     &                                gx_ibm_esh(i2,j)
                           outcont(2)=X_na_esh(j2,2)-
     &                                gy_ibm_esh(i2,j)
                           outcont(3)=X_na_esh(j2,3)-
     &                                gz_ibm_esh(i2,j)                    
                           outcont2(1)=normalpres_esh(j2,1)
                           outcont2(2)=normalpres_esh(j2,2)
                           outcont2(3)=normalpres_esh(j2,3)
                        ksh_tmp=sqrt(
     &                     outcont(1)**2+
     &                     outcont(2)**2+
     &                     outcont(3)**2)

!                       dncont=dot_product(outcont(1:3),outcont2(1:3))
!                       dncont=-dncont/(abs(dncont)+eps)

                        dncont=-1.0

                        temp_ibm2=time_alphaf  


                        if( (ksh_tmp/ddcont   .le. 10.0) 
     &                .and. (temp_ibm2 .gt. 0.05) ) then
                              temp_ibm1= 
     &                            max(ksh_tmp*dncont/ddcont,0.0)
                              call delta_fun(delta_typey,temp_ibm1,fn1)

                              temp3_ibm=ksh_tmp
                              dxcont(1)=temp_ibm1 
                              dxcont(2)=1.0/(1+exp(10*(dxcont(1)-0.0)))
                              dxcont(3)=impactpen(1)
     &                            +dxcont(2)*impactpen(2)
                              dxcont(3)=dxcont(3)*dncont



!                              if(0 .eq. 1) then
!                                fn1=1.0/4.0
!                                if(temp3_ibm/ddcont>1.0)then
!                                  dxcont(1)=ksh_tmp*
!     &                             exp(-impactpen(1)*
!     &                             (temp3_ibm/ddcont-1.0)/ksh_tmp)
!                                else
!                                  dxcont(1)=ksh_tmp
!     &                             -impactpen(2)*(temp3_ibm/ddcont-1.0)
!                                endif
!                                dxcont(3)=dxcont(1)   
!                              endif    
                          
                              ksh_tmp=1.0 

                              f_impuls1_esh(i,j2)=
     &                                f_impuls1_esh(i,j2)+
     &                               fn1*2.0*areapnt_esh(i,j2)
     &                               *dxcont(3)*ksh_tmp
     &                               *( X_na_esh(j2,1)
     &                                 -gx_ibm_esh(i2,j))
     &                               /temp3_ibm

                              f_impuls2_esh(i,j2)=
     &                                f_impuls2_esh(i,j2)+
     &                               fn1*2.0*areapnt_esh(i,j2)
     &                               *dxcont(3)*ksh_tmp
     &                              *(X_na_esh(j2,2)
     &                               -gy_ibm_esh(i2,j))
     &                               /temp3_ibm

                              if(ndim .gt. 2) then
                                 f_impuls3_esh(i,j2)=
     &                               f_impuls3_esh(i,j2)+
     &                               fn1*2.0*areapnt_esh(i,j2)
     &                              *dxcont(3)*ksh_tmp
     &                              *(X_na_esh(j2,3)
     &                               -gz_ibm_esh(i2,j))
     &                               /temp3_ibm
                              endif
                         endif
                     end do  !ibkt2_i
                     enddo   !ibkts1
                     enddo   !ibkts2
                     enddo   !ibkts3
                  endif
                  endif
               enddo   !i2i

!============  This part is skiped in implicit version END

             enddo !ibkt_i
             enddo !ibkt2
             if(contactplanesFlag(ibdyg)) then
!               if(1==0) then
!               do ibkt2=1,Ncontactplanes(ibdyg) 
!                contactplane_point(1:3)= 
!     &                       contactplanesPara(ibdyg,ibkt2,1:3)
!                contactplane_n(1:3)=
!     &                       contactplanesPara(ibdyg,ibkt2,4:6)
!
!                dncont=0.0dncont
!                do i2=1,3
!                   dncont=dncont+contactplane_n(i2) 
!     &                          *contactplane_point(i2)
!                enddo
!                contactplane_n(4)=-dncont  !plane defined as ax+by+cz+d=0, here we save d
!
!               temp_ibm2=s_function((time_alphaf-contact_time_esh(i,1))
!     &                              /contact_time_esh(i,2) )
!                                
!               temp_ibm2=time_alphaf
!
!               do j2=1,ns_ibm_r_esh(i)
!
!                  mattmp_eye(1:3,1:3)=0.0
!
!                  ksh_tmp=contactplane_n(1) 
!     &                   *X_na_esh(j2,1) 
!     &                   +contactplane_n(2) 
!     &                   *X_na_esh(j2,2) 
!     &                   +contactplane_n(3) 
!     &                   *X_na_esh(j2,3) 
!     &                   +contactplane_n(4)
!
!! KSH=sum_{1:3}ni.xi +n4     d KSH/ dxi  =ni
!! xp=KSH/2dx -0.5            d xp / dKSH =1/2dx     ==>tmpv3(1) 
!! y=xp (xp>=0)  & =0 (xp<0)  d  y / dxp  = {1 or 0} ==>tmpv2(1)
!! y2=0 (xp>=0)  & =xp(xp<0)  d y2 / dxp  = {0 or 1}
!! fn=deltafn(y)              d  f / dy   =df(y)    *dxp/dKSH==>tmpv3(2)
!! A = 2*(1/(1+exp(6*y2))-0.5)d  A / dy2  =dg(y)    *dy2/dxp==>tmpv2(2)
!
!                  tmpv3(3)=0.0
!                  if(ksh_tmp/ddcont   .le. 8.0) then
!                              tmpv3(1)=1.0/(2*ddcont)
!
!                              temp_ibm1= 
!     &                            max(ksh_tmp/(2*ddcont)-0.5,0.0)
!                              call delta_fun(delta_typey,temp_ibm1,fn1)
!                              call Driv_delta_fun(delta_typey, 
!     &                                            temp_ibm1,tmpv3(2))
!                              tmpv3(2)=tmpv3(2)*tmpv3(1)  
!
!
!                              temp3_ibm=ksh_tmp/(2*ddcont)-0.5
!                              dxcont(1)=temp3_ibm     
!
!                              if(temp3_ibm .le.0.0) then 
!                                tmpv2(1)=0.0
!                                dxcont(2)=2.0*(
!     &                         1.0/(1+exp(6.0*(dxcont(1)-0.0)))-0.5)
!                               tmpv2(2)=-(12.0*exp(6.0*dxcont(1)))
!     &                                  /(exp(6.0*dxcont(1)) + 1.0)**2
!                              else
!                                tmpv2(1)=tmpv3(2)   !final df/dxj
!                                tmpv2(2)=0.0        !final dA/dxj
!                                dxcont(2)=0.0
!                              endif
!                              dxcont(3)=(impactpen(1)
!     &                            +dxcont(2)*impactpen(2))
!     &                            *contact_coef_esh(i,1,j2)*temp_ibm2
!
!                              tmpv3(3)=(
!     &                             tmpv2(2)*impactpen(2))
!     &                            *contact_coef_esh(i,1,j2)*temp_ibm2
!     &                            *tmpv3(1)
!
!                              tmpv2(3)=2.0*areapnt_esh(i,j2)
!     &                                *(tmpv2(1)*dxcont(3)
!     &                                 +fn1*tmpv3(3))
!
!                               f_impuls1_esh(i,j2)=
!     &                                f_impuls1_esh(i,j2)+
!     &                               fn1*2.0*areapnt_esh(i,j2)
!     &                               *dxcont(3)
!     &                               *contactplane_n(1)
!
!                              f_impuls2_esh(i,j2)=
!     &                                f_impuls2_esh(i,j2)+
!     &                               fn1*2.0*areapnt_esh(i,j2)
!     &                               *dxcont(3)
!     &                              *contactplane_n(2)
!
!                              if(ndim .gt. 2) then
!                                 f_impuls3_esh(i,j2)=
!     &                               f_impuls3_esh(i,j2)+
!     &                               fn1*2.0*areapnt_esh(i,j2)
!     &                              *dxcont(3)
!     &                              *contactplane_n(3)
!                              endif
!                              do j=1,3
!                               tmpv2(1)=contactplane_n(j)
!                               ibktmin(1)=(j-1)
!     &                           *(ns_ibm_r_esh(i)+ns_ibm_i_esh(i))+j2
!                               do k=1,3
!                                 tmpv2(2)=contactplane_n(k)
!                                 ibktmin(2)=(k-1)
!     &                           *(ns_ibm_r_esh(i)+ns_ibm_i_esh(i))+j2
!
!                                  aamat_esh(ibktmin(1),ibktmin(2))
!     &                           =aamat_esh(ibktmin(1),ibktmin(2))
!     &                           -timeMarchcoef(1)
!     &                           *tmpv2(1)*tmpv2(2)*tmpv2(3)
!                               enddo
!                             enddo
!                   endif
!                enddo !j2
!              enddo !ibkt2

!              else

               do ibkt2=1,Ncontactplanes(ibdyg) 
                contactplane_point(1:3)= 
     &                       contactplanesPara(ibdyg,ibkt2,1:3)
                contactplane_n(1:3)=
     &                       contactplanesPara(ibdyg,ibkt2,4:6)

                dncont=0.0
                do i2=1,3
                   dncont=dncont+contactplane_n(i2) 
     &                          *contactplane_point(i2)
                enddo
                contactplane_n(4)=-dncont  !plane defined as ax+by+cz+d=0, here we save d

               temp_ibm2=s_function((time_alphaf-contact_time_esh(i,1))
     &                              /contact_time_esh(i,2) )
                                
               temp_ibm2=time_alphaf

               do j2=1,ns_ibm_r_esh(i)

                  ksh_tmp=contactplane_n(1) 
     &                   *X_na_esh(j2,1) 
     &                   +contactplane_n(2) 
     &                   *X_na_esh(j2,2) 
     &                   +contactplane_n(3) 
     &                   *X_na_esh(j2,3) 
     &                   +contactplane_n(4)
                  ksh_tmp=-ksh_tmp

                  tmpv3(3)=0.0
                  if(abs(ksh_tmp)/ddcont   .le. 15.0) then

                      tmpv3(1)=
     &                 impactpen(1)/contact_coef_esh(i,ibkt2,j2)/ddcont
                      if(ksh_tmp .gt. 0) then
                          tmpv3(2)=
     &                      0.5*tmpv3(1)*contact_coef_esh(i,ibkt2,j2)
     &                      +tmpv3(1)*ksh_tmp
                          tmpv2(2)=-tmpv3(1)
                      elseif(ksh_tmp 
     &                        .gt. -contact_coef_esh(i,ibkt2,j2)) then
                          tmpv3(2)=
     &                      tmpv3(1)/(2.0*contact_coef_esh(i,ibkt2,j2))
     &                      *(ksh_tmp+contact_coef_esh(i,ibkt2,j2))**2
                          tmpv2(2)=
     &                      -tmpv3(1)/(contact_coef_esh(i,ibkt2,j2))
     &                         *(ksh_tmp+contact_coef_esh(i,ibkt2,j2))
                      else
                          tmpv3(2)=0.0
                          tmpv2(2)=0.0
                      endif
                      f_impuls1_esh(i,j2)=
     &                                f_impuls1_esh(i,j2)+
     &                               tmpv3(2)*areapnt_esh(i,j2)
     &                               *contactplane_n(1)

                      f_impuls2_esh(i,j2)=
     &                                f_impuls2_esh(i,j2)+
     &                               tmpv3(2)*areapnt_esh(i,j2)
     &                              *contactplane_n(2)

                      if(ndim .gt. 2) then
                          f_impuls3_esh(i,j2)=
     &                               f_impuls3_esh(i,j2)+
     &                               tmpv3(2)*areapnt_esh(i,j2)
     &                              *contactplane_n(3)
                      endif
                      do j=1,3
                            tmpv2(1)=contactplane_n(j)
                            ibktmin(1)=(j-1)
     &                           *(ns_ibm_r_esh(i)+ns_ibm_i_esh(i))+j2
                            do k=1,3
                                 tmpv2(3)=contactplane_n(k)
                                 ibktmin(2)=(k-1)
     &                           *(ns_ibm_r_esh(i)+ns_ibm_i_esh(i))+j2

                                  aamat_esh(ibktmin(1),ibktmin(2))
     &                           =aamat_esh(ibktmin(1),ibktmin(2))
     &                           -timeMarchcoef(1)*areapnt_esh(i,j2)
     &                           *tmpv2(1)*tmpv2(2)*tmpv2(3)
                            enddo
                       enddo
                   endif
                enddo !j2
             enddo !ibkt2
!             endif
            endif !contactplanesFlag
             if(channelcontacty) then
             do j2=1,ns_ibm_r_esh(i)
               do i2=1,2  !with channel bndry in y
                     if(i2 .eq. 1) then
                        h_channel=gy(nygrid_ibm)
                        if (gy_ibm_massive_esh(i,j2) 
     &                      .lt. h_channel) then
                            ksh_tmp=X_na_esh(j2,2)
                        else
                           ksh_tmp=h_channel-1.0d-9
                        endif
                     else
                        h_channel=gy(2)
                        if (gy_ibm_massive_esh(i,j2) 
     &                      .gt. h_channel) then
                            ksh_tmp=X_na_esh(j2,2)
                        else
                           ksh_tmp=h_channel+1.0d-9
                        endif
                     endif
                     do j=1,nxgrid_ibm
                       do k=1,nzgrid_ibm
                        if((
     &                  abs((X_na_esh(j2,2)-h_channel)
     &                       /min_grid_y)
     &                 .le.12.0) .and.
     &                 (abs((X_na_esh(j2,1)-gx(j))
     &                       /min_grid_x)
     &                 .le.12.0) .and.
     &                 (abs((X_na_esh(j2,3)-gz(k))
     &                       /min_grid_z)
     &                 .le.12.0) ) then

                         temp_ibm1= 
     &                         ((ksh_tmp-h_channel)
     &                     /(min_grid_y))

                           call delta_fun(delta_typey,temp_ibm1,fn2)

                          temp_ibm2= 
     &                        ((X_na_esh(j2,1)-gx(j))
     &                     /(min_grid_x))

                           call delta_fun(delta_typex,temp_ibm2,fn1)

                          if(ndim .gt. 2) then
                             temp_ibm3= 
     &                          ((X_na_esh(j2,3)-gz(k))
     &                       /(min_grid_z) )
                           call delta_fun(delta_typez,temp_ibm3,fn3)
                          else
                             temp_ibm3=0.0
                             fn3=1.0
                          endif

                         temp3_ibm=
     &                   sqrt((temp_ibm1*min_grid_y)**2
     &                      +(temp_ibm2*min_grid_x)**2
     &                      +(temp_ibm3*min_grid_z)**2)+1.0d-9

                          f_impuls1_esh(i,j2)= f_impuls1_esh(i,j2)+
     &                               fn1*fn2*fn3*areapnt_esh(i,j2)
     &                        *ds_ibm_esh(i,j2)*impactpen(1)
     &                        /(min_grid_x*min_grid_y*min_grid_z)
     &                      *(X_na_esh(j2,1)-gx(j))/temp3_ibm
                          f_impuls2_esh(i,j2)= f_impuls2_esh(i,j2)+
     &                               fn1*fn2*fn3*areapnt_esh(i,j2)
     &                        *ds_ibm_esh(i,j2)*impactpen(1)
     &                        /(min_grid_x*min_grid_y*min_grid_z)
     &                        *(ksh_tmp-h_channel)/temp3_ibm
                          if(ndim .gt. 2) 
     &                    f_impuls3_esh(i,j2)= f_impuls3_esh(i,j2)+
     &                               fn1*fn2*fn3*areapnt_esh(i,j2)
     &                        *ds_ibm_esh(i,j2)*impactpen(1)
     &                        /(min_grid_x*min_grid_y*min_grid_z)
     &                      *(X_na_esh(j2,3)-gz(k))/temp3_ibm
                        endif
                    
                   end do !k=1,nz 
                 end do !j=1,nx
               enddo  !i2=1,2
             end do    !j2
             endif !channelcontacty

             if((channelcontactz) .and. (ndim .gt. 2)) then
             do j2=1,ns_ibm_r_esh(i)

               do i2=1,2  !with channel bndry in z

                     if(i2 .eq. 1) then
                        h_channel=gz(nzgrid_ibm)
                        if (X_na_esh(j2,3) 
     &                      .lt. h_channel) then
                            ksh_tmp=X_na_esh(j2,3)
                        else
                            ksh_tmp=h_channel-1.0d-9
                        endif
                     else
                        h_channel=gz(2)
                        if (X_na_esh(j2,3) 
     &                      .gt. h_channel) then
                            ksh_tmp=X_na_esh(j2,3)
                        else
                           ksh_tmp=h_channel+1.0d-9
                        endif
                     endif
                     do j=1,nxgrid_ibm
                       do k=1,nygrid_ibm
                        if((
     &                  abs((X_na_esh(j2,2)-gy(k))
     &                       /min_grid_y)
     &                 .le.12.0) .and.
     &                 (abs((X_na_esh(j2,1)-gx(j))
     &                       /min_grid_x)
     &                 .le.12.0) .and.
     &                 (abs((X_na_esh(j2,3)-h_channel)
     &                       /min_grid_z)
     &                 .le.12.0) ) then

                        temp_ibm1= 
     &                         ((X_na_esh(j2,2)-gy(k))
     &                       /(min_grid_y) )
                           call delta_fun(delta_typey,temp_ibm1,fn2)

                        temp_ibm2= 
     &                        ((X_na_esh(j2,1)-gx(j))
     &                     /(min_grid_x))
                           call delta_fun(delta_typex,temp_ibm2,fn1)

                        temp_ibm3= 
     &                          ((ksh_tmp-h_channel)
     &                       /(min_grid_z) )
                           call delta_fun(delta_typez,temp_ibm3,fn3)


                         temp3_ibm=
     &                   sqrt((temp_ibm1*min_grid_y)**2
     &                      +(temp_ibm2*min_grid_x)**2
     &                      +(temp_ibm3*min_grid_z)**2)+1.0d-9

                          f_impuls1_esh(i,j2)= f_impuls1_esh(i,j2)+
     &                               fn1*fn2*fn3*areapnt_esh(i,j2)
     &                        *ds_ibm_esh(i,j2)*impactpen(1)
     &                        /(min_grid_x*min_grid_y*min_grid_z)
     &                        *(X_na_esh(j2,1)-gx(j))
     &                       /temp3_ibm

                          f_impuls2_esh(i,j2)= f_impuls2_esh(i,j2)+
     &                               fn1*fn2*fn3*areapnt_esh(i,j2)
     &                        *ds_ibm_esh(i,j2)*impactpen(1)
     &                        /(min_grid_x*min_grid_y*min_grid_z)
     &                        *(X_na_esh(j2,2)-gy(k))
     &                       /temp3_ibm

                          f_impuls3_esh(i,j2)= f_impuls3_esh(i,j2)+
     &                               fn1*fn2*fn3*areapnt_esh(i,j2)
     &                        *ds_ibm_esh(i,j2)*impactpen(1)
     &                        /(min_grid_x*min_grid_y*min_grid_z)
     &                        *(ksh_tmp-h_channel)/temp3_ibm
                        endif
                    
                   end do !k=1,nz 
                 end do !j=1,nx
               enddo  !i2=1,2
             end do    !j2
             endif !channelcontactz
          endif   !for if ((i .le. nr_ibm_f).and.(i .ge. 1)) then
       endif  !contacttypeif of contact model
       endif  !ContactForceFlag(i)

!here 2-16-2015 7:02pm
c calculation of total forces 
       i=ibdy
       i2g=ibdyg

        do j=1,ns_ibm_r_esh(i)
             fibm1_esh(i,j)=fibm1_esh(i,j)
     &          +f_link1_esh(i,j)
             fibm2_esh(i,j)=fibm2_esh(i,j)
     &          +f_link2_esh(i,j)
             fibm3_esh(i,j)=fibm3_esh(i,j)
     &          +f_link3_esh(i,j)
        end do

       do j=1,ns_ibm_r_esh(i)+ns_ibm_i_esh(i) 
           f_link1_esh(i,j)=(density_coef(i2g)*
     &        (timeMarchcoef(2)+propDamp(i2g,1)*timeMarchcoef(3))
     &        +cs_ibm(i2g)*timeMarchcoef(3))*X_np1_esh(j,1)
     &        -density_coef(i2g)*ddX_in_esh(j,1)
     &        -(cs_ibm(i2g)+
     &        +propDamp(i2g,1)*density_coef(i2g))*dX_in_esh(j,1)

           f_link2_esh(i,j)=(density_coef(i2g)*
     &        (timeMarchcoef(2)+propDamp(i2g,1)*timeMarchcoef(3))
     &        +cs_ibm(i2g)*timeMarchcoef(3))*X_np1_esh(j,2)
     &        -density_coef(i2g)*ddX_in_esh(j,2)
     &        -(cs_ibm(i2g)+
     &        +propDamp(i2g,1)*density_coef(i2g))*dX_in_esh(j,2)

           f_link3_esh(i,j)=(density_coef(i2g)*
     &        (timeMarchcoef(2)+propDamp(i2g,1)*timeMarchcoef(3))
     &        +cs_ibm(i2g)*timeMarchcoef(3))*X_np1_esh(j,3)
     &        -density_coef(i2g)*ddX_in_esh(j,3)
     &        -(cs_ibm(i2g)+
     &        +propDamp(i2g,1)*density_coef(i2g))*dX_in_esh(j,3)
       end do

      f_link1_esh(i,1: ns_ibm_r_esh(i)+ns_ibm_i_esh(i))=
     & matmul(mms(1: ns_ibm_r_esh(i)+ns_ibm_i_esh(i),
     &            1: ns_ibm_r_esh(i)+ns_ibm_i_esh(i)),
     &         f_link1_esh(i,1: ns_ibm_r_esh(i)+ns_ibm_i_esh(i)) )
      f_link2_esh(i,1: ns_ibm_r_esh(i)+ns_ibm_i_esh(i))=
     & matmul( mms(1: ns_ibm_r_esh(i)+ns_ibm_i_esh(i),
     &             1: ns_ibm_r_esh(i)+ns_ibm_i_esh(i)),
     &         f_link2_esh(i,1: ns_ibm_r_esh(i)+ns_ibm_i_esh(i)) )
      f_link3_esh(i,1: ns_ibm_r_esh(i)+ns_ibm_i_esh(i))=
     & matmul(mms(1: ns_ibm_r_esh(i)+ns_ibm_i_esh(i),
     &            1: ns_ibm_r_esh(i)+ns_ibm_i_esh(i)),
     &         f_link3_esh(i,1: ns_ibm_r_esh(i)+ns_ibm_i_esh(i)))

      np=ns_ibm_r_esh(i)+ns_ibm_i_esh(i)

      do ie1=0,2
      ie2=0
      f_link1_esh(i,1:np)=
     &f_link1_esh(i,1:np)
     & +matmul(kks(ie2*np+1:(ie2+1)*np,ie1*np+1:(ie1+1)*np)
     &        +kkb(ie2*np+1:(ie2+1)*np,ie1*np+1:(ie1+1)*np),
     &         propDamp(2,i2g)*
     &         (timeMarchcoef(3)*
     &          X_np1_esh(1:np,ie1+1)-dX_in_esh(1:np,ie1+1))
     &          + X_na_esh(1:np,ie1+1) 
     &        ) 

      ie2=1
      f_link2_esh(i,1:np)=
     &f_link2_esh(i,1:np)
     & +matmul(kks(ie2*np+1:(ie2+1)*np,ie1*np+1:(ie1+1)*np)
     &        +kkb(ie2*np+1:(ie2+1)*np,ie1*np+1:(ie1+1)*np),
     &         propDamp(2,i2g)*
     &         (timeMarchcoef(3)*
     &          X_np1_esh(1:np,ie1+1)-dX_in_esh(1:np,ie1+1))
     &          + X_na_esh(1:np,ie1+1) 
     &        ) 

      ie2=2
      f_link3_esh(i,1:np)=
     &f_link3_esh(i,1:np)
     & +matmul(kks(ie2*np+1:(ie2+1)*np,ie1*np+1:(ie1+1)*np)
     &        +kkb(ie2*np+1:(ie2+1)*np,ie1*np+1:(ie1+1)*np),
     &         propDamp(2,i2g)*
     &         (timeMarchcoef(3)*
     &          X_np1_esh(1:np,ie1+1)-dX_in_esh(1:np,ie1+1))
     &          + X_na_esh(1:np,ie1+1) 
     &        ) 
      enddo


c calculation of total forces 
       i=ibdy

        do j=1,ns_ibm_r_esh(i) 
           fibm1_esh(i,j)=-f_link1_esh(i,j)
     &                  + areapnt_esh(i,j)*(
     &                 -fibm1_esh(i,j)   
     &                 +density_coef(i2g)
     &                  *fr*cos(the_grav)*sin(phi_grav)*timetemp2
     &                 ) 
     &                +f_impuls1_esh(i,j)

           fibm2_esh(i,j)=-f_link2_esh(i,j)
     &                  + areapnt_esh(i,j)*(
     &                 -fibm2_esh(i,j)    
     &                 +density_coef(i2g)
     &                  *fr*sin(the_grav)*sin(phi_grav)*timetemp2
     &                 ) 
     &                 +f_impuls2_esh(i,j)

           fibm3_esh(i,j)=-f_link3_esh(i,j)
     &                  + areapnt_esh(i,j)*(
     &                 -fibm3_esh(i,j)    
     &                 +density_coef(i2g)
     &                  *fr*cos(phi_grav)*timetemp2
     &                 ) 
     &                 +f_impuls3_esh(i,j)
        end do


      ksh_tmp=-1000.0
      k=ns_ibm_r_esh(ibdy)+ns_ibm_i_esh(ibdy)      
      do np=1,ns_ibm_r_esh(ibdy)  
         ksh_tmp=max(ksh_tmp,aamat_esh(np,np))
         ksh_tmp=max(ksh_tmp,aamat_esh(np+k,np+k))
         ksh_tmp=max(ksh_tmp,aamat_esh(np+2*k,np+2*k))
      enddo
      k=ns_ibm_r_esh(ibdy)+ns_ibm_i_esh(ibdy)
      do np=1,ns_ibm_i_esh(ibdy)  
         npg=ns_ibm_r_esh(ibdy)+np
         bodypoint(1)=boundrylist_esh(ibdy,np,1)
         bodypoint(2)=boundrylist_esh(ibdy,np,2)
         bodypoint(3)=boundrylist_esh(ibdy,np,3)

         if(bndycnd_esh(ibdy,npg) .eq. 1) then
            do j=1,3
             aamat_esh(npg+(j-1)*k,1:3*k)=0.0
             aamat_esh(npg+(j-1)*k,npg+(j-1)*k)=ksh_tmp
             aamat_esh(npg+(j-1)*k,bodypoint(1)+(j-1)*k)=
     &              aamat_esh(npg+(j-1)*k,bodypoint(1)+(j-1)*k)-ksh_tmp
             aamat_esh(npg+(j-1)*k,bodypoint(2)+(j-1)*k)=
     &              aamat_esh(npg+(j-1)*k,bodypoint(2)+(j-1)*k)-ksh_tmp
             aamat_esh(npg+(j-1)*k,bodypoint(3)+(j-1)*k)=
     &              aamat_esh(npg+(j-1)*k,bodypoint(3)+(j-1)*k)+ksh_tmp
            enddo
          elseif(bndycnd_esh(ibdy,npg) .eq. 2) then
            do j=1,3
             aamat_esh(npg+(j-1)*k,1:3*k)=0.0
             aamat_esh(npg+(j-1)*k,npg+(j-1)*k)=ksh_tmp

             aamat_esh(bodypoint(1)+(j-1)*k,1:3*k)=0.0
             aamat_esh(bodypoint(1)+(j-1)*k,bodypoint(1)+(j-1)*k)=
     &              ksh_tmp

             aamat_esh(bodypoint(2)+(j-1)*k,1:3*k)=0.0
             aamat_esh(bodypoint(2)+(j-1)*k,bodypoint(2)+(j-1)*k)=
     &              ksh_tmp
            enddo
          elseif(bndycnd_esh(ibdy,npg) .eq. 3) then   
            do j=1,3
             aamat_esh(npg+(j-1)*k,1:3*k)=0.0
             aamat_esh(npg+(j-1)*k,npg+(j-1)*k)=ksh_tmp

             aamat_esh(npg+(j-1)*k,bodypoint(1)+(j-1)*k)=
     &              aamat_esh(npg+(j-1)*k,bodypoint(1)+(j-1)*k)-ksh_tmp
             aamat_esh(npg+(j-1)*k,bodypoint(2)+(j-1)*k)=
     &              aamat_esh(npg+(j-1)*k,bodypoint(2)+(j-1)*k)-ksh_tmp
             aamat_esh(npg+(j-1)*k,bodypoint(3)+(j-1)*k)=
     &              aamat_esh(npg+(j-1)*k,bodypoint(3)+(j-1)*k)+ksh_tmp

             aamat_esh(bodypoint(1)+(j-1)*k,1:3*k)=0.0
             aamat_esh(bodypoint(1)+(j-1)*k,bodypoint(1)+(j-1)*k)=
     &              ksh_tmp

             aamat_esh(bodypoint(2)+(j-1)*k,1:3*k)=0.0
             aamat_esh(bodypoint(2)+(j-1)*k,bodypoint(2)+(j-1)*k)=
     &              ksh_tmp
            enddo
         endif
      end do   


      do np=1,ns_ibm_i_esh(ibdy)  
         npg=ns_ibm_r_esh(ibdy)+np
         bodypoint(1)=boundrylist_esh(ibdy,np,1)
         bodypoint(2)=boundrylist_esh(ibdy,np,2)
         bodypoint(3)=boundrylist_esh(ibdy,np,3)
		 
         if(bndycnd_esh(ibdy,npg) .eq. 1) then		 
            fibm1_esh(ibdy,npg)=0.0
            fibm2_esh(ibdy,npg)=0.0
            fibm3_esh(ibdy,npg)=0.0
         elseif(bndycnd_esh(ibdy,npg) .eq. 2) then
            fibm1_esh(ibdy,npg)=ksh_tmp*coef_iter
     &      *(X0_np1_esh(npg,1)-gx_bp_esh(ibdy,npg))
            fibm1_esh(ibdy,bodypoint(1))=
     &             ksh_tmp*coef_iter
     &      *(X0_np1_esh(bodypoint(1),1)-gx_bp_esh(ibdy,bodypoint(1)))

            fibm1_esh(ibdy,bodypoint(2))=
     &             ksh_tmp*coef_iter
     &      *(X0_np1_esh(bodypoint(2),1)-gx_bp_esh(ibdy,bodypoint(2)))

            fibm2_esh(ibdy,npg)=ksh_tmp*coef_iter
     &      *(X0_np1_esh(npg,2)         -gy_bp_esh(ibdy,npg))

            fibm2_esh(ibdy,bodypoint(1))=
     &             ksh_tmp*coef_iter
     &      *(X0_np1_esh(bodypoint(1),2)-gy_bp_esh(ibdy,bodypoint(1)))

            fibm2_esh(ibdy,bodypoint(2))=
     &             ksh_tmp*coef_iter
     &      *(X0_np1_esh(bodypoint(2),2)-gy_bp_esh(ibdy,bodypoint(2)))

            fibm3_esh(ibdy,npg)=ksh_tmp*coef_iter
     &      *(X0_np1_esh(npg,3)         -gz_bp_esh(ibdy,npg))

            fibm3_esh(ibdy,bodypoint(1))=
     &             ksh_tmp*coef_iter
     &      *(X0_np1_esh(bodypoint(1),3)-gz_bp_esh(ibdy,bodypoint(1)))

            fibm3_esh(ibdy,bodypoint(2))=
     &             ksh_tmp*coef_iter
     &      *(X0_np1_esh(bodypoint(2),3)-gz_bp_esh(ibdy,bodypoint(2)))
		 
         elseif(bndycnd_esh(ibdy,npg) .eq. 3) then	!need to change
             fibm1_esh(ibdy,npg)=0.0

             fibm2_esh(ibdy,npg)=0.0

             fibm3_esh(ibdy,npg)=0.0

            fibm1_esh(ibdy,bodypoint(1))=
     &             ksh_tmp*coef_iter
     &      *(X0_np1_esh(bodypoint(1),1)-gx_bp_esh(ibdy,bodypoint(1)))

            fibm1_esh(ibdy,bodypoint(2))=
     &             ksh_tmp*coef_iter
     &      *(X0_np1_esh(bodypoint(2),1)-gx_bp_esh(ibdy,bodypoint(2)))

            fibm2_esh(ibdy,bodypoint(1))=
     &             ksh_tmp*coef_iter
     &      *(X0_np1_esh(bodypoint(1),2)-gy_bp_esh(ibdy,bodypoint(1)))

            fibm2_esh(ibdy,bodypoint(2))=
     &             ksh_tmp*coef_iter
     &      *(X0_np1_esh(bodypoint(2),2)-gy_bp_esh(ibdy,bodypoint(2)))

            fibm3_esh(ibdy,bodypoint(1))=
     &             ksh_tmp*coef_iter
     &      *(X0_np1_esh(bodypoint(1),3)-gz_bp_esh(ibdy,bodypoint(1)))

            fibm3_esh(ibdy,bodypoint(2))=
     &             ksh_tmp*coef_iter
     &      *(X0_np1_esh(bodypoint(2),3)-gz_bp_esh(ibdy,bodypoint(2)))

         endif
		 
      enddo

      if(allocated(aacsr))  then 
        deallocate(iacsr, jacsr,aacsr)
      endif
        k=ns_ibm_r_esh(i)+ns_ibm_i_esh(i)
        allocate(iacsr(ns_ibm_esh*3))     
        ntemi=0
        do noj=1,3*k
        iacsr(noj)=ntemi+1
        do noi=1,3*k
           ksh_tmp=aamat_esh(noj,noi)
           if(abs(ksh_tmp) .ge. 1.0d-20) then
            ntemi=ntemi+1
           endif
         enddo
         enddo
         ntermiMAX=ntemi+1 
         allocate(aacsr(ntermiMAX),jacsr(ntermiMAX))
        iacsr=0
        aacsr=0.0
        jacsr=0

      ntemi=0
      do noj=1,3*k
      iacsr(noj)=ntemi+1
      do noi=1,3*k
         ksh_tmp=aamat_esh(noj,noi)
         if(abs(ksh_tmp) .ge. 1.0d-20) then
            ntemi=ntemi+1
            aacsr(ntemi)=ksh_tmp
            jacsr(ntemi)=noi
         endif
      enddo
      enddo

      iacsr(noj)=ntemi+1 
      j=ns_ibm_r_esh(i)+ns_ibm_i_esh(i)
       ddU_np1_esh=0.0

      if(SolverILU .eq. 1) then
      if(iter .eq. 1) then
       ilucal_flag=.true.
      else
       ilucal_flag=.false.
      endif
      else
       ilucal_flag=.true.
      endif

       call pmgmres_ilu2_crBigRHS (j
     &     ,ntermiMAX
     &     ,iacsr(1: 3*j+1)
     &     ,jacsr(1: ntermiMAX)
     &     ,aacsr(1: ntermiMAX)
     &     ,ddU_np1_esh(1:j,1)
     &     ,ddU_np1_esh(1:j,2)
     &     ,ddU_np1_esh(1:j,3)
     &     ,fibm1_esh(i,1:j)
     &     ,fibm2_esh(i,1:j)
     &     ,fibm3_esh(i,1:j)
     &     ,SolverOutiter,SolverIniter
     &     ,Solverabstol,Solverreltol,SolverPre,ilucal_flag,monitorON)

      X_np1_esh(1:j,1:3) =X_np1_esh(1:j,1:3)
     &     +ddU_np1_esh(1:j,1:3)

      dxcont(1:3)=0.0
      outcont(1:3)=0.0
      do npg=1,(ns_ibm_r_esh(i)+ns_ibm_i_esh(i))
        dxcont(1:3)=dxcont(1:3)+ddU_np1_esh(npg,1:3)**2
        outcont(1:3)=outcont(1:3)
     &     +(X_np1_esh(npg,1:3)-X_n_esh(npg,1:3))**2
       enddo

       dxcont(1)=sqrt(dxcont(1)+dxcont(2)+dxcont(3))
       outcont(1)=sqrt(outcont(1)+outcont(2)+outcont(3))
       if(monitorON)
     & print*, 'Error= ',j,dxcont(1),outcont(1),dxcont(1)/outcont(1)

        do npg=1,ns_ibm_r_esh(i)+ns_ibm_i_esh(i)
           dX_np1_esh(npg,1:3)=
     &       timeMarchcoef(10)*(X_np1_esh(npg,1:3)-X_n_esh(npg,1:3))
     &      +timeMarchcoef(11)*dX_n_esh(npg,1:3)
     &      +timeMarchcoef(12)*ddX_n_esh(npg,1:3)
          ddX_np1_esh(npg,1:3)=
     &       timeMarchcoef(13)*(X_np1_esh(npg,1:3)-X_n_esh(npg,1:3))
     &      +timeMarchcoef(14)*dX_n_esh(npg,1:3)
     &      +timeMarchcoef(15)*ddX_n_esh(npg,1:3)
        enddo
!==============================================   END ITERATION
       if(dxcont(1)/outcont(1) .lt. maxErrorstruct) exit

      enddo       
      do npg=1,ns_ibm_r_esh(ibdy)+ns_ibm_i_esh(ibdy)
         gx_ibm_massive_esh(ibdy,npg)=X_np1_esh(npg,1)
         gy_ibm_massive_esh(ibdy,npg)=X_np1_esh(npg,2)
         gz_ibm_massive_esh(ibdy,npg)=X_np1_esh(npg,3)

         vibm1_esh(ibdy,npg)=dX_np1_esh(npg,1)
         vibm2_esh(ibdy,npg)=dX_np1_esh(npg,2)
         vibm3_esh(ibdy,npg)=dX_np1_esh(npg,3)

         aibm1_esh(ibdy,npg)=ddX_np1_esh(npg,1)
         aibm2_esh(ibdy,npg)=ddX_np1_esh(npg,2)
         aibm3_esh(ibdy,npg)=ddX_np1_esh(npg,3)
       
       enddo

        deallocate(
     &       aamat_esh,matdir1,matdir2,matdir3
     &      ,Dmat_Stiff1,Dmat_Stiff2,Dmat_Stiff3
     &      ,kb11,kb12,kb13
     &      ,kb21,kb22,kb23
     &      ,kb31,kb32,kb33
     &      ,kks,kkb,kksf,kkbf
     &          )

      endif !Genalpha_timesolver((ibdyg))

      elseif(abs(ShellModelType_esh(ibdy)).gt. 1) then

      if(Genalpha_timesolver(ibdyg) .eq. 0) then
           Print*, 'Not Implemented'
            STOP    
      elseif(Genalpha_timesolver(ibdyg) .eq. 5) then
        allocate(
     &       aamat_esh(3*ns_ibm_esh,3*ns_ibm_esh)
     &      ,Da_ab_Drs(3,maxordern,maxordern)
     &      ,Da_ab_Dr(3,maxordern),a3tilde_Dr(3,maxordern)
     &      ,a3tilde_Drs(maxordern,maxordern,3)
     &      ,a3bar_Dr(maxordern),a3bar_Drs(maxordern,maxordern)
     &      ,a3_Dr(maxordern,3)
     &      ,a3_Drs(maxordern,maxordern,3),Db_ab_Dr(3,maxordern)
     &      ,Db_ab_Drs(3,3,maxordern,maxordern)
     &      ,Depsilon_ab_r(3,3,maxordern)
     &      ,Depsilon_ab_rs(3,3,maxordern,maxordern)
     &      ,Dkappa_ab_r(3,3,maxordern)
     &      ,Dkappa_ab_rs(3,3,3,maxordern,maxordern)
     &      ,Forcetemp1(3,maxordern)
     &      ,temp_ibmtype(maxordern)
     &      ,temp_ibmtype2(maxordern,3)
     &      ,temp_ibmtype3(maxordern,maxordern)
     &      ,fibmRHS1_esh(ns_ibm_esh)
     &      ,fibmRHS2_esh(ns_ibm_esh)
     &      ,fibmRHS3_esh(ns_ibm_esh)
     &      ,kb11(maxordern,maxordern)
     &      ,kb12(maxordern,maxordern)
     &      ,kb13(maxordern,maxordern)
     &      ,kb21(maxordern,maxordern)
     &      ,kb22(maxordern,maxordern)
     &      ,kb23(maxordern,maxordern)
     &      ,kb31(maxordern,maxordern)
     &      ,kb32(maxordern,maxordern)
     &      ,kb33(maxordern,maxordern)
     &      ,kkb(3*ns_ibm_esh,3*ns_ibm_esh)
     &      ,kkbf(ns_ibm_esh,ns_ibm_esh)
     &          )

        timeMarchcoef(1)= 1.0-alphaf_Coef(ibdyg)
        timeMarchcoef(2)=(1.0-alpham_Coef(ibdyg))/(dt2*beta_Coef(ibdyg))
        timeMarchcoef(3)=(1.0-alphaf_Coef(ibdyg))*gamma_Coef(ibdyg)
     &                  /(dt*beta_Coef(ibdyg))

        timeMarchcoef(4)=(1.0-alpham_Coef(ibdyg))/(dt2*beta_Coef(ibdyg))
        timeMarchcoef(5)=(1.0-alpham_Coef(ibdyg))/(dt*beta_Coef(ibdyg))
        timeMarchcoef(6)=(1.0-alpham_Coef(ibdyg)-2.0*beta_Coef(ibdyg))
     &                  /(2.0*beta_Coef(ibdyg))

        timeMarchcoef(7)=(1.0-alphaf_Coef(ibdyg))*gamma_Coef(ibdyg)
     &                  /(dt*beta_Coef(ibdyg))
        timeMarchcoef(8)=(
     &                  (1.0-alphaf_Coef(ibdyg))*gamma_Coef(ibdyg)
     &                   -beta_Coef(ibdyg)
     &                   )
     &                  /beta_Coef(ibdyg)

        timeMarchcoef(9)=(
     &                   (1.0-alphaf_Coef(ibdyg))
     &                  *(gamma_Coef(ibdyg)-2.0*beta_Coef(ibdyg)) )
     &                  /(2.0*beta_Coef(ibdyg))*dt

        timeMarchcoef(10)=gamma_Coef(ibdyg)/(dt*beta_Coef(ibdyg))
        timeMarchcoef(11)=-(gamma_Coef(ibdyg)/beta_Coef(ibdyg)-1.0)
        timeMarchcoef(12)=
     &                  -(0.5*gamma_Coef(ibdyg)/beta_Coef(ibdyg)-1.0)*dt

        timeMarchcoef(13)=1.0/(dt2*beta_Coef(ibdyg))
        timeMarchcoef(14)=-1.0/(beta_Coef(ibdyg)*dt)
        timeMarchcoef(15)=-(0.5/beta_Coef(ibdyg)-1.0)

        time_alphaf=time2+(1.0-alphaf_Coef(ibdyg))*dt
!copy vectors
        do npg=1,ns_ibm_r_esh(ibdy)
         X_n_esh(npg,1)=gx_ibm_massive_esh(ibdy,npg)
         X_n_esh(npg,2)=gy_ibm_massive_esh(ibdy,npg)
         X_n_esh(npg,3)=gz_ibm_massive_esh(ibdy,npg)
         dX_n_esh(npg,1)=vibm1_esh(ibdy,npg)
         dX_n_esh(npg,2)=vibm2_esh(ibdy,npg)
         dX_n_esh(npg,3)=vibm3_esh(ibdy,npg)
         ddX_n_esh(npg,1)=aibm1_esh(ibdy,npg)
         ddX_n_esh(npg,2)=aibm2_esh(ibdy,npg)
         ddX_n_esh(npg,3)=aibm3_esh(ibdy,npg)
        enddo

        do npg=1,ns_ibm_r_esh(ibdy)
           X_np1_esh(npg,1:3) =  X_n_esh(npg,1:3)
           dX_np1_esh(npg,1:3)= dX_n_esh(npg,1:3)
          ddX_np1_esh(npg,1:3)=ddX_n_esh(npg,1:3)

          ddX_in_esh(npg,1:3)=timeMarchcoef(4)* X_n_esh(npg,1:3)
     &                      +timeMarchcoef(5)* dX_n_esh(npg,1:3)
     &                      +timeMarchcoef(6)*ddX_n_esh(npg,1:3)

          dX_in_esh(npg,1:3)=timeMarchcoef(7)*X_n_esh(npg,1:3)
     &                      +timeMarchcoef(8)*dX_n_esh(npg,1:3)
     &                      +timeMarchcoef(9)*ddX_n_esh(npg,1:3)
        enddo       

!===================  ITERATIONS
      Do iter=1,Genalpha_niter(ibdyg)
         if(monitorON)   write(*,*) '   === INER ===  ',iter
         if(iter .eq. 1) then 
            coef_iter=1.0
         else
            coef_iter=0.0      
         endif  

      do npg=1,ns_ibm_r_esh(ibdy)
          ddX_na_esh(npg,1:3)= (1.0-alpham_Coef(ibdyg))
     &                      *ddX_np1_esh(npg,1:3)
     &                      +alpham_Coef(ibdyg)* ddX_n_esh(npg,1:3)
          dX_na_esh(npg,1:3)= (1.0-alphaf_Coef(ibdyg))
     &                      *dX_np1_esh(npg,1:3)
     &                      +alphaf_Coef(ibdyg)* dX_n_esh(npg,1:3)
          X_na_esh(npg,1:3)= (1.0-alphaf_Coef(ibdyg))
     &                      *X_np1_esh(npg,1:3)
     &                      +alphaf_Coef(ibdyg)* X_n_esh(npg,1:3)
      enddo   
!! calculate residule
      i=ibdy
      i2l=i
      fibm1_esh(i,1:Ns_IBM_esh)=0.0
      fibm2_esh(i,1:Ns_IBM_esh)=0.0
      fibm3_esh(i,1:Ns_IBM_esh)=0.0
      ffluidsum1_esh(i,1:Ns_IBM_esh)=0.0
      ffluidsum2_esh(i,1:Ns_IBM_esh)=0.0
      ffluidsum3_esh(i,1:Ns_IBM_esh)=0.0


      f_impuls1_esh(i,1:Ns_IBM_esh)=0.d0
      f_impuls2_esh(i,1:Ns_IBM_esh)=0.d0
      f_impuls3_esh(i,1:Ns_IBM_esh)=0.d0
      areapnt_esh(i,1:Ns_IBM_esh)=0.0
!      xpnt_esh(i,1:Ns_IBM_esh)=0.0
      force_points_esh(i,1:Ns_IBM_esh,1:3)=0.d0
      f_link1_esh(i,1:Ns_IBM_esh)=0.0
      f_link2_esh(i,1:Ns_IBM_esh)=0.0
      f_link3_esh(i,1:Ns_IBM_esh)=0.0

c
c calculating feedback force for matching bcs
       i2g=Ilocglb_esh(ibdy)
       ImplicitFSI_coef=0.0
       if(FluidForceFlag(i2g)) then
        ImplicitFSI_coef=(alpha_ibm*delta_t+beta_ibm)*timetemp2
        do j=1,ns_ibm_r_esh(i)
           fk_mass1_esh(i,j)=fk_mass1o_esh(i,j)
     &          +alpha_ibm*delta_t*(uibm1_esh(i,j)-dX_na_esh(j,1))
     &                   *timetemp2

            fk_mass2_esh(i,j)=fk_mass2o_esh(i,j)
     &          +alpha_ibm*delta_t*(uibm2_esh(i,j)-dX_na_esh(j,2))
     &                   *timetemp2

            ffluidsum1_esh(i,j)= fk_mass1_esh(i,j)
     &                   +beta_ibm*(uibm1_esh(i,j)-dX_na_esh(j,1))
     &                   *timetemp2
            ffluidsum2_esh(i,j)= fk_mass2_esh(i,j)
     &                   +beta_ibm*(uibm2_esh(i,j)-dX_na_esh(j,2))
     &                   *timetemp2
            if(ndim .gt. 2) then
            fk_mass3_esh(i,j)=fk_mass3o_esh(i,j)
     &          +alpha_ibm*delta_t*(uibm3_esh(i,j)-dX_na_esh(j,3))
     &                   *timetemp2

            ffluidsum3_esh(i,j)= fk_mass3_esh(i,j)
     &                   +beta_ibm*(uibm3_esh(i,j)-dX_na_esh(j,3))
     &                   *timetemp2
            endif
         end do
         do j=1,ns_ibm_r_esh(i)
              fibm1_esh(i,j)=fibm1_esh(i,j)+ffluidsum1_esh(i,j)
              fibm2_esh(i,j)=fibm2_esh(i,j)+ffluidsum2_esh(i,j)
              if(ndim .gt. 2) 
     &           fibm3_esh(i,j)=fibm3_esh(i,j)+ffluidsum3_esh(i,j)
          end do
        endif  

        call boundary_ibm_generalalpha(
     &       i2g
     &      ,Xtar_na_esh
     &      ,dXtar_na_esh
     &      ,X0_np1_esh)

      do npg=1,target_num(i2g)
         Xtar_na_esh(npg,1:3)= alphaf_Coef(ibdyg)
     &                        *target_points_esh(i,npg,1:3)
     &                      +timeMarchcoef(6)*Xtar_na_esh(npg,1:3)
        dXtar_na_esh(npg,1:3)= alphaf_Coef(ibdyg)
     &                        *target_points_v_esh(i,npg,1:3)
     &                      +timeMarchcoef(6)*dXtar_na_esh(npg,1:3)
      enddo   

      do np=1,ns_ibm_i_esh(ibdy)  
         npg=ns_ibm_r_esh(ibdy)+np
         bodypoint(1)=boundrylist_esh(ibdy,np,1)
         bodypoint(2)=boundrylist_esh(ibdy,np,2)
         bodypoint(3)=boundrylist_esh(ibdy,np,3)
         X0_np1_esh(npg,1:3)=X0_np1_esh(bodypoint(1),1:3)
     &                      +X0_np1_esh(bodypoint(2),1:3)
     &                      -X0_np1_esh(bodypoint(3),1:3)

         X_na_esh(npg,1:3)=X_na_esh(bodypoint(1),1:3)
     &                    +X_na_esh(bodypoint(2),1:3)
     &                    -X_na_esh(bodypoint(3),1:3)

         dX_na_esh(npg,1:3)=dX_na_esh(bodypoint(1),1:3)
     &                     +dX_na_esh(bodypoint(2),1:3)
     &                     -dX_na_esh(bodypoint(3),1:3)

         ddX_na_esh(npg,1:3)=ddX_na_esh(bodypoint(1),1:3)
     &                      +ddX_na_esh(bodypoint(2),1:3)
     &                      -ddX_na_esh(bodypoint(3),1:3)

         dX_in_esh(npg,1:3)=dX_in_esh(bodypoint(1),1:3)
     &                     +dX_in_esh(bodypoint(2),1:3)
     &                     -dX_in_esh(bodypoint(3),1:3)

         ddX_in_esh(npg,1:3)=ddX_in_esh(bodypoint(1),1:3)
     &                      +ddX_in_esh(bodypoint(2),1:3)
     &                      -ddX_in_esh(bodypoint(3),1:3)

         X_np1_esh(npg,1:3)=X_np1_esh(bodypoint(1),1:3)
     &                      +X_np1_esh(bodypoint(2),1:3)
     &                      -X_np1_esh(bodypoint(3),1:3)

         dX_np1_esh(npg,1:3)=dX_np1_esh(bodypoint(1),1:3)
     &                       +dX_np1_esh(bodypoint(2),1:3)
     &                       -dX_np1_esh(bodypoint(3),1:3)

         ddX_np1_esh(npg,1:3)=ddX_np1_esh(bodypoint(1),1:3)
     &                       +ddX_np1_esh(bodypoint(2),1:3)
     &                       -ddX_np1_esh(bodypoint(3),1:3)

      end do       
      aamat_esh=0.0
      mms=0.0
      kkbf=0.0
      kkb=0.0

      fibm1pres_esh=0.0
      fibm2pres_esh=0.0
      fibm3pres_esh=0.0

      fibm1cont_esh=0.0
      fibm2cont_esh=0.0
      fibm3cont_esh=0.0

      ntypeMAx_loc=-1000

      do ne=1,numelr(ibdyg)
         jtype=neatype_esh(ibdy,ne)
         itype=jtypeall(jtype)
         if(itype .eq. 0) then
           ntype=12  
         else
           ntype=6+itype
         end if
         ntypeMAx_loc=max(ntypeMAx_loc,ntype)

         do nos=1,ntype
            ntem=nea_esh(ibdy,ne,nos)
            x(nos,1:3)=X_na_esh(ntem,1:3)

            if(Fibrous_Esh(ibdy) .eq. 1) then
            noj=1
            x_FibVec(nos,noj)=Materialpara_esh(ibdy,ntem,noj)
            noj=2
            x_FibVec(nos,noj)=Materialpara_esh(ibdy,ntem,noj)
            noj=3
            x_FibVec(nos,noj)=Materialpara_esh(ibdy,ntem,noj)
            if(nos .eq. 1) then
               n_FibVec(1:3) =crFibCrv_esh(ibdy,ne,1:3)
               n3_FibVec(1:3)=crFibCrv_esh(ibdy,ne,4:6)
            endif
            endif
            do noj=1,2
               sx(noj,nos)=coorcurv_esh(ibdy,ne,nos,noj)
            enddo
         enddo

         if(itype .eq. 0) then
             xj1=x(4,1);xj2=x(7,1);xj3=x(8,1)
             yj1=x(4,2);yj2=x(7,2);yj3=x(8,2)
             zj1=x(4,3);zj2=x(7,3);zj3=x(8,3)
         else
             xj1=x(1,1);xj2=x(2,1);xj3=x(itype+1,1)
             yj1=x(1,2);yj2=x(2,2);yj3=x(itype+1,2)
             zj1=x(1,3);zj2=x(2,3);zj3=x(itype+1,3)
         endif
 
             tmpv1(1)=xj2-xj1
             tmpv1(2)=yj2-yj1
             tmpv1(3)=zj2-zj1
             tmpv2(1)=xj3-xj1
             tmpv2(2)=yj3-yj1
             tmpv2(3)=zj3-zj1
            call crossvec(tmpv3,tmpv1,tmpv2)

            tmpv1x(1)=xpcenter_esh(ibdy,ne,1)
            tmpv1x(2)=xpcenter_esh(ibdy,ne,2)
            tmpv1x(3)=xpcenter_esh(ibdy,ne,3)

        if(itype .eq. 0) then
             if (ExternalPressureFlag(ibdyg)) then
             
             fibm1cont_esh(nea_esh(ibdy,ne,4))=
     &                            fibm1cont_esh(nea_esh(ibdy,ne,4))+
     &                                 tmpv3(1)*tmpv1x(1)
             fibm1cont_esh(nea_esh(ibdy,ne,7))=
     &                            fibm1cont_esh(nea_esh(ibdy,ne,7))+
     &                                 tmpv3(1)*tmpv1x(2)
             fibm1cont_esh(nea_esh(ibdy,ne,8))=
     &                            fibm1cont_esh(nea_esh(ibdy,ne,8))+
     &                                 tmpv3(1)*tmpv1x(3)

             fibm1pres_esh(nea_esh(ibdy,ne,4))=
     &                            fibm1pres_esh(nea_esh(ibdy,ne,4))+
     &                                 tmpv3(1)*area(ibdy,ne)/3.0
             fibm1pres_esh(nea_esh(ibdy,ne,7))=
     &                            fibm1pres_esh(nea_esh(ibdy,ne,7))+
     &                                 tmpv3(1)*area(ibdy,ne)/3.0
             fibm1pres_esh(nea_esh(ibdy,ne,8))=
     &                            fibm1pres_esh(nea_esh(ibdy,ne,8))+
     &                                 tmpv3(1)*area(ibdy,ne)/3.0

             fibm2cont_esh(nea_esh(ibdy,ne,4))=
     &                            fibm2cont_esh(nea_esh(ibdy,ne,4))+
     &                                 tmpv3(2)*tmpv1x(1)
             fibm2cont_esh(nea_esh(ibdy,ne,7))=
     &                            fibm2cont_esh(nea_esh(ibdy,ne,7))+
     &                                 tmpv3(2)*tmpv1x(2)
             fibm2cont_esh(nea_esh(ibdy,ne,8))=
     &                            fibm2cont_esh(nea_esh(ibdy,ne,8))+
     &                                 tmpv3(2)*tmpv1x(3)
             fibm2pres_esh(nea_esh(ibdy,ne,4))=
     &                            fibm2pres_esh(nea_esh(ibdy,ne,4))+
     &                                 tmpv3(2) *area(ibdy,ne)/3.0
             fibm2pres_esh(nea_esh(ibdy,ne,7))=
     &                            fibm2pres_esh(nea_esh(ibdy,ne,7))+
     &                                 tmpv3(2)  *area(ibdy,ne)/3.0
             fibm2pres_esh(nea_esh(ibdy,ne,8))=
     &                            fibm2pres_esh(nea_esh(ibdy,ne,8))+
     &                                 tmpv3(2)  *area(ibdy,ne)/3.0

             fibm3cont_esh(nea_esh(ibdy,ne,4))=
     &                            fibm3cont_esh(nea_esh(ibdy,ne,4))+
     &                                 tmpv3(3)*tmpv1x(1)
             fibm3cont_esh(nea_esh(ibdy,ne,7))=
     &                            fibm3cont_esh(nea_esh(ibdy,ne,7))+
     &                                 tmpv3(3)*tmpv1x(2)
             fibm3cont_esh(nea_esh(ibdy,ne,8))=
     &                            fibm3cont_esh(nea_esh(ibdy,ne,8))+
     &                                 tmpv3(3)*tmpv1x(3)

             fibm3pres_esh(nea_esh(ibdy,ne,4))=
     &                            fibm3pres_esh(nea_esh(ibdy,ne,4))+
     &                                 tmpv3(3)  *area(ibdy,ne)/3.0
             fibm3pres_esh(nea_esh(ibdy,ne,7))=
     &                            fibm3pres_esh(nea_esh(ibdy,ne,7))+
     &                                 tmpv3(3)  *area(ibdy,ne)/3.0
             fibm3pres_esh(nea_esh(ibdy,ne,8))=
     &                            fibm3pres_esh(nea_esh(ibdy,ne,8))+
     &                                 tmpv3(3)  *area(ibdy,ne)/3.0
             endif
             if(nea_esh(ibdy,ne,4) .le. ns_ibm_r_esh(ibdy))
     &       areapnt_esh(ibdy,nea_esh(ibdy,ne,4))=
     &                  areapnt_esh(ibdy,nea_esh(ibdy,ne,4))
     &                                   +area(ibdy,ne)/3.0
             if(nea_esh(ibdy,ne,7) .le. ns_ibm_r_esh(ibdy))
     &        areapnt_esh(ibdy,nea_esh(ibdy,ne,7))=
     &                  areapnt_esh(ibdy,nea_esh(ibdy,ne,7))
     &                                   +area(ibdy,ne)/3.0
             if(nea_esh(ibdy,ne,8) .le. ns_ibm_r_esh(ibdy))
     &       areapnt_esh(ibdy,nea_esh(ibdy,ne,8))=
     &                  areapnt_esh(ibdy,nea_esh(ibdy,ne,8))
     &                                   +area(ibdy,ne)/3.0

!             xpnt_esh(ibdy,nea_esh(ibdy,ne,4))=
!     &                  xpnt_esh(ibdy,nea_esh(ibdy,ne,4))
!     &                                 +tmpv1x(1)
!             xpnt_esh(ibdy,nea_esh(ibdy,ne,7))=
!     &                  xpnt_esh(ibdy,nea_esh(ibdy,ne,7))
!     &                                 +tmpv1x(2)
!             xpnt_esh(ibdy,nea_esh(ibdy,ne,8))=
!     &                  xpnt_esh(ibdy,nea_esh(ibdy,ne,8))
!     &                                 +tmpv1x(3)

        else
             noj=itype+1
             if (ExternalPressureFlag(ibdyg)) then
             fibm1cont_esh(nea_esh(ibdy,ne,1))=
     &                            fibm1cont_esh(nea_esh(ibdy,ne,1))+
     &                                 tmpv3(1)*tmpv1x(1)
             fibm1cont_esh(nea_esh(ibdy,ne,2))=
     &                            fibm1cont_esh(nea_esh(ibdy,ne,2))+
     &                                 tmpv3(1)*tmpv1x(2)
             fibm1cont_esh(nea_esh(ibdy,ne,noj))=
     &                            fibm1cont_esh(nea_esh(ibdy,ne,noj))+
     &                                 tmpv3(1)*tmpv1x(3)

             fibm1pres_esh(nea_esh(ibdy,ne,1))=
     &                            fibm1pres_esh(nea_esh(ibdy,ne,1))+
     &                                 tmpv3(1)  *area(ibdy,ne)/3.0
             fibm1pres_esh(nea_esh(ibdy,ne,2))=
     &                            fibm1pres_esh(nea_esh(ibdy,ne,2))+
     &                                 tmpv3(1)  *area(ibdy,ne)/3.0
             fibm1pres_esh(nea_esh(ibdy,ne,noj))=
     &                            fibm1pres_esh(nea_esh(ibdy,ne,noj))+
     &                                 tmpv3(1)  *area(ibdy,ne)/3.0

             fibm2cont_esh(nea_esh(ibdy,ne,1))=
     &                            fibm2cont_esh(nea_esh(ibdy,ne,1))+
     &                                 tmpv3(2)*tmpv1x(1)
             fibm2cont_esh(nea_esh(ibdy,ne,2))=
     &                            fibm2cont_esh(nea_esh(ibdy,ne,2))+
     &                                 tmpv3(2)*tmpv1x(2)
             fibm2cont_esh(nea_esh(ibdy,ne,noj))=
     &                            fibm2cont_esh(nea_esh(ibdy,ne,noj))+
     &                                 tmpv3(2)*tmpv1x(3)

             fibm2pres_esh(nea_esh(ibdy,ne,1))=
     &                            fibm2pres_esh(nea_esh(ibdy,ne,1))+
     &                                 tmpv3(2)  *area(ibdy,ne)/3.0
             fibm2pres_esh(nea_esh(ibdy,ne,2))=
     &                            fibm2pres_esh(nea_esh(ibdy,ne,2))+
     &                                 tmpv3(2)  *area(ibdy,ne)/3.0
             fibm2pres_esh(nea_esh(ibdy,ne,noj))=
     &                            fibm2pres_esh(nea_esh(ibdy,ne,noj))+
     &                                 tmpv3(2)  *area(ibdy,ne)/3.0

             fibm3cont_esh(nea_esh(ibdy,ne,1))=
     &                            fibm3cont_esh(nea_esh(ibdy,ne,1))+
     &                                 tmpv3(3)*tmpv1x(1)

             fibm3cont_esh(nea_esh(ibdy,ne,2))=
     &                            fibm3cont_esh(nea_esh(ibdy,ne,2))+
     &                                 tmpv3(3)*tmpv1x(2)

             fibm3cont_esh(nea_esh(ibdy,ne,noj))=
     &                           fibm3cont_esh(nea_esh(ibdy,ne,noj))+
     &                                 tmpv3(3)*tmpv1x(3)

             fibm3pres_esh(nea_esh(ibdy,ne,1))=
     &                            fibm3pres_esh(nea_esh(ibdy,ne,1))+
     &                                 tmpv3(3)  *area(ibdy,ne)/3.0
             fibm3pres_esh(nea_esh(ibdy,ne,2))=
     &                            fibm3pres_esh(nea_esh(ibdy,ne,2))+
     &                                 tmpv3(3) *area(ibdy,ne)/3.0
             fibm3pres_esh(nea_esh(ibdy,ne,noj))=
     &                           fibm3pres_esh(nea_esh(ibdy,ne,noj))+
     &                                 tmpv3(3)  *area(ibdy,ne)/3.0
           endif

             if(nea_esh(ibdy,ne,1) .le. ns_ibm_r_esh(ibdy))
     &       areapnt_esh(ibdy,nea_esh(ibdy,ne,1))=
     &                  areapnt_esh(ibdy,nea_esh(ibdy,ne,1))
     &                                   +area(ibdy,ne)/3.0
             if(nea_esh(ibdy,ne,2) .le. ns_ibm_r_esh(ibdy))
     &       areapnt_esh(ibdy,nea_esh(ibdy,ne,2))=
     &                  areapnt_esh(ibdy,nea_esh(ibdy,ne,2))
     &                                   +area(ibdy,ne)/3.0
             if(nea_esh(ibdy,ne,3) .le. ns_ibm_r_esh(ibdy))
     &       areapnt_esh(ibdy,nea_esh(ibdy,ne,noj))=
     &                  areapnt_esh(ibdy,nea_esh(ibdy,ne,noj))
     &                                   +area(ibdy,ne)/3.0


!             xpnt_esh(ibdy,nea_esh(ibdy,ne,1))=
!     &                  xpnt_esh(ibdy,nea_esh(ibdy,ne,1))
!     &                                 +tmpv1x(1)
!             xpnt_esh(ibdy,nea_esh(ibdy,ne,2))=
!     &                  xpnt_esh(ibdy,nea_esh(ibdy,ne,2))
!     &                                 +tmpv1x(2)
!             xpnt_esh(ibdy,nea_esh(ibdy,ne,noj))=
!     &                  xpnt_esh(ibdy,nea_esh(ibdy,ne,noj))
!     &                                 +tmpv1x(3)

         endif

         mass=0.0
         ks=0.0
         kb=0.0

         Forcetemp1=0.0

         do i=1,ngau
            wei_i=wei(i)
            s(1,1:ntype)=nn(jtype,i,1:ntype)
            dsdv(1,1:ntype)=dnndv(jtype,i,1:ntype)
            dsdv(2,1:ntype)=dnndw(jtype,i,1:ntype)
            ddsdvdv(1,1:ntype)=ddnndvdv(jtype,i,1:ntype)
            ddsdvdv(2,1:ntype)=ddnndvdw(jtype,i,1:ntype)
            ddsdvdv(3,1:ntype)=ddnndwdw(jtype,i,1:ntype)

             do noi=1,2
               do noj=1,2
                  jmat(noj,noi)=
     &              dot_product(dsdv(noj,1:ntype),sx(noi,1:ntype))
               end do
               do noj=1,3
                  gmat(noj,noi)=
     &              dot_product(ddsdvdv(noj,1:ntype),sx(noi,1:ntype))
               end do
             end do 
             hmat(1,1)= jmat(1,1)**2
             hmat(2,1)= jmat(1,1)*jmat(2,1)
             hmat(3,1)= jmat(2,1)**2  
             hmat(1,2)= 2.0*jmat(1,1)*jmat(1,2)
             hmat(2,2)= jmat(1,1)*jmat(2,2)+jmat(1,2)*jmat(2,1)
             hmat(3,2)= 2.0*jmat(2,1)*jmat(2,2) 
             hmat(1,3)= jmat(1,2)**2
             hmat(2,3)= jmat(1,2)*jmat(2,2)
             hmat(3,3)= jmat(2,2)**2  

             wei_i=wei_i
     &             *abs(jmat(1,1)*jmat(2,2)-jmat(1,2)*jmat(2,1))

             call invert(jmat,2)
             call invert(hmat,3)
  
             amat1(1:2,1:ntype)=matmul(jmat,dsdv(1:2,1:ntype))
             amat2(1:3,1:ntype)=matmul(gmat,amat1(1:2,1:ntype))   ! shape for memebrane effect
             amat2(1:3,1:ntype)=ddsdvdv(1:3,1:ntype)-amat2(1:3,1:ntype)
             amat2(1:3,1:ntype)=matmul(hmat,amat2(1:3,1:ntype)) !shape for bending part

             do noj=1,3
                xpos(noj)=dot_product(s(1,1:ntype),x(1:ntype,noj))
                do noi=1,2
                   dxpos(noi,noj)=
     &               dot_product(amat1(noi,1:ntype),x(1:ntype,noj))
                end do
                do noi=1,3
                   d2xpos(noi,noj)=
     &             dot_product(amat2(noi,1:ntype),x(1:ntype,noj))
                end do
             end do

            call crossvec(dnxpos(1:3),dxpos(1,1:3),dxpos(2,1:3))

! a_ab
            ametric(1)=dot_product(dxpos(1,1:3),dxpos(1,1:3))
            ametric(2)=dot_product(dxpos(1,1:3)  ,dxpos(2,1:3))
            ametric(3)=dot_product(dxpos(2,1:3),dxpos(2,1:3))

! b_ab
            bmetric(1)=dot_product(d2xpos(1,1:3),dnxpos(1:3))
            bmetric(2)=dot_product(d2xpos(2,1:3),dnxpos(1:3))
            bmetric(3)=dot_product(d2xpos(3,1:3),dnxpos(1:3))


         do ih=1,ngau_h
!            epsMetric(1:3)=0.5*(ametric(1:3)-ametricO(ne,i,ih,1:3))
!            kapaMetric(1:3)=bmetric(1:3)-bmetricO(ne,i,ih,1:3)
!             EMetric(1:3)=epsMetric(1:3)+theta3*kapaMetric(1:3)
             C33_old=1.0
             weih_i=wei_h(ih)  
             theta3=Phi_mem_coef(ibdyg,1)/2.0*gau_h(ih)
             gmetric_cov(1,1)=ametric(1)-2.0*theta3*bmetric(1)
             gmetric_cov(2,2)=ametric(3)-2.0*theta3*bmetric(3)
             gmetric_cov(1,2)=ametric(2)-2.0*theta3*bmetric(2)
             gmetric_cov(2,1)=gmetric_cov(2,2)
             CauchyGreen_C=0.0
             CauchyGreen_C(1:2,1:2)=gmetric_cov(1:2,1:2)

             do noj=1,3
               gmetric_con0(1:2,noj)
     &               =gmetric_con0SAVE_esh(ibdy,ne,i,ih,1:2,noj) 
             enddo
             gmetric_con(1:2,1:2)= gmetric_cov(1:2,1:2)
             call invert(gmetric_con,2)
             CauchyGreen_Cbar=0.0
             CauchyGreen_Cbar(1:2,1:2)=gmetric_con(1:2,1:2)
             detC_inplane=
     &        sqrt(gmetric_cov(1,1)*gmetric_cov(2,2)
     &        -gmetric_cov(1,2)**2)/detC_inplane0SAVE_esh(ibdy,ne,i,ih)

             tracC_inplane
     &        =    gmetric_cov(1,1)*gmetric_con0(1,1)
     &        +    gmetric_cov(2,2)*gmetric_con0(2,2)
     &        +    gmetric_cov(1,2)*gmetric_con0(1,2)
     &        +    gmetric_cov(2,1)*gmetric_con0(2,1)

3421         CauchyGreen_C(3,3)=C33_old
             CauchyGreen_Cbar(3,3)=1.0/C33_old
             detC=sqrt(CauchyGreen_C(3,3))*detC_inplane
             tracC=tracC_inplane+CauchyGreen_C(3,3)

           if(Fibrous_Esh(ibdy ) .eq. 1) then
!read contravariant bases g^i
             q_contrav_bases0(1:2,1:3)=
     &                gbase_con0SAVE_esh(ibdy,ne,i,ih,1:2,1:3)   
             do noj=1,3
                xposFib(noj)=
     &           dot_product(s(1,1:ntype),x_FibVec(1:ntype,noj))
             end do
             temp_ibm3=sqrt(dot_product(xposFib(1:3),xposFib(1:3)))
             xposFib(1:3)=xposFib(1:3)/temp_ibm3
             xposFib_con(1)=dot_product(q_contrav_bases0(1,1:3)
     &                                   ,xposFib(1:3))
             xposFib_con(2)=dot_product(q_contrav_bases0(2,1:3)
     &                                   ,xposFib(1:3))
             do noj=1,2
               MatposFib_con(noj,1:2)=xposFib_con(noj)*xposFib_con(1:2)
             end do
           endif
  
! finding stress
           call USRDEFINED_materialModel(ibdyg
     &           ,Phi_mem_coef(ibdyg,1:15)
     &           ,gmetric_con0(1:2,1:2)
     &           ,CauchyGreen_C(3,3),CauchyGreen_Cbar(1:3,1:3)
     &           ,detC,tracC,detC_inplane,tracC_inplane
     &           ,Fibrous_Esh(ibdy),MatposFib_con(1:3,1:3)
     &           ,DiffPhi_C(1:3)
     &           ,DiffPhi_C33
     &           ,Diff2Phi_C(3,3)
     &           ,Diff2Phi_CC33(3)
     &           ,Diff2Phi_C33 )               
             
             if(comprerssibleflag_esh(ibdy).ne.0) then
                  temp_ibm3=1.0/detC_inplane**2
                  Smetric(1)=2.0*DiffPhi_C(1)
     &                     -2.0*DiffPhi_C33*temp_ibm3*gmetric_con(1,1)
                  Smetric(3)=2.0*DiffPhi_C(3)
     &                     -2.0*DiffPhi_C33*temp_ibm3*gmetric_con(2,2)
                  Smetric(2)=2.0*DiffPhi_C(2)
     &                     -2.0*DiffPhi_C33*temp_ibm3*gmetric_con(1,2)

                  CMAT(1,1)=4.0*Diff2Phi_C(1,1)
     &                     +4.0*(Diff2Phi_C33*temp_ibm3
     &                          -2.0*Diff2Phi_CC33(1))
     &                     *temp_ibm3
     &                     *gmetric_con(1,1)**2
     &                     +8.0*temp_ibm3*DiffPhi_C33
     &                     *gmetric_con(1,1)**2
                  CMAT(1,2)=4.0*Diff2Phi_C(1,2)
     &                     +4.0*Diff2Phi_C33*temp_ibm3**2
     &                     *gmetric_con(1,1)*gmetric_con(1,2)
     &                     -4.0*Diff2Phi_CC33(1)*temp_ibm3
     &                     *gmetric_con(1,2)
     &                     -4.0*Diff2Phi_CC33(2)*temp_ibm3
     &                     *gmetric_con(1,1)
     &                     +8.0*DiffPhi_C33*temp_ibm3
     &                     *(gmetric_con(1,1)*gmetric_con(1,2))

                  CMAT(1,3)=4.0*Diff2Phi_C(1,3)
     &                     +4.0*Diff2Phi_C33*temp_ibm3**2
     &                     *gmetric_con(1,1)*gmetric_con(2,2)
     &                     -4.0*Diff2Phi_CC33(1)*temp_ibm3
     &                     *gmetric_con(2,2)
     &                     -4.0*Diff2Phi_CC33(3)*temp_ibm3
     &                     *gmetric_con(1,1)
     &                     +2.0*DiffPhi_C33*temp_ibm3
     &                     *(2.0*gmetric_con(1,1)*gmetric_con(2,2)
     &                      +2.0*gmetric_con(1,2)**2  )

                  CMAT(2,2)=4.0*Diff2Phi_C(2,2)
     &                     +4.0*Diff2Phi_C33*temp_ibm3**2
     &                     *gmetric_con(1,2)**2
     &                     -8.0*Diff2Phi_CC33(2)*temp_ibm3
     &                     +2.0*DiffPhi_C33*temp_ibm3
     &                     *(3.0*gmetric_con(1,2)**2
     &                      +1.0*gmetric_con(1,1)*gmetric_con(2,2)  )
                  CMAT(2,3)=4.0*Diff2Phi_C(2,3)
     &                     +4.0*Diff2Phi_C33*temp_ibm3**2
     &                     *gmetric_con(1,2)*gmetric_con(2,2)
     &                     -4.0*Diff2Phi_CC33(3)*temp_ibm3
     &                     *gmetric_con(1,2)
     &                     -4.0*Diff2Phi_CC33(2)*temp_ibm3
     &                     *gmetric_con(2,2)
     &                     +8.0*DiffPhi_C33*temp_ibm3
     &                     *(gmetric_con(2,2)*gmetric_con(1,2))

                  CMAT(3,3)=4.0*Diff2Phi_C(3,3)
     &                     +4.0*(Diff2Phi_C33*temp_ibm3
     &                          -2.0*Diff2Phi_CC33(3))
     &                     *temp_ibm3
     &                     *gmetric_con(2,2)**2
     &                     +8.0*temp_ibm3*DiffPhi_C33
     &                     *gmetric_con(2,2)**2
                 CMAT(2,1)=CMAT(1,2) 
                 CMAT(3,1)=CMAT(1,3)
                 CMAT(3,2)=CMAT(2,3)
             else
                  Sstress33 =2.0*DiffPhi_C33
                  CMAT33   =4.0*Diff2Phi_C33

                  dC33_old=-2.0*Sstress33/CMAT33  
                  C33_old=C33_old+dC33_old
                  if (abs(dC33_old) .gt. 1e-6) goto 3421

                  Smetric(1)=2.0*DiffPhi_C(1)
                  Smetric(3)=2.0*DiffPhi_C(3)
                  Smetric(2)=2.0*DiffPhi_C(2)


                  CMAT(1,1)=4.0*Diff2Phi_C(1,1)

                  CMAT(1,2)=4.0*Diff2Phi_C(1,2)

                  CMAT(1,3)=4.0*Diff2Phi_C(1,3)


                  CMAT(2,2)=4.0*Diff2Phi_C(2,2)

                  CMAT(2,3)=4.0*Diff2Phi_C(2,3)

                  CMAT(3,3)=4.0*Diff2Phi_C(3,3)


                  CMATi3(1)  = Diff2Phi_CC33(1)
                  CMATi3(2)  = Diff2Phi_CC33(2)
                  CMATi3(3)  = Diff2Phi_CC33(3)
                 
                  CMAT(1,1)=CMAT(1,1)-CMATi3(1)**2/CMAT33
                  CMAT(1,2)=CMAT(1,2)-CMATi3(1)*CMATi3(2)/CMAT33
                  CMAT(1,3)=CMAT(1,3)-CMATi3(1)*CMATi3(3)/CMAT33
                  CMAT(2,2)=CMAT(2,2)-CMATi3(2)**2/CMAT33
                  CMAT(2,3)=CMAT(2,3)-CMATi3(2)*CMATi3(3)/CMAT33   
                  CMAT(3,3)=CMAT(3,3)-CMATi3(3)**2/CMAT33   
                  CMAT(2,1)=CMAT(1,2) 
                  CMAT(3,1)=CMAT(1,3)
                  CMAT(3,2)=CMAT(2,3)       
             endif
             nmatMetric(1:3)=nmatMetric(1:3)+Smetric(1:3)*weih_i
             mmatMetric(1:3)=mmatMetric(1:3)+Smetric(1:3)*theta3*weih_i
             DmatMetric(1,1:3,1:3)=
     &           DmatMetric(1,1:3,1:3)+CMAT(1:3,1:3)*weih_i
             DmatMetric(2,1:3,1:3)=
     &           DmatMetric(2,1:3,1:3)+CMAT(1:3,1:3)*theta3*weih_i             
             DmatMetric(3,1:3,1:3)=
     &           DmatMetric(3,1:3,1:3)+CMAT(1:3,1:3)*theta3**2*weih_i 
         enddo !ih=1,ngau_h     
         
! required mats for linearization
           amat1T(1:ntype,1:2)=transpose(amat1(1:2,1:ntype))
           Da_ab_Drs(1,1:ntype,1:ntype)=
     &           matmul(amat1T(1:ntype,1:1),amat1(1:1,1:ntype))
           Da_ab_Drs(2,1:ntype,1:ntype)=
     &           matmul(amat1T(1:ntype,1:1),amat1(2:2,1:ntype))
     &          +matmul(amat1T(1:ntype,2:2),amat1(1:1,1:ntype))
           Da_ab_Drs(3,1:ntype,1:ntype)=
     &           matmul(amat1T(1:ntype,2:2),amat1(2:2,1:ntype))

         call crossvec_noscale(
     &            avectmp0(1:3),dxpos(1,1:3),dxpos(2,1:3))
         
         abar3inv=1.0/sqrt(dot_product(avectmp0(1:3),avectmp0(1:3)))

         do noi=1,3
           noj=1
           Da_ab_Dr(noj,1:ntype)=
     &           2.0*amat1(1,1:ntype)*dxpos(1,noi)
           noj=2
           Da_ab_Dr(noj,1:ntype)=
     &           (amat1(1,1:ntype)*dxpos(2,noi)
     &           +amat1(2,1:ntype)*dxpos(1,noi))
           noj=3
           Da_ab_Dr(noj,1:ntype)=
     &           2.0*amat1(2,1:ntype)*dxpos(2,noi)

           avectmp1(1:3)=0.0;avectmp1(noi)=1.0 
           call crossvec_noscale(
     &            avectmp2(1:3),avectmp1(1:3),dxpos(2,1:3))
           call crossvec_noscale(
     &            avectmp3(1:3),dxpos(1,1:3),avectmp1(1:3))    
           do noj=1,3
           a3tilde_Dr(1:ntype,noj)=(avectmp2(noj)*amat1(1,1:ntype)
     &                           +avectmp3(noj)*amat2(1,1:ntype))
           enddo
           do k=1,3
             avectmp1b(1:3)=0.0;avectmp1b(k)=1.0 
             call crossvec_noscale(
     &            avectmp2b(1:3),avectmp1(1:3),avectmp1b(1:3))
              call crossvec_noscale(
     &            avectmp3b(1:3),avectmp1b(1:3),avectmp1(1:3)) 
                 a3tilde_Drs(1:ntype,1:ntype,k)=
     &                           (avectmp2b(k)
     &                           *matmul(amat1T(1:ntype,1:1)
     &                                            ,amat1(2:2,1:ntype))
     &                           +avectmp3b(k)
     &                           *matmul(amat1T(1:ntype,2:2)
     &                                            ,amat1(1:1,1:ntype)) )
           enddo
           do k=1,ntype
             a3bar_Dr(k)=dot_product(dnxpos(1:3),a3tilde_Dr(k,1:3))
             do j2=1,ntype
                a3bar_Drs(k,j)= abar3inv* (
     &            dot_product(a3tilde_Drs(k,j,1:3),avectmp0(1:3))  
     &           +dot_product(a3tilde_Dr(k,1:3),a3tilde_Dr(j2,1:3))  
     &           -dot_product(a3tilde_Dr(k,1:3),avectmp0(1:3)) 
     &           *dot_product(a3tilde_Dr(j,1:3),avectmp0(1:3)) )
             enddo 
           enddo
           do noj=1,3
           a3_Dr(1:ntype,noj)=abar3inv*( 
     &           a3tilde_Dr(1:ntype,noj)
     &          -a3bar_Dr(1:ntype)*dnxpos(noj))
           do k=1,ntype
              a3_Drs(1:ntype,k,noj)=abar3inv*( 
     &           a3tilde_Drs(1:ntype,k,noj)
     &          -a3bar_Drs(1:ntype,k)*dnxpos(noj)) 
     &          +abar3inv**2*(   
     &             2.0*a3bar_Dr(1:ntype)*a3bar_Dr(k)*dnxpos(noj)
     &            -a3bar_Dr(1:ntype)*a3tilde_Dr(k,noj)
     &            -a3bar_Dr(k)*a3tilde_Dr(1:ntype,noj))
           enddo
           enddo
           do noj=1,3
               Db_ab_Dr(noj,1:ntype)=amat2(noj,1:ntype)*dnxpos(noi)
     &                             +d2xpos(noj,noi)*a3_Dr(1:ntype,noj)
           enddo
           do noj=1,3
           do k=1,ntype
               do j2=1,3
                  if(j2.eq.noi) then
                  Db_ab_Drs(noj,j2,1:ntype,k)=
     &                     amat2(noj,1:ntype)*a3_Dr(k,noi)
     &                    +a3_Dr(1:ntype,noi)*amat2(noj,k)*(
     &                     d2xpos(1,noi)*a3_Drs(1:ntype,k,1)
     &                    +d2xpos(2,noi)*a3_Drs(1:ntype,k,2)
     &                    +d2xpos(3,noi)*a3_Drs(1:ntype,k,3))
                   else
                  Db_ab_Drs(noj,j2,1:ntype,k)=
     &                     a3_Dr(1:ntype,noi)*amat2(noj,k)*(
     &                     d2xpos(1,noi)*a3_Drs(1:ntype,k,1)
     &                    +d2xpos(2,noi)*a3_Drs(1:ntype,k,2)
     &                    +d2xpos(3,noi)*a3_Drs(1:ntype,k,3))
                   endif
               enddo
           enddo
           enddo
           Depsilon_ab_r(1:3,noi,1:ntype)=0.5*Da_ab_Dr(1:3,1:ntype)
           Depsilon_ab_rs(1:3,noi,1:ntype,1:ntype)=
     &                     0.5*Da_ab_Drs(1:3,1:ntype,1:ntype)
           Dkappa_ab_r(1:3,noi,1:ntype)=-Db_ab_Dr(1:3,1:ntype)
           do noj=1,3
               do j2=1,3
                   Dkappa_ab_rs(noj,noi,j2,1:ntype,1:ntype)=
     &                     -Db_ab_Drs(noj,j2,1:ntype,1:ntype)
               enddo
           enddo
         enddo

         do noi=1,3
          temp_ibmtype=0.0
          do k=1,3
             temp_ibmtype(1:ntype)
     &            =nmatMetric(k)*Depsilon_ab_r(k,noi,1:ntype)
     &            +mmatMetric(k)*Dkappa_ab_r(k,noi,1:ntype)
          enddo
          Forcetemp1(noi,1:ntype)=Forcetemp1(noi,1:ntype)
     &            +wei_i*temp_ibmtype(1:ntype)
         enddo

!k11
         temp_ibmtype2(1:ntype,1:3)
     &         =transpose(
     &            matmul(DmatMetric(1,1:3,1:3)
     &            ,Depsilon_ab_r(1:3,1,1:ntype))
     &         +matmul(DmatMetric(2,1:3,1:3)
     &            ,Dkappa_ab_r(1:3,1,1:ntype))
     &            )

          temp_ibmtype3=0.0
          do k=1,3
             temp_ibmtype3(1:ntype,1:ntype)
     &      =temp_ibmtype3(1:ntype,1:ntype)
     &      +matmul(temp_ibmtype2(1:ntype,k:k)
     &             ,Depsilon_ab_r(k:k,1,1:ntype))
          enddo

         kb11(1:ntype,1:ntype)=
     &             wei_i*temp_ibmtype3(1:ntype,1:ntype)

          temp_ibmtype3=0.0
          do k=1,3
             temp_ibmtype3(1:ntype,1:ntype)
     &      =temp_ibmtype3(1:ntype,1:ntype)
     &      + Depsilon_ab_rs(k,1,1:ntype,1:ntype)
     &        *nmatMetric(k)
     &      + Dkappa_ab_rs(k,1,1,1:ntype,1:ntype)
     &        *mmatMetric(k)
          enddo

         kb11(1:ntype,1:ntype)=
     &   kb11(1:ntype,1:ntype)+
     &             wei_i*temp_ibmtype3(1:ntype,1:ntype)

         temp_ibmtype2(1:ntype,1:3)
     &         =transpose(
     &            matmul(DmatMetric(2,1:3,1:3)
     &            ,Depsilon_ab_r(1:3,1,1:ntype))
     &         +matmul(DmatMetric(3,1:3,1:3)
     &            ,Dkappa_ab_r(1:3,1,1:ntype))
     &            )

          temp_ibmtype3=0.0
          do k=1,3
             temp_ibmtype3(1:ntype,1:ntype)
     &      =temp_ibmtype3(1:ntype,1:ntype)
     &      +matmul(temp_ibmtype2(1:ntype,k:k)
     &             ,Dkappa_ab_r(k:k,1,1:ntype))
          enddo
         kb11(1:ntype,1:ntype)=
     &   kb11(1:ntype,1:ntype)+
     &             wei_i*temp_ibmtype3(1:ntype,1:ntype)


!k12
         temp_ibmtype2(1:ntype,1:3)
     &         =transpose(
     &            matmul(DmatMetric(1,1:3,1:3)
     &            ,Depsilon_ab_r(1:3,2,1:ntype))
     &         +matmul(DmatMetric(2,1:3,1:3)
     &            ,Dkappa_ab_r(1:3,2,1:ntype))
     &            )

          temp_ibmtype3=0.0
          do k=1,3
             temp_ibmtype3(1:ntype,1:ntype)
     &      =temp_ibmtype3(1:ntype,1:ntype)
     &      +matmul(temp_ibmtype2(1:ntype,k:k)
     &             ,Depsilon_ab_r(k:k,1,1:ntype))
          enddo

         kb12(1:ntype,1:ntype)=
     &             wei_i*temp_ibmtype3(1:ntype,1:ntype)

          temp_ibmtype3=0.0
          do k=1,3
             temp_ibmtype3(1:ntype,1:ntype)
     &      =temp_ibmtype3(1:ntype,1:ntype)
     &      + Dkappa_ab_rs(k,1,2,1:ntype,1:ntype)
     &        *mmatMetric(k)
          enddo

         kb12(1:ntype,1:ntype)=
     &   kb12(1:ntype,1:ntype)+
     &             wei_i*temp_ibmtype3(1:ntype,1:ntype)

         temp_ibmtype2(1:ntype,1:3)
     &         =transpose(
     &            matmul(DmatMetric(2,1:3,1:3)
     &            ,Depsilon_ab_r(1:3,2,1:ntype))
     &         +matmul(DmatMetric(3,1:3,1:3)
     &            ,Dkappa_ab_r(1:3,2,1:ntype))
     &            )

          temp_ibmtype3=0.0
          do k=1,3
             temp_ibmtype3(1:ntype,1:ntype)
     &      =temp_ibmtype3(1:ntype,1:ntype)
     &      +matmul(temp_ibmtype2(1:ntype,k:k)
     &             ,Dkappa_ab_r(k:k,1,1:ntype))
          enddo
         kb12(1:ntype,1:ntype)=
     &   kb12(1:ntype,1:ntype)+
     &             wei_i*temp_ibmtype3(1:ntype,1:ntype)


!k13
         temp_ibmtype2(1:ntype,1:3)
     &         =transpose(
     &            matmul(DmatMetric(1,1:3,1:3)
     &            ,Depsilon_ab_r(1:3,3,1:ntype))
     &         +matmul(DmatMetric(2,1:3,1:3)
     &            ,Dkappa_ab_r(1:3,3,1:ntype))
     &            )

          temp_ibmtype3=0.0
          do k=1,3
             temp_ibmtype3(1:ntype,1:ntype)
     &      =temp_ibmtype3(1:ntype,1:ntype)
     &      +matmul(temp_ibmtype2(1:ntype,k:k)
     &             ,Depsilon_ab_r(k:k,1,1:ntype))
          enddo

         kb13(1:ntype,1:ntype)=
     &             wei_i*temp_ibmtype3(1:ntype,1:ntype)

          temp_ibmtype3=0.0
          do k=1,3
             temp_ibmtype3(1:ntype,1:ntype)
     &      =temp_ibmtype3(1:ntype,1:ntype)
     &      + Dkappa_ab_rs(k,1,3,1:ntype,1:ntype)
     &        *mmatMetric(k)
          enddo

         kb13(1:ntype,1:ntype)=
     &   kb13(1:ntype,1:ntype)+
     &             wei_i*temp_ibmtype3(1:ntype,1:ntype)

         temp_ibmtype2(1:ntype,1:3)
     &         =transpose(
     &            matmul(DmatMetric(2,1:3,1:3)
     &            ,Depsilon_ab_r(1:3,3,1:ntype))
     &         +matmul(DmatMetric(3,1:3,1:3)
     &            ,Dkappa_ab_r(1:3,3,1:ntype))
     &            )

          temp_ibmtype3=0.0
          do k=1,3
             temp_ibmtype3(1:ntype,1:ntype)
     &      =temp_ibmtype3(1:ntype,1:ntype)
     &      +matmul(temp_ibmtype2(1:ntype,k:k)
     &             ,Dkappa_ab_r(k:k,1,1:ntype))
          enddo
         kb13(1:ntype,1:ntype)=
     &   kb13(1:ntype,1:ntype)+
     &             wei_i*temp_ibmtype3(1:ntype,1:ntype)


!k21
         temp_ibmtype2(1:ntype,1:3)
     &         =transpose(
     &            matmul(DmatMetric(1,1:3,1:3)
     &            ,Depsilon_ab_r(1:3,1,1:ntype))
     &         +matmul(DmatMetric(2,1:3,1:3)
     &            ,Dkappa_ab_r(1:3,1,1:ntype))
     &            )

          temp_ibmtype3=0.0
          do k=1,3
             temp_ibmtype3(1:ntype,1:ntype)
     &      =temp_ibmtype3(1:ntype,1:ntype)
     &      +matmul(temp_ibmtype2(1:ntype,k:k)
     &             ,Depsilon_ab_r(k:k,2,1:ntype))
          enddo

         kb11(1:ntype,1:ntype)=
     &             wei_i*temp_ibmtype3(1:ntype,1:ntype)

          temp_ibmtype3=0.0
          do k=1,3
             temp_ibmtype3(1:ntype,1:ntype)
     &      =temp_ibmtype3(1:ntype,1:ntype)
     &      + Dkappa_ab_rs(k,2,1,1:ntype,1:ntype)
     &        *mmatMetric(k)
          enddo

         kb11(1:ntype,1:ntype)=
     &   kb11(1:ntype,1:ntype)+
     &             wei_i*temp_ibmtype3(1:ntype,1:ntype)

         temp_ibmtype2(1:ntype,1:3)
     &         =transpose(
     &            matmul(DmatMetric(2,1:3,1:3)
     &            ,Depsilon_ab_r(1:3,1,1:ntype))
     &         +matmul(DmatMetric(3,1:3,1:3)
     &            ,Dkappa_ab_r(1:3,1,1:ntype))
     &            )

          temp_ibmtype3=0.0
          do k=1,3
             temp_ibmtype3(1:ntype,1:ntype)
     &      =temp_ibmtype3(1:ntype,1:ntype)
     &      +matmul(temp_ibmtype2(1:ntype,k:k)
     &             ,Dkappa_ab_r(k:k,2,1:ntype))
          enddo
         kb11(1:ntype,1:ntype)=
     &   kb11(1:ntype,1:ntype)+
     &             wei_i*temp_ibmtype3(1:ntype,1:ntype)


!k22
         temp_ibmtype2(1:ntype,1:3)
     &         =transpose(
     &            matmul(DmatMetric(1,1:3,1:3)
     &            ,Depsilon_ab_r(1:3,2,1:ntype))
     &         +matmul(DmatMetric(2,1:3,1:3)
     &            ,Dkappa_ab_r(1:3,2,1:ntype))
     &            )

          temp_ibmtype3=0.0
          do k=1,3
             temp_ibmtype3(1:ntype,1:ntype)
     &      =temp_ibmtype3(1:ntype,1:ntype)
     &      +matmul(temp_ibmtype2(1:ntype,k:k)
     &             ,Depsilon_ab_r(k:k,2,1:ntype))
          enddo

         kb12(1:ntype,1:ntype)=
     &             wei_i*temp_ibmtype3(1:ntype,1:ntype)

          temp_ibmtype3=0.0
          do k=1,3
             temp_ibmtype3(1:ntype,1:ntype)
     &      =temp_ibmtype3(1:ntype,1:ntype)
     &      + Depsilon_ab_rs(k,2,1:ntype,1:ntype)
     &        *nmatMetric(k)
     &      + Dkappa_ab_rs(k,2,2,1:ntype,1:ntype)
     &        *mmatMetric(k)
          enddo

         kb12(1:ntype,1:ntype)=
     &   kb12(1:ntype,1:ntype)+
     &             wei_i*temp_ibmtype3(1:ntype,1:ntype)

         temp_ibmtype2(1:ntype,1:3)
     &         =transpose(
     &            matmul(DmatMetric(2,1:3,1:3)
     &            ,Depsilon_ab_r(1:3,2,1:ntype))
     &         +matmul(DmatMetric(3,1:3,1:3)
     &            ,Dkappa_ab_r(1:3,2,1:ntype))
     &            )

          temp_ibmtype3=0.0
          do k=1,3
             temp_ibmtype3(1:ntype,1:ntype)
     &      =temp_ibmtype3(1:ntype,1:ntype)
     &      +matmul(temp_ibmtype2(1:ntype,k:k)
     &             ,Dkappa_ab_r(k:k,2,1:ntype))
          enddo
         kb12(1:ntype,1:ntype)=
     &   kb12(1:ntype,1:ntype)+
     &             wei_i*temp_ibmtype3(1:ntype,1:ntype)


!k23
         temp_ibmtype2(1:ntype,1:3)
     &         =transpose(
     &            matmul(DmatMetric(1,1:3,1:3)
     &            ,Depsilon_ab_r(1:3,3,1:ntype))
     &         +matmul(DmatMetric(2,1:3,1:3)
     &            ,Dkappa_ab_r(1:3,3,1:ntype))
     &            )

          temp_ibmtype3=0.0
          do k=1,3
             temp_ibmtype3(1:ntype,1:ntype)
     &      =temp_ibmtype3(1:ntype,1:ntype)
     &      +matmul(temp_ibmtype2(1:ntype,k:k)
     &             ,Depsilon_ab_r(k:k,2,1:ntype))
          enddo

         kb13(1:ntype,1:ntype)=
     &             wei_i*temp_ibmtype3(1:ntype,1:ntype)

          temp_ibmtype3=0.0
          do k=1,3
             temp_ibmtype3(1:ntype,1:ntype)
     &      =temp_ibmtype3(1:ntype,1:ntype)
     &      + Dkappa_ab_rs(k,2,3,1:ntype,1:ntype)
     &        *mmatMetric(k)
          enddo

         kb13(1:ntype,1:ntype)=
     &   kb13(1:ntype,1:ntype)+
     &             wei_i*temp_ibmtype3(1:ntype,1:ntype)

         temp_ibmtype2(1:ntype,1:3)
     &         =transpose(
     &            matmul(DmatMetric(2,1:3,1:3)
     &            ,Depsilon_ab_r(1:3,3,1:ntype))
     &         +matmul(DmatMetric(3,1:3,1:3)
     &            ,Dkappa_ab_r(1:3,3,1:ntype))
     &            )

          temp_ibmtype3=0.0
          do k=1,3
             temp_ibmtype3(1:ntype,1:ntype)
     &      =temp_ibmtype3(1:ntype,1:ntype)
     &      +matmul(temp_ibmtype2(1:ntype,k:k)
     &             ,Dkappa_ab_r(k:k,2,1:ntype))
          enddo
         kb13(1:ntype,1:ntype)=
     &   kb13(1:ntype,1:ntype)+
     &             wei_i*temp_ibmtype3(1:ntype,1:ntype)

!k31
         temp_ibmtype2(1:ntype,1:3)
     &         =transpose(
     &            matmul(DmatMetric(1,1:3,1:3)
     &            ,Depsilon_ab_r(1:3,1,1:ntype))
     &         +matmul(DmatMetric(2,1:3,1:3)
     &            ,Dkappa_ab_r(1:3,1,1:ntype))
     &            )

          temp_ibmtype3=0.0
          do k=1,3
             temp_ibmtype3(1:ntype,1:ntype)
     &      =temp_ibmtype3(1:ntype,1:ntype)
     &      +matmul(temp_ibmtype2(1:ntype,k:k)
     &             ,Depsilon_ab_r(k:k,3,1:ntype))
          enddo

         kb11(1:ntype,1:ntype)=
     &             wei_i*temp_ibmtype3(1:ntype,1:ntype)

          temp_ibmtype3=0.0
          do k=1,3
             temp_ibmtype3(1:ntype,1:ntype)
     &      =temp_ibmtype3(1:ntype,1:ntype)
     &      + Dkappa_ab_rs(k,3,1,1:ntype,1:ntype)
     &        *mmatMetric(k)
          enddo

         kb11(1:ntype,1:ntype)=
     &   kb11(1:ntype,1:ntype)+
     &             wei_i*temp_ibmtype3(1:ntype,1:ntype)

         temp_ibmtype2(1:ntype,1:3)
     &         =transpose(
     &            matmul(DmatMetric(2,1:3,1:3)
     &            ,Depsilon_ab_r(1:3,1,1:ntype))
     &         +matmul(DmatMetric(3,1:3,1:3)
     &            ,Dkappa_ab_r(1:3,1,1:ntype))
     &            )

          temp_ibmtype3=0.0
          do k=1,3
             temp_ibmtype3(1:ntype,1:ntype)
     &      =temp_ibmtype3(1:ntype,1:ntype)
     &      +matmul(temp_ibmtype2(1:ntype,k:k)
     &             ,Dkappa_ab_r(k:k,3,1:ntype))
          enddo
         kb11(1:ntype,1:ntype)=
     &   kb11(1:ntype,1:ntype)+
     &             wei_i*temp_ibmtype3(1:ntype,1:ntype)


!k32
         temp_ibmtype2(1:ntype,1:3)
     &         =transpose(
     &            matmul(DmatMetric(1,1:3,1:3)
     &            ,Depsilon_ab_r(1:3,2,1:ntype))
     &         +matmul(DmatMetric(2,1:3,1:3)
     &            ,Dkappa_ab_r(1:3,2,1:ntype))
     &            )

          temp_ibmtype3=0.0
          do k=1,3
             temp_ibmtype3(1:ntype,1:ntype)
     &      =temp_ibmtype3(1:ntype,1:ntype)
     &      +matmul(temp_ibmtype2(1:ntype,k:k)
     &             ,Depsilon_ab_r(k:k,3,1:ntype))
          enddo

         kb12(1:ntype,1:ntype)=
     &             wei_i*temp_ibmtype3(1:ntype,1:ntype)

          temp_ibmtype3=0.0
          do k=1,3
             temp_ibmtype3(1:ntype,1:ntype)
     &      =temp_ibmtype3(1:ntype,1:ntype)
     &      + Dkappa_ab_rs(k,3,2,1:ntype,1:ntype)
     &        *mmatMetric(k)
          enddo

         kb12(1:ntype,1:ntype)=
     &   kb12(1:ntype,1:ntype)+
     &             wei_i*temp_ibmtype3(1:ntype,1:ntype)

         temp_ibmtype2(1:ntype,1:3)
     &         =transpose(
     &            matmul(DmatMetric(2,1:3,1:3)
     &            ,Depsilon_ab_r(1:3,2,1:ntype))
     &         +matmul(DmatMetric(3,1:3,1:3)
     &            ,Dkappa_ab_r(1:3,2,1:ntype))
     &            )

          temp_ibmtype3=0.0
          do k=1,3
             temp_ibmtype3(1:ntype,1:ntype)
     &      =temp_ibmtype3(1:ntype,1:ntype)
     &      +matmul(temp_ibmtype2(1:ntype,k:k)
     &             ,Dkappa_ab_r(k:k,3,1:ntype))
          enddo
         kb12(1:ntype,1:ntype)=
     &   kb12(1:ntype,1:ntype)+
     &             wei_i*temp_ibmtype3(1:ntype,1:ntype)


!k33
         temp_ibmtype2(1:ntype,1:3)
     &         =transpose(
     &            matmul(DmatMetric(1,1:3,1:3)
     &            ,Depsilon_ab_r(1:3,3,1:ntype))
     &         +matmul(DmatMetric(2,1:3,1:3)
     &            ,Dkappa_ab_r(1:3,3,1:ntype))
     &            )

          temp_ibmtype3=0.0
          do k=1,3
             temp_ibmtype3(1:ntype,1:ntype)
     &      =temp_ibmtype3(1:ntype,1:ntype)
     &      +matmul(temp_ibmtype2(1:ntype,k:k)
     &             ,Depsilon_ab_r(k:k,1,1:ntype))
          enddo

         kb13(1:ntype,1:ntype)=
     &             wei_i*temp_ibmtype3(1:ntype,1:ntype)

          temp_ibmtype3=0.0
          do k=1,3
             temp_ibmtype3(1:ntype,1:ntype)
     &      =temp_ibmtype3(1:ntype,1:ntype)
     &      + Depsilon_ab_rs(k,3,1:ntype,1:ntype)
     &        *nmatMetric(k)
     &      + Dkappa_ab_rs(k,3,3,1:ntype,1:ntype)
     &        *mmatMetric(k)
          enddo

         kb13(1:ntype,1:ntype)=
     &   kb13(1:ntype,1:ntype)+
     &             wei_i*temp_ibmtype3(1:ntype,1:ntype)

         temp_ibmtype2(1:ntype,1:3)
     &         =transpose(
     &            matmul(DmatMetric(2,1:3,1:3)
     &            ,Depsilon_ab_r(1:3,3,1:ntype))
     &         +matmul(DmatMetric(3,1:3,1:3)
     &            ,Dkappa_ab_r(1:3,3,1:ntype))
     &            )

          temp_ibmtype3=0.0
          do k=1,3
             temp_ibmtype3(1:ntype,1:ntype)
     &      =temp_ibmtype3(1:ntype,1:ntype)
     &      +matmul(temp_ibmtype2(1:ntype,k:k)
     &             ,Dkappa_ab_r(k:k,3,1:ntype))
          enddo
         kb13(1:ntype,1:ntype)=
     &   kb13(1:ntype,1:ntype)+
     &             wei_i*temp_ibmtype3(1:ntype,1:ntype)


            call ecmat(ms(1:ntype,1:ntype),s(1,1:ntype),ntype,1)
              mass(1:ntype,1:ntype)=mass(1:ntype,1:ntype)
     &             +wei_i*ms(1:ntype,1:ntype)
         enddo !gauss
!============= upto here

           j=ns_ibm_r_esh(i)+ns_ibm_i_esh(i)
           do noi=1,ntype
              ntemi=nea_esh(ibdy,ne,noi)
              fibmRHS1_esh(ntemi)=fibmRHS1_esh(ntemi)
     &             +Forcetemp1(1,noi)
              fibmRHS2_esh(ntemi)=fibmRHS2_esh(ntemi)
     &             +Forcetemp1(2,noi)
              fibmRHS3_esh(ntemi)=fibmRHS3_esh(ntemi)
     &             +Forcetemp1(3,noi)
              do noj=1,ntype
                 ntemj=nea_esh(ibdy,ne,noj)
                 kkb(ntemi,ntemj)=kkb(ntemi,ntemj)
     &             +kb11(noi,noj)
                 kkb(ntemi,ntemj+j)=kkb(ntemi,ntemj+j)
     &             +kb12(noi,noj)
                 kkb(ntemi,ntemj+2*j)=kkb(ntemi,ntemj+2*j)
     &             +kb13(noi,noj)
                 kkb(ntemi+j,ntemj)=kkb(ntemi+j,ntemj)
     &             +kb21(noi,noj)
                 kkb(ntemi+j,ntemj+j)=kkb(ntemi+j,ntemj+j)
     &             +kb22(noi,noj)
                 kkb(ntemi+j,ntemj+2*j)=kkb(ntemi+j,ntemj+2*j)
     &             +kb23(noi,noj)
                 kkb(ntemi+2*j,ntemj)=kkb(ntemi+2*j,ntemj)
     &             +kb31(noi,noj)
                 kkb(ntemi+2*j,ntemj+j)=kkb(ntemi+2*j,ntemj+j)
     &             +kb32(noi,noj)
                 kkb(ntemi+2*j,ntemj+2*j)=kkb(ntemi+2*j,ntemj+2*j)
     &             +kb33(noi,noj)
               end do
            end do
           do noi=1,ntype
              ntemi=nea_esh(ibdy,ne,noi)
              do noj=1,ntype
                 ntemj=nea_esh(ibdy,ne,noj)
                 mms(ntemi,ntemj)=mms(ntemi,ntemj)
     &             +mass(noi,noj)
                end do
            end do
        end do  !element

         

!~~~~~~~~~~~~~~ Nodal oprator
        if (ExternalPressureFlag(ibdyg)) then

        i=ibdy  
        include "distIBM_normalPressure_fn.Fi"   !I need to readjust Fi file
        temp_ibm1=temp_ibm2*p_inflation
        do j=1,ns_ibm_r_esh(i)
             fibm1_esh(i,j)=fibm1_esh(i,j)
     &          -fibm1pres_esh(j)  /areapnt_esh(i,j)
     &          *temp_ibm1
             fibm2_esh(i,j)=fibm2_esh(i,j)
     &          -fibm2pres_esh(j)  /areapnt_esh(i,j)
     &          *temp_ibm1
             fibm3_esh(i,j)=fibm3_esh(i,j)
     &          -fibm3pres_esh(j)  /areapnt_esh(i,j)
     &          *temp_ibm1

        end do
        endif
        i=ibdy  
         if(contacttype .eq. -1) then
            do j=1,ns_ibm_r_esh(i)
                dxcont(1)=fibm1cont_esh(j)
                dxcont(2)=fibm2cont_esh(j)
                dxcont(3)=fibm3cont_esh(j)
                ddcont=sqrt(dxcont(1)**2+dxcont(2)**2+dxcont(3)**2)+eps
                normalpres_esh(j,1)=dxcont(1)/ddcont
                normalpres_esh(j,2)=dxcont(2)/ddcont
                normalpres_esh(j,3)=dxcont(3)/ddcont
            enddo
        endif

        i=ibdy
        i2l=i      
        i2g=ibdyg    

        aamat_esh=0.d0
        do j=1,3
          ibktx=(j-1)*(ns_ibm_r_esh(i)+ns_ibm_i_esh(i))+1
          ibkty=j*(ns_ibm_r_esh(i)+ns_ibm_i_esh(i))
          ibktmin(1)=ibktx  !(j-1)*ns_ibm_r_esh(i)+1
          ibktmax(1)=ibkty  !j*ns_ibm_r_esh(i)

          do j2=1,3
            ibkts1=(j2-1)*(ns_ibm_r_esh(i)+ns_ibm_i_esh(i))+1
            ibkts2=j2*(ns_ibm_r_esh(i)+ns_ibm_i_esh(i))
            ibktmin(2)=ibkts1  !(j2-1)*ns_ibm_r_esh(i)+1
            ibktmax(2)=ibkts2  !j2*ns_ibm_r_esh(i)
            if(j .eq. j2) then
            aamat_esh(ibktmin(1):ibktmax(1),ibktmin(2):ibktmax(2))
     &          =(density_coef(i2g)*timeMarchcoef(2)
     &          +(cs_ibm(i2g)+propDamp(i2g,1)*density_coef(i2g))
     &                  *timeMarchcoef(3))*
     &            mms(1:ns_ibm_r_esh(i)+ns_ibm_i_esh(i)
     &               ,1:ns_ibm_r_esh(i)+ns_ibm_i_esh(i))
            endif
            aamat_esh(ibktmin(1):ibktmax(1),ibktmin(2):ibktmax(2))
     &          =
     &          aamat_esh(ibktmin(1):ibktmax(1),ibktmin(2):ibktmax(2))
     &         +(propDamp(i2g,2)*timeMarchcoef(3)+timeMarchcoef(1))
     &          *( kkb(ibktx:ibkty,ibkts1:ibkts2) )

          enddo
        enddo

       if(FluidForceFlag(i2g) .and. (1==1)) then
          j2=ns_ibm_r_esh(i)+ns_ibm_i_esh(i)
          do j=1,j2
           aamat_esh(j,j)
     &       =aamat_esh(j,j)-timeMarchcoef(3)
     &        *ImplicitFSI_coef*areapnt_esh(i,j)
           aamat_esh(j+j2,j+j2)
     &       =aamat_esh(j+j2,j+j2)-timeMarchcoef(3)
     &        *ImplicitFSI_coef*areapnt_esh(i,j)
           aamat_esh(j+2*j2,j+2*j2)
     &       =aamat_esh(j+2*j2,j+2*j2)-timeMarchcoef(3)
     &        *ImplicitFSI_coef*areapnt_esh(i,j)
          enddo
        endif

        j2=ns_ibm_r_esh(i)+ns_ibm_i_esh(i)
        do j=1,target_num(i2g)
             k=target_point_num_esh(i,j)
             temp_ibm1=
     &          (X_na_esh(k,1)-Xtar_na_esh(j,1))
             temp_ibm2=
     &          (X_na_esh(k,2)-Xtar_na_esh(j,2))
             temp_ibm3=
     &          (X_na_esh(k,3)-Xtar_na_esh(j,3))

             include "distIBM_target_k_rampfn.Fi"               
             if(time_alphaf .le. target_t_link_esh(i,j)) then
                ksh_tmp=target_k_link_esh(i,j)*target_timefn
             else
                ksh_tmp=0.0
             endif
             force_points_esh(i,j,1)=k_link*temp_ibm1*ksh_tmp
             force_points_esh(i,j,2)=k_link*temp_ibm2*ksh_tmp
             force_points_esh(i,j,3)=k_link*temp_ibm3*ksh_tmp


             ddcont=timeMarchcoef(1)*k_link*ksh_tmp
             aamat_esh(k,k)          =aamat_esh(k,k)          +ddcont
             aamat_esh(k+j2,k+j2)    =aamat_esh(k+j2,k+j2)    +ddcont
             aamat_esh(k+2*j2,k+2*j2)=aamat_esh(k+2*j2,k+2*j2)+ddcont

             temp_ibm1=dXtar_na_esh(j,1)
             temp_ibm2=dXtar_na_esh(j,2)
             temp_ibm3=dXtar_na_esh(j,3)

             temp_ibm1=dX_na_esh(k,1)-temp_ibm1
             temp_ibm2=dX_na_esh(k,2)-temp_ibm2
             temp_ibm3=dX_na_esh(k,3)-temp_ibm3

             temp2_ibm= cs_ibm_target(i2g)*k_link*temp_ibm1*ksh_tmp
             force_points_esh(i,j,1)=force_points_esh(i,j,1)+temp2_ibm


             temp2_ibm= cs_ibm_target(i2g)*k_link*temp_ibm2*ksh_tmp
             force_points_esh(i,j,2)=force_points_esh(i,j,2)+temp2_ibm

             temp2_ibm= cs_ibm_target(i2g)*k_link*temp_ibm3*ksh_tmp
             force_points_esh(i,j,3)=force_points_esh(i,j,3)+temp2_ibm

             ddcont=timeMarchcoef(3)*k_link*ksh_tmp
             aamat_esh(k,k)          =aamat_esh(k,k)          +ddcont
             aamat_esh(k+j2,k+j2)    =aamat_esh(k+j2,k+j2)    +ddcont
             aamat_esh(k+2*j2,k+2*j2)=aamat_esh(k+2*j2,k+2*j2)+ddcont


             f_link1_esh(i,k)=force_points_esh(i,j,1)
             f_link2_esh(i,k)=force_points_esh(i,j,2)
             f_link3_esh(i,k)=force_points_esh(i,j,3)
       enddo

        if(ndim .gt. 2) then
          ddcont=(min_grid_x*min_grid_y*min_grid_z)**(1.0/3.0)
        else
          ddcont=sqrt(min_grid_x*min_grid_y)
        endif
       
       i=ibdy
       i2g=ibdyg
       if(ContactForceFlag(i2g))then
       include "distIBM_Contact_Coeffn.Fi"   
       if(contacttype .ne. -1) then
         write(*,*) 'Implicit version is not implemented yet!'
         STOP
       endif
       do j2=1,ns_ibm_r_esh(i)
       do i2=1,nFixcontact
                        if((
     &                     abs((X_na_esh(j2,2)-
     &                          xFixcontact(i2,2))/min_grid_y)
     &                    .le.12.0) .and.
     &                    (abs((X_na_esh(j2,1)-
     &                          xFixcontact(i2,1))/min_grid_x)
     &                    .le.12.0) .and.
     &                    (abs((X_na_esh(j2,3)-
     &                          xFixcontact(i2,3))/min_grid_z)
     &                    .le.12.0) ) then
                              ksh_tmp=X_na_esh(j2,1)

                              temp_ibm1= 
     &                              ((X_na_esh(j2,2)
     &                               -xFixcontact(i2,2))
     &                           /(2.0*min_grid_y) )
                              call delta_fun(delta_typey,temp_ibm1,fn2)
                              temp_ibm2= 
     &                              ((ksh_tmp
     &                               -xFixcontact(i2,1))
     &                           /(2.0*min_grid_x) )
                              call delta_fun(delta_typex,temp_ibm2,fn1)
                              if(ndim .gt. 2)  then 
                                 temp_ibm3= 
     &                              ((X_na_esh(j2,3)
     &                               -xFixcontact(i2,3))
     &                              /(2.0*min_grid_z) )
                                  call 
     &                              delta_fun(delta_typez,temp_ibm3,fn3)
                              else
                                   temp_ibm3=0.0
                                   fn3=1.0
                              endif
                              temp3_ibm=
     &                        sqrt((temp_ibm1*min_grid_y)**2
     &                            +(temp_ibm2*min_grid_x)**2
     &                            +(temp_ibm3*min_grid_z)**2)*2.00
     &                            +1.0d-9
                              f_impuls1_esh(i,j2)= f_impuls1_esh(i,j2)+
     &                               fn1*fn2*fn3*areapnt_esh(i,j2)
     &                               *ds_ibm_esh(i,j2)*impactpen(1)
     &                               /(min_grid_x*min_grid_y*min_grid_z)
     &                               *(ksh_tmp-xFixcontact(i2,1))
     &                               /temp3_ibm
                              f_impuls2_esh(i,j2)= f_impuls2_esh(i,j2)+
     &                               fn1*fn2*fn3*areapnt_esh(i,j2)
     &                              *ds_ibm_esh(i,j2)*impactpen(1)
     &                              /(min_grid_x*min_grid_y*min_grid_z)
     &                              *(X_na_esh(j2,2)
     &                               -xFixcontact(i2,2))
     &                               /temp3_ibm
                              if(ndim .gt. 2)  
     &                           f_impuls3_esh(i,j2)=
     &                              f_impuls3_esh(i,j2)+
     &                               fn1*fn2*fn3*areapnt_esh(i,j2)
     &                              *ds_ibm_esh(i,j2)*impactpen(1)
     &                              /(min_grid_x*min_grid_y*min_grid_z)
     &                              *(X_na_esh(j2,1)
     &                               -xFixcontact(i2,3))
     &                               /temp3_ibm
             endif
       enddo
       enddo

       if(contacttype .eq. -1) then        
        if (i2g .le. nr_ibm_f) then
           do ibkt2=1,NBucketnum

             ibktmp1=mod(ibkt2,IBucketnum(1)*IBucketnum(2))
             if(ibktmp1 .eq. 0) ibktmp1=IBucketnum(1)*IBucketnum(2)

             ibktx=mod(ibktmp1,IBucketnum(1))
             if(ibktx .eq. 0) ibktx=IBucketnum(1)

             ibkty=int((ibktmp1-1)/IBucketnum(1))+1
             ibktz=int((ibkt2-1)/(IBucketnum(1)*IBucketnum(2)))+1

             ibktmin(1)=max(1,ibktx-1)
             ibktmax(1)=min(IBucketnum(1),ibktx+1)

             ibktmin(2)=max(1,ibkty-1)
             ibktmax(2)=min(IBucketnum(2),ibkty+1)

             ibktmin(3)=max(1,ibktz-1)
             ibktmax(3)=min(IBucketnum(3),ibktz+1)
             do ibkt_i=PBucket(i2g,ibkt2),PBucket(i2g,ibkt2+1)-1
                j2 =sBucket_esh(i,ibkt2,ibkt_i)
               do i2=1,nr_ibm_esh
                  i3g=Ilocglb_esh(i2)
                  if(i3g .le. nr_ibm_fb) then
                  if(i2 .ne. i) then
                    do ibkts1=ibktmin(1),ibktmax(1)
                    do ibkts2=ibktmin(2),ibktmax(2)
                    do ibkts3=ibktmin(3),ibktmax(3)
                      ibkt=
     &                       ibkts1
     &                     +(ibkts2-1)*IBucketnum(1)
     &                     +(ibkts3-1)*IBucketnum(1)*IBucketnum(2)

                      do ibkt2_i=PBucket(i3g,ibkt),PBucket(i3g,ibkt+1)-1
                         j =sBucket_esh(i2,ibkt,ibkt2_i) 

                           outcont(1)=X_na_esh(j2,1)-
     &                                gx_ibm_esh(i2,j)
                           outcont(2)=X_na_esh(j2,2)-
     &                                gy_ibm_esh(i2,j)
                           outcont(3)=X_na_esh(j2,3)-
     &                                gz_ibm_esh(i2,j)                    
                           outcont2(1)=normalpres_esh(j2,1)
                           outcont2(2)=normalpres_esh(j2,2)
                           outcont2(3)=normalpres_esh(j2,3)
                        ksh_tmp=sqrt(
     &                     outcont(1)**2+
     &                     outcont(2)**2+
     &                     outcont(3)**2)

                     dncont=dot_product(outcont(1:3),outcont2(1:3))
                     dncont=-dncont/(abs(dncont)+eps)

                        temp_ibm2=time_alphaf  


                        if( (ksh_tmp/ddcont   .le. 10.0) 
     &                .and. (temp_ibm2 .gt. 0.05) ) then
                              temp_ibm1= 
     &                            max(ksh_tmp*dncont/ddcont,0.0)
                              call delta_fun(delta_typey,temp_ibm1,fn1)

                              temp3_ibm=ksh_tmp
                              dxcont(1)=temp_ibm1 
                              dxcont(2)=1.0/(1+exp(10*(dxcont(1)-0.0)))
                              dxcont(3)=impactpen(1)
     &                            +dxcont(2)*impactpen(2)
                              dxcont(3)=dxcont(3)*dncont



!                              if(0 .eq. 1) then
!                                fn1=1.0/4.0
!                                if(temp3_ibm/ddcont>1.0)then
!                                  dxcont(1)=ksh_tmp*
!     &                             exp(-impactpen(1)*
!     &                             (temp3_ibm/ddcont-1.0)/ksh_tmp)
!                                else
!                                  dxcont(1)=ksh_tmp
!     &                             -impactpen(2)*(temp3_ibm/ddcont-1.0)
!                                endif
!                                dxcont(3)=dxcont(1)   
!                              endif    
                          
                              ksh_tmp=1.0 

                              f_impuls1_esh(i,j2)=
     &                                f_impuls1_esh(i,j2)+
     &                               fn1*2.0*areapnt_esh(i,j2)
     &                               *dxcont(3)*ksh_tmp
     &                               *( X_na_esh(j2,1)
     &                                 -gx_ibm_esh(i2,j))
     &                               /temp3_ibm


                              f_impuls2_esh(i,j2)=
     &                                f_impuls2_esh(i,j2)+
     &                               fn1*2.0*areapnt_esh(i,j2)
     &                               *dxcont(3)*ksh_tmp
     &                              *(X_na_esh(j2,2)
     &                               -gy_ibm_esh(i2,j))
     &                               /temp3_ibm
                              if(ndim .gt. 2) then
                                 f_impuls3_esh(i,j2)=
     &                               f_impuls3_esh(i,j2)+
     &                               fn1*2.0*areapnt_esh(i,j2)
     &                              *dxcont(3)*ksh_tmp
     &                              *(X_na_esh(j2,3)
     &                               -gz_ibm_esh(i2,j))
     &                               /temp3_ibm
                              endif
                         endif
                     end do  !ibkt2_i
                     enddo   !ibkts1
                     enddo   !ibkts2
                     enddo   !ibkts3
                  endif
                  endif
               enddo   !i2i

!============  This part is skiped in implicit version END

             enddo !ibkt_i
             enddo !ibkt2
             if(contactplanesFlag(ibdyg)) then
               if(1==0) then
               do ibkt2=1,Ncontactplanes(ibdyg) 
                contactplane_point(1:3)= 
     &                       contactplanesPara(ibdyg,ibkt2,1:3)
                contactplane_n(1:3)=
     &                       contactplanesPara(ibdyg,ibkt2,4:6)

                dncont=0.0
                do i2=1,3
                   dncont=dncont+contactplane_n(i2) 
     &                          *contactplane_point(i2)
                enddo
                contactplane_n(4)=-dncont  !plane defined as ax+by+cz+d=0, here we save d

               temp_ibm2=s_function((time_alphaf-contact_time_esh(i,1))
     &                              /contact_time_esh(i,2) )
                                
               temp_ibm2=time_alphaf

               do j2=1,ns_ibm_r_esh(i)

                  mattmp_eye(1:3,1:3)=0.0

                  ksh_tmp=contactplane_n(1) 
     &                   *X_na_esh(j2,1) 
     &                   +contactplane_n(2) 
     &                   *X_na_esh(j2,2) 
     &                   +contactplane_n(3) 
     &                   *X_na_esh(j2,3) 
     &                   +contactplane_n(4)

! KSH=sum_{1:3}ni.xi +n4     d KSH/ dxi  =ni
! xp=KSH/2dx -0.5            d xp / dKSH =1/2dx     ==>tmpv3(1) 
! y=xp (xp>=0)  & =0 (xp<0)  d  y / dxp  = {1 or 0} ==>tmpv2(1)
! y2=0 (xp>=0)  & =xp(xp<0)  d y2 / dxp  = {0 or 1}
! fn=deltafn(y)              d  f / dy   =df(y)    *dxp/dKSH==>tmpv3(2)
! A = 2*(1/(1+exp(6*y2))-0.5)d  A / dy2  =dg(y)    *dy2/dxp==>tmpv2(2)

                  tmpv3(3)=0.0
                  if(ksh_tmp/ddcont   .le. 8.0) then
                              tmpv3(1)=1.0/(2*ddcont)

                              temp_ibm1= 
     &                            max(ksh_tmp/(2*ddcont)-0.5,0.0)
                              call delta_fun(delta_typey,temp_ibm1,fn1)
                              call Driv_delta_fun(delta_typey, 
     &                                            temp_ibm1,tmpv3(2))
                              tmpv3(2)=tmpv3(2)*tmpv3(1)  


                              temp3_ibm=ksh_tmp/(2*ddcont)-0.5
                              dxcont(1)=temp3_ibm     

                              if(temp3_ibm .le.0.0) then 
                                tmpv2(1)=0.0
                                dxcont(2)=2.0*(
     &                         1.0/(1+exp(6.0*(dxcont(1)-0.0)))-0.5)
                               tmpv2(2)=-(12.0*exp(6.0*dxcont(1)))
     &                                  /(exp(6.0*dxcont(1)) + 1.0)**2
                              else
                                tmpv2(1)=tmpv3(2)   !final df/dxj
                                tmpv2(2)=0.0        !final dA/dxj
                                dxcont(2)=0.0
                              endif
                              dxcont(3)=(impactpen(1)
     &                            +dxcont(2)*impactpen(2))
     &                            *contact_coef_esh(i,1,j2)*temp_ibm2

                              tmpv3(3)=(
     &                             tmpv2(2)*impactpen(2))
     &                            *contact_coef_esh(i,1,j2)*temp_ibm2
     &                            *tmpv3(1)

                              tmpv2(3)=2.0*areapnt_esh(i,j2)
     &                                *(tmpv2(1)*dxcont(3)
     &                                 +fn1*tmpv3(3))

                               f_impuls1_esh(i,j2)=
     &                                f_impuls1_esh(i,j2)+
     &                               fn1*2.0*areapnt_esh(i,j2)
     &                               *dxcont(3)
     &                               *contactplane_n(1)

                              f_impuls2_esh(i,j2)=
     &                                f_impuls2_esh(i,j2)+
     &                               fn1*2.0*areapnt_esh(i,j2)
     &                               *dxcont(3)
     &                              *contactplane_n(2)

                              if(ndim .gt. 2) then
                                 f_impuls3_esh(i,j2)=
     &                               f_impuls3_esh(i,j2)+
     &                               fn1*2.0*areapnt_esh(i,j2)
     &                              *dxcont(3)
     &                              *contactplane_n(3)
                              endif
                              do j=1,3
                               tmpv2(1)=contactplane_n(j)
                               ibktmin(1)=(j-1)
     &                           *(ns_ibm_r_esh(i)+ns_ibm_i_esh(i))+j2
                               do k=1,3
                                 tmpv2(2)=contactplane_n(k)
                                 ibktmin(2)=(k-1)
     &                           *(ns_ibm_r_esh(i)+ns_ibm_i_esh(i))+j2

                                  aamat_esh(ibktmin(1),ibktmin(2))
     &                           =aamat_esh(ibktmin(1),ibktmin(2))
     &                           -timeMarchcoef(1)
     &                           *tmpv2(1)*tmpv2(2)*tmpv2(3)
                               enddo
                             enddo
                   endif
                enddo !j2
              enddo !ibkt2

              else

               do ibkt2=1,Ncontactplanes(ibdyg) 
                contactplane_point(1:3)= 
     &                       contactplanesPara(ibdyg,ibkt2,1:3)
                contactplane_n(1:3)=
     &                       contactplanesPara(ibdyg,ibkt2,4:6)

                dncont=0.0
                do i2=1,3
                   dncont=dncont+contactplane_n(i2) 
     &                          *contactplane_point(i2)
                enddo
                contactplane_n(4)=-dncont  !plane defined as ax+by+cz+d=0, here we save d

               temp_ibm2=s_function((time_alphaf-contact_time_esh(i,1))
     &                              /contact_time_esh(i,2) )
                                
               temp_ibm2=time_alphaf

               do j2=1,ns_ibm_r_esh(i)

                  ksh_tmp=contactplane_n(1) 
     &                   *X_na_esh(j2,1) 
     &                   +contactplane_n(2) 
     &                   *X_na_esh(j2,2) 
     &                   +contactplane_n(3) 
     &                   *X_na_esh(j2,3) 
     &                   +contactplane_n(4)
                  ksh_tmp=-ksh_tmp

                  tmpv3(3)=0.0
                  if(abs(ksh_tmp)/ddcont   .le. 15.0) then

                      tmpv3(1)=
     &                 impactpen(1)/contact_coef_esh(i,ibkt2,j2)/ddcont
                      if(ksh_tmp .gt. 0) then
                          tmpv3(2)=
     &                      0.5*tmpv3(1)*contact_coef_esh(i,ibkt2,j2)
     &                      +tmpv3(1)*ksh_tmp
                          tmpv2(2)=-tmpv3(1)
                      elseif(ksh_tmp 
     &                        .gt. -contact_coef_esh(i,ibkt2,j2)) then
                          tmpv3(2)=
     &                      tmpv3(1)/(2.0*contact_coef_esh(i,ibkt2,j2))
     &                      *(ksh_tmp+contact_coef_esh(i,ibkt2,j2))**2
                          tmpv2(2)=
     &                      -tmpv3(1)/(contact_coef_esh(i,ibkt2,j2))
     &                         *(ksh_tmp+contact_coef_esh(i,ibkt2,j2))
                      else
                          tmpv3(2)=0.0
                          tmpv2(2)=0.0
                      endif
                      f_impuls1_esh(i,j2)=
     &                                f_impuls1_esh(i,j2)+
     &                               tmpv3(2)*areapnt_esh(i,j2)
     &                               *contactplane_n(1)

                      f_impuls2_esh(i,j2)=
     &                                f_impuls2_esh(i,j2)+
     &                               tmpv3(2)*areapnt_esh(i,j2)
     &                              *contactplane_n(2)

                      if(ndim .gt. 2) then
                          f_impuls3_esh(i,j2)=
     &                               f_impuls3_esh(i,j2)+
     &                               tmpv3(2)*areapnt_esh(i,j2)
     &                              *contactplane_n(3)
                      endif
                      do j=1,3
                            tmpv2(1)=contactplane_n(j)
                            ibktmin(1)=(j-1)
     &                           *(ns_ibm_r_esh(i)+ns_ibm_i_esh(i))+j2
                            do k=1,3
                                 tmpv2(3)=contactplane_n(k)
                                 ibktmin(2)=(k-1)
     &                           *(ns_ibm_r_esh(i)+ns_ibm_i_esh(i))+j2

                                  aamat_esh(ibktmin(1),ibktmin(2))
     &                           =aamat_esh(ibktmin(1),ibktmin(2))
     &                           -timeMarchcoef(1)*areapnt_esh(i,j2)
     &                           *tmpv2(1)*tmpv2(2)*tmpv2(3)
                            enddo
                       enddo
                   endif
                enddo !j2
             enddo !ibkt2
             endif
            endif !contactplanesFlag

             if(channelcontacty) then
             do j2=1,ns_ibm_r_esh(i)
               do i2=1,2  !with channel bndry in y
                     if(i2 .eq. 1) then
                        h_channel=gy(nygrid_ibm)
                        if (gy_ibm_massive_esh(i,j2) 
     &                      .lt. h_channel) then
                            ksh_tmp=X_na_esh(j2,2)
                        else
                           ksh_tmp=h_channel-1.0d-9
                        endif
                     else
                        h_channel=gy(2)
                        if (gy_ibm_massive_esh(i,j2) 
     &                      .gt. h_channel) then
                            ksh_tmp=X_na_esh(j2,2)
                        else
                           ksh_tmp=h_channel+1.0d-9
                        endif
                     endif
                     do j=1,nxgrid_ibm
                       do k=1,nzgrid_ibm
                        if((
     &                  abs((X_na_esh(j2,2)-h_channel)
     &                       /min_grid_y)
     &                 .le.12.0) .and.
     &                 (abs((X_na_esh(j2,1)-gx(j))
     &                       /min_grid_x)
     &                 .le.12.0) .and.
     &                 (abs((X_na_esh(j2,3)-gz(k))
     &                       /min_grid_z)
     &                 .le.12.0) ) then

                         temp_ibm1= 
     &                         ((ksh_tmp-h_channel)
     &                     /(min_grid_y))

                           call delta_fun(delta_typey,temp_ibm1,fn2)

                          temp_ibm2= 
     &                        ((X_na_esh(j2,1)-gx(j))
     &                     /(min_grid_x))

                           call delta_fun(delta_typex,temp_ibm2,fn1)

                          if(ndim .gt. 2) then
                             temp_ibm3= 
     &                          ((X_na_esh(j2,3)-gz(k))
     &                       /(min_grid_z) )
                           call delta_fun(delta_typez,temp_ibm3,fn3)
                          else
                             temp_ibm3=0.0
                             fn3=1.0
                          endif

                         temp3_ibm=
     &                   sqrt((temp_ibm1*min_grid_y)**2
     &                      +(temp_ibm2*min_grid_x)**2
     &                      +(temp_ibm3*min_grid_z)**2)+1.0d-9

                          f_impuls1_esh(i,j2)= f_impuls1_esh(i,j2)+
     &                               fn1*fn2*fn3*areapnt_esh(i,j2)
     &                        *ds_ibm_esh(i,j2)*impactpen(1)
     &                        /(min_grid_x*min_grid_y*min_grid_z)
     &                      *(X_na_esh(j2,1)-gx(j))/temp3_ibm
                          f_impuls2_esh(i,j2)= f_impuls2_esh(i,j2)+
     &                               fn1*fn2*fn3*areapnt_esh(i,j2)
     &                        *ds_ibm_esh(i,j2)*impactpen(1)
     &                        /(min_grid_x*min_grid_y*min_grid_z)
     &                        *(ksh_tmp-h_channel)/temp3_ibm
                          if(ndim .gt. 2) 
     &                    f_impuls3_esh(i,j2)= f_impuls3_esh(i,j2)+
     &                               fn1*fn2*fn3*areapnt_esh(i,j2)
     &                        *ds_ibm_esh(i,j2)*impactpen(1)
     &                        /(min_grid_x*min_grid_y*min_grid_z)
     &                      *(X_na_esh(j2,3)-gz(k))/temp3_ibm
                        endif
                    
                   end do !k=1,nz 
                 end do !j=1,nx
               enddo  !i2=1,2
             end do    !j2
             endif !channelcontacty

             if((channelcontactz) .and. (ndim .gt. 2)) then
             do j2=1,ns_ibm_r_esh(i)

               do i2=1,2  !with channel bndry in z

                     if(i2 .eq. 1) then
                        h_channel=gz(nzgrid_ibm)
                        if (X_na_esh(j2,3) 
     &                      .lt. h_channel) then
                            ksh_tmp=X_na_esh(j2,3)
                        else
                            ksh_tmp=h_channel-1.0d-9
                        endif
                     else
                        h_channel=gz(2)
                        if (X_na_esh(j2,3) 
     &                      .gt. h_channel) then
                            ksh_tmp=X_na_esh(j2,3)
                        else
                           ksh_tmp=h_channel+1.0d-9
                        endif
                     endif
                     do j=1,nxgrid_ibm
                       do k=1,nygrid_ibm
                        if((
     &                  abs((X_na_esh(j2,2)-gy(k))
     &                       /min_grid_y)
     &                 .le.12.0) .and.
     &                 (abs((X_na_esh(j2,1)-gx(j))
     &                       /min_grid_x)
     &                 .le.12.0) .and.
     &                 (abs((X_na_esh(j2,3)-h_channel)
     &                       /min_grid_z)
     &                 .le.12.0) ) then

                        temp_ibm1= 
     &                         ((X_na_esh(j2,2)-gy(k))
     &                       /(min_grid_y) )
                           call delta_fun(delta_typey,temp_ibm1,fn2)

                        temp_ibm2= 
     &                        ((X_na_esh(j2,1)-gx(j))
     &                     /(min_grid_x))
                           call delta_fun(delta_typex,temp_ibm2,fn1)

                        temp_ibm3= 
     &                          ((ksh_tmp-h_channel)
     &                       /(min_grid_z) )
                           call delta_fun(delta_typez,temp_ibm3,fn3)


                         temp3_ibm=
     &                   sqrt((temp_ibm1*min_grid_y)**2
     &                      +(temp_ibm2*min_grid_x)**2
     &                      +(temp_ibm3*min_grid_z)**2)+1.0d-9

                          f_impuls1_esh(i,j2)= f_impuls1_esh(i,j2)+
     &                               fn1*fn2*fn3*areapnt_esh(i,j2)
     &                        *ds_ibm_esh(i,j2)*impactpen(1)
     &                        /(min_grid_x*min_grid_y*min_grid_z)
     &                        *(X_na_esh(j2,1)-gx(j))
     &                       /temp3_ibm

                          f_impuls2_esh(i,j2)= f_impuls2_esh(i,j2)+
     &                               fn1*fn2*fn3*areapnt_esh(i,j2)
     &                        *ds_ibm_esh(i,j2)*impactpen(1)
     &                        /(min_grid_x*min_grid_y*min_grid_z)
     &                        *(X_na_esh(j2,2)-gy(k))
     &                       /temp3_ibm

                          f_impuls3_esh(i,j2)= f_impuls3_esh(i,j2)+
     &                               fn1*fn2*fn3*areapnt_esh(i,j2)
     &                        *ds_ibm_esh(i,j2)*impactpen(1)
     &                        /(min_grid_x*min_grid_y*min_grid_z)
     &                        *(ksh_tmp-h_channel)/temp3_ibm
                        endif
                    
                   end do !k=1,nz 
                 end do !j=1,nx
               enddo  !i2=1,2
             end do    !j2
             endif !channelcontactz
          endif   !for if ((i .le. nr_ibm_f).and.(i .ge. 1)) then
       endif  !contacttypeif of contact model
       endif  !ContactForceFlag(i)

!here 2-16-2015 7:02pm
c calculation of total forces 
       i=ibdy
       i2g=ibdyg

        do j=1,ns_ibm_r_esh(i)
             fibm1_esh(i,j)=fibm1_esh(i,j)
     &          +f_link1_esh(i,j)
             fibm2_esh(i,j)=fibm2_esh(i,j)
     &          +f_link2_esh(i,j)
             fibm3_esh(i,j)=fibm3_esh(i,j)
     &          +f_link3_esh(i,j)
        end do

       do j=1,ns_ibm_r_esh(i)+ns_ibm_i_esh(i) 
           f_link1_esh(i,j)=(density_coef(i2g)*
     &        (timeMarchcoef(2)+propDamp(i2g,1)*timeMarchcoef(3))
     &        +cs_ibm(i2g)*timeMarchcoef(3))*X_np1_esh(j,1)
     &        -density_coef(i2g)*ddX_in_esh(j,1)
     &        -(cs_ibm(i2g)+
     &        +propDamp(i2g,1)*density_coef(i2g))*dX_in_esh(j,1)

           f_link2_esh(i,j)=(density_coef(i2g)*
     &        (timeMarchcoef(2)+propDamp(i2g,1)*timeMarchcoef(3))
     &        +cs_ibm(i2g)*timeMarchcoef(3))*X_np1_esh(j,2)
     &        -density_coef(i2g)*ddX_in_esh(j,2)
     &        -(cs_ibm(i2g)+
     &        +propDamp(i2g,1)*density_coef(i2g))*dX_in_esh(j,2)

           f_link3_esh(i,j)=(density_coef(i2g)*
     &        (timeMarchcoef(2)+propDamp(i2g,1)*timeMarchcoef(3))
     &        +cs_ibm(i2g)*timeMarchcoef(3))*X_np1_esh(j,3)
     &        -density_coef(i2g)*ddX_in_esh(j,3)
     &        -(cs_ibm(i2g)+
     &        +propDamp(i2g,1)*density_coef(i2g))*dX_in_esh(j,3)
       end do



      f_link1_esh(i,1: ns_ibm_r_esh(i)+ns_ibm_i_esh(i))=
     & matmul(mms(1: ns_ibm_r_esh(i)+ns_ibm_i_esh(i),
     &            1: ns_ibm_r_esh(i)+ns_ibm_i_esh(i)),
     &         f_link1_esh(i,1: ns_ibm_r_esh(i)+ns_ibm_i_esh(i)) )
     & +fibmRHS1_esh(1: ns_ibm_r_esh(i)+ns_ibm_i_esh(i))
      f_link2_esh(i,1: ns_ibm_r_esh(i)+ns_ibm_i_esh(i))=
     & matmul( mms(1: ns_ibm_r_esh(i)+ns_ibm_i_esh(i),
     &             1: ns_ibm_r_esh(i)+ns_ibm_i_esh(i)),
     &         f_link2_esh(i,1: ns_ibm_r_esh(i)+ns_ibm_i_esh(i)) )
     & +fibmRHS2_esh(1: ns_ibm_r_esh(i)+ns_ibm_i_esh(i))
      f_link3_esh(i,1: ns_ibm_r_esh(i)+ns_ibm_i_esh(i))=
     & matmul(mms(1: ns_ibm_r_esh(i)+ns_ibm_i_esh(i),
     &            1: ns_ibm_r_esh(i)+ns_ibm_i_esh(i)),
     &         f_link3_esh(i,1: ns_ibm_r_esh(i)+ns_ibm_i_esh(i)))
     & +fibmRHS3_esh(1: ns_ibm_r_esh(i)+ns_ibm_i_esh(i))

      np=ns_ibm_r_esh(i)+ns_ibm_i_esh(i)

      do ie1=0,2
      ie2=0
      f_link1_esh(i,1:np)=
     &f_link1_esh(i,1:np)
     & +matmul(kkb(ie2*np+1:(ie2+1)*np,ie1*np+1:(ie1+1)*np),
     &         propDamp(2,i2g)*
     &         (timeMarchcoef(3)*
     &          X_np1_esh(1:np,ie1+1)-dX_in_esh(1:np,ie1+1))
     &        ) 

      ie2=1
      f_link2_esh(i,1:np)=
     &f_link2_esh(i,1:np)
     & +matmul(kkb(ie2*np+1:(ie2+1)*np,ie1*np+1:(ie1+1)*np),
     &         propDamp(2,i2g)*
     &         (timeMarchcoef(3)*
     &          X_np1_esh(1:np,ie1+1)-dX_in_esh(1:np,ie1+1))
     &        ) 

      ie2=2
      f_link3_esh(i,1:np)=
     &f_link3_esh(i,1:np)
     & +matmul(kkb(ie2*np+1:(ie2+1)*np,ie1*np+1:(ie1+1)*np),
     &         propDamp(2,i2g)*
     &         (timeMarchcoef(3)*
     &          X_np1_esh(1:np,ie1+1)-dX_in_esh(1:np,ie1+1))
     &        ) 
      enddo


c calculation of total forces 
       i=ibdy

        do j=1,ns_ibm_r_esh(i) 
           fibm1_esh(i,j)=-f_link1_esh(i,j)
     &                  + areapnt_esh(i,j)*(
     &                 -fibm1_esh(i,j)   
     &                 +density_coef(i2g)
     &                  *fr*cos(the_grav)*sin(phi_grav)*timetemp2
     &                 ) 
     &                +f_impuls1_esh(i,j)

           fibm2_esh(i,j)=-f_link2_esh(i,j)
     &                  + areapnt_esh(i,j)*(
     &                 -fibm2_esh(i,j)    
     &                 +density_coef(i2g)
     &                  *fr*sin(the_grav)*sin(phi_grav)*timetemp2
     &                 ) 
     &                 +f_impuls2_esh(i,j)

           fibm3_esh(i,j)=-f_link3_esh(i,j)
     &                  + areapnt_esh(i,j)*(
     &                 -fibm3_esh(i,j)    
     &                 +density_coef(i2g)
     &                  *fr*cos(phi_grav)*timetemp2
     &                 ) 
     &                 +f_impuls3_esh(i,j)
        end do


      ksh_tmp=-1000.0
      k=ns_ibm_r_esh(ibdy)+ns_ibm_i_esh(ibdy)      
      do np=1,ns_ibm_r_esh(ibdy)  
         ksh_tmp=max(ksh_tmp,aamat_esh(np,np))
         ksh_tmp=max(ksh_tmp,aamat_esh(np+k,np+k))
         ksh_tmp=max(ksh_tmp,aamat_esh(np+2*k,np+2*k))
      enddo
      k=ns_ibm_r_esh(ibdy)+ns_ibm_i_esh(ibdy)
      do np=1,ns_ibm_i_esh(ibdy)  
         npg=ns_ibm_r_esh(ibdy)+np
         bodypoint(1)=boundrylist_esh(ibdy,np,1)
         bodypoint(2)=boundrylist_esh(ibdy,np,2)
         bodypoint(3)=boundrylist_esh(ibdy,np,3)

         if(bndycnd_esh(ibdy,npg) .eq. 1) then
            do j=1,3
             aamat_esh(npg+(j-1)*k,1:3*k)=0.0
             aamat_esh(npg+(j-1)*k,npg+(j-1)*k)=ksh_tmp
             aamat_esh(npg+(j-1)*k,bodypoint(1)+(j-1)*k)=
     &              aamat_esh(npg+(j-1)*k,bodypoint(1)+(j-1)*k)-ksh_tmp
             aamat_esh(npg+(j-1)*k,bodypoint(2)+(j-1)*k)=
     &              aamat_esh(npg+(j-1)*k,bodypoint(2)+(j-1)*k)-ksh_tmp
             aamat_esh(npg+(j-1)*k,bodypoint(3)+(j-1)*k)=
     &              aamat_esh(npg+(j-1)*k,bodypoint(3)+(j-1)*k)+ksh_tmp
            enddo
          elseif(bndycnd_esh(ibdy,npg) .eq. 2) then
            do j=1,3
             aamat_esh(npg+(j-1)*k,1:3*k)=0.0
             aamat_esh(npg+(j-1)*k,npg+(j-1)*k)=ksh_tmp

             aamat_esh(bodypoint(1)+(j-1)*k,1:3*k)=0.0
             aamat_esh(bodypoint(1)+(j-1)*k,bodypoint(1)+(j-1)*k)=
     &              ksh_tmp

             aamat_esh(bodypoint(2)+(j-1)*k,1:3*k)=0.0
             aamat_esh(bodypoint(2)+(j-1)*k,bodypoint(2)+(j-1)*k)=
     &              ksh_tmp
            enddo
          elseif(bndycnd_esh(ibdy,npg) .eq. 3) then   
            do j=1,3
             aamat_esh(npg+(j-1)*k,1:3*k)=0.0
             aamat_esh(npg+(j-1)*k,npg+(j-1)*k)=ksh_tmp

             aamat_esh(npg+(j-1)*k,bodypoint(1)+(j-1)*k)=
     &              aamat_esh(npg+(j-1)*k,bodypoint(1)+(j-1)*k)-ksh_tmp
             aamat_esh(npg+(j-1)*k,bodypoint(2)+(j-1)*k)=
     &              aamat_esh(npg+(j-1)*k,bodypoint(2)+(j-1)*k)-ksh_tmp
             aamat_esh(npg+(j-1)*k,bodypoint(3)+(j-1)*k)=
     &              aamat_esh(npg+(j-1)*k,bodypoint(3)+(j-1)*k)+ksh_tmp

             aamat_esh(bodypoint(1)+(j-1)*k,1:3*k)=0.0
             aamat_esh(bodypoint(1)+(j-1)*k,bodypoint(1)+(j-1)*k)=
     &              ksh_tmp

             aamat_esh(bodypoint(2)+(j-1)*k,1:3*k)=0.0
             aamat_esh(bodypoint(2)+(j-1)*k,bodypoint(2)+(j-1)*k)=
     &              ksh_tmp
            enddo
         endif
      end do   


      do np=1,ns_ibm_i_esh(ibdy)  
         npg=ns_ibm_r_esh(ibdy)+np
         bodypoint(1)=boundrylist_esh(ibdy,np,1)
         bodypoint(2)=boundrylist_esh(ibdy,np,2)
         bodypoint(3)=boundrylist_esh(ibdy,np,3)
		 
         if(bndycnd_esh(ibdy,npg) .eq. 1) then		 
            fibm1_esh(ibdy,npg)=0.0
            fibm2_esh(ibdy,npg)=0.0
            fibm3_esh(ibdy,npg)=0.0
         elseif(bndycnd_esh(ibdy,npg) .eq. 2) then
            fibm1_esh(ibdy,npg)=ksh_tmp*coef_iter
     &      *(X0_np1_esh(npg,1)-gx_bp_esh(ibdy,npg))
            fibm1_esh(ibdy,bodypoint(1))=
     &             ksh_tmp*coef_iter
     &      *(X0_np1_esh(bodypoint(1),1)-gx_bp_esh(ibdy,bodypoint(1)))

            fibm1_esh(ibdy,bodypoint(2))=
     &             ksh_tmp*coef_iter
     &      *(X0_np1_esh(bodypoint(2),1)-gx_bp_esh(ibdy,bodypoint(2)))

            fibm2_esh(ibdy,npg)=ksh_tmp*coef_iter
     &      *(X0_np1_esh(npg,2)         -gy_bp_esh(ibdy,npg))

            fibm2_esh(ibdy,bodypoint(1))=
     &             ksh_tmp*coef_iter
     &      *(X0_np1_esh(bodypoint(1),2)-gy_bp_esh(ibdy,bodypoint(1)))

            fibm2_esh(ibdy,bodypoint(2))=
     &             ksh_tmp*coef_iter
     &      *(X0_np1_esh(bodypoint(2),2)-gy_bp_esh(ibdy,bodypoint(2)))

            fibm3_esh(ibdy,npg)=ksh_tmp*coef_iter
     &      *(X0_np1_esh(npg,3)         -gz_bp_esh(ibdy,npg))

            fibm3_esh(ibdy,bodypoint(1))=
     &             ksh_tmp*coef_iter
     &      *(X0_np1_esh(bodypoint(1),3)-gz_bp_esh(ibdy,bodypoint(1)))

            fibm3_esh(ibdy,bodypoint(2))=
     &             ksh_tmp*coef_iter
     &      *(X0_np1_esh(bodypoint(2),3)-gz_bp_esh(ibdy,bodypoint(2)))
		 
         elseif(bndycnd_esh(ibdy,npg) .eq. 3) then	!need to change
             fibm1_esh(ibdy,npg)=0.0

             fibm2_esh(ibdy,npg)=0.0

             fibm3_esh(ibdy,npg)=0.0

            fibm1_esh(ibdy,bodypoint(1))=
     &             ksh_tmp*coef_iter
     &      *(X0_np1_esh(bodypoint(1),1)-gx_bp_esh(ibdy,bodypoint(1)))

            fibm1_esh(ibdy,bodypoint(2))=
     &             ksh_tmp*coef_iter
     &      *(X0_np1_esh(bodypoint(2),1)-gx_bp_esh(ibdy,bodypoint(2)))

            fibm2_esh(ibdy,bodypoint(1))=
     &             ksh_tmp*coef_iter
     &      *(X0_np1_esh(bodypoint(1),2)-gy_bp_esh(ibdy,bodypoint(1)))

            fibm2_esh(ibdy,bodypoint(2))=
     &             ksh_tmp*coef_iter
     &      *(X0_np1_esh(bodypoint(2),2)-gy_bp_esh(ibdy,bodypoint(2)))

            fibm3_esh(ibdy,bodypoint(1))=
     &             ksh_tmp*coef_iter
     &      *(X0_np1_esh(bodypoint(1),3)-gz_bp_esh(ibdy,bodypoint(1)))

            fibm3_esh(ibdy,bodypoint(2))=
     &             ksh_tmp*coef_iter
     &      *(X0_np1_esh(bodypoint(2),3)-gz_bp_esh(ibdy,bodypoint(2)))

         endif
		 
      enddo

      if(allocated(aacsr))  then 
        deallocate(iacsr, jacsr,aacsr)
      endif
        k=ns_ibm_r_esh(i)+ns_ibm_i_esh(i)
        allocate(iacsr(ns_ibm_esh*3))     
        ntemi=0
        do noj=1,3*k
        iacsr(noj)=ntemi+1
        do noi=1,3*k
           ksh_tmp=aamat_esh(noj,noi)
           if(abs(ksh_tmp) .ge. 1.0d-20) then
            ntemi=ntemi+1
           endif
         enddo
         enddo
         ntermiMAX=ntemi+1 
         allocate(aacsr(ntermiMAX),jacsr(ntermiMAX))
        iacsr=0
        aacsr=0.0
        jacsr=0

      ntemi=0
      do noj=1,3*k
      iacsr(noj)=ntemi+1
      do noi=1,3*k
         ksh_tmp=aamat_esh(noj,noi)
         if(abs(ksh_tmp) .ge. 1.0d-20) then
            ntemi=ntemi+1
            aacsr(ntemi)=ksh_tmp
            jacsr(ntemi)=noi
         endif
      enddo
      enddo

      iacsr(noj)=ntemi+1 
      j=ns_ibm_r_esh(i)+ns_ibm_i_esh(i)
       ddU_np1_esh=0.0

      if(SolverILU .eq. 1) then
      if(iter .eq. 1) then
       ilucal_flag=.true.
      else
       ilucal_flag=.false.
      endif
      else
       ilucal_flag=.true.
      endif

       call pmgmres_ilu2_crBigRHS (j
     &     ,ntermiMAX
     &     ,iacsr(1: 3*j+1)
     &     ,jacsr(1: ntermiMAX)
     &     ,aacsr(1: ntermiMAX)
     &     ,ddU_np1_esh(1:j,1)
     &     ,ddU_np1_esh(1:j,2)
     &     ,ddU_np1_esh(1:j,3)
     &     ,fibm1_esh(i,1:j)
     &     ,fibm2_esh(i,1:j)
     &     ,fibm3_esh(i,1:j)
     &     ,SolverOutiter,SolverIniter
     &     ,Solverabstol,Solverreltol,SolverPre,ilucal_flag,monitorON)

      X_np1_esh(1:j,1:3) =X_np1_esh(1:j,1:3)
     &     +ddU_np1_esh(1:j,1:3)

      dxcont(1:3)=0.0
      outcont(1:3)=0.0
      do npg=1,(ns_ibm_r_esh(i)+ns_ibm_i_esh(i))
        dxcont(1:3)=dxcont(1:3)+ddU_np1_esh(npg,1:3)**2
        outcont(1:3)=outcont(1:3)
     &     +(X_np1_esh(npg,1:3)-X_n_esh(npg,1:3))**2
       enddo

       dxcont(1)=sqrt(dxcont(1)+dxcont(2)+dxcont(3))
       outcont(1)=sqrt(outcont(1)+outcont(2)+outcont(3))
       if(monitorON)
     & print*, 'Error= ',j,dxcont(1),outcont(1),dxcont(1)/outcont(1)


        do npg=1,ns_ibm_r_esh(i)+ns_ibm_i_esh(i)
           dX_np1_esh(npg,1:3)=
     &       timeMarchcoef(10)*(X_np1_esh(npg,1:3)-X_n_esh(npg,1:3))
     &      +timeMarchcoef(11)*dX_n_esh(npg,1:3)
     &      +timeMarchcoef(12)*ddX_n_esh(npg,1:3)
          ddX_np1_esh(npg,1:3)=
     &       timeMarchcoef(13)*(X_np1_esh(npg,1:3)-X_n_esh(npg,1:3))
     &      +timeMarchcoef(14)*dX_n_esh(npg,1:3)
     &      +timeMarchcoef(15)*ddX_n_esh(npg,1:3)
        enddo
!==============================================   END ITERATION
       if(dxcont(1)/outcont(1) .lt. maxErrorstruct) exit

      enddo       
      do npg=1,ns_ibm_r_esh(ibdy)+ns_ibm_i_esh(ibdy)
         gx_ibm_massive_esh(ibdy,npg)=X_np1_esh(npg,1)
         gy_ibm_massive_esh(ibdy,npg)=X_np1_esh(npg,2)
         gz_ibm_massive_esh(ibdy,npg)=X_np1_esh(npg,3)

         vibm1_esh(ibdy,npg)=dX_np1_esh(npg,1)
         vibm2_esh(ibdy,npg)=dX_np1_esh(npg,2)
         vibm3_esh(ibdy,npg)=dX_np1_esh(npg,3)

         aibm1_esh(ibdy,npg)=ddX_np1_esh(npg,1)
         aibm2_esh(ibdy,npg)=ddX_np1_esh(npg,2)
         aibm3_esh(ibdy,npg)=ddX_np1_esh(npg,3)
       
       enddo

       if(flag_fractal_esh(ibdy)) then
         jq=nifractal_esh(ibdy)
         jq2=3*jq
         do ne=1,numelr(ibdyg)
           do i=1,ngau 
              ksh_tmp=smatsave_esh(1,i,ne)
              rtmpusrfn(1:jq) =Xfractal_esh(1:jq,i,ne,ibdy)
              rtmpusrfn(jq+1:2*jq)=Xfractal_esh(jq2+1:jq2+jq,i,ne,ibdy)

              Xfractal_esh(1:jq,i,ne,ibdy)=
     &             matmul(Bfractal2_esh(1:jq,1:jq,1,ibdy)
     &                   ,rtmpusrfn(1:jq))
     &            +matmul(Cfractal2_esh(1:jq,1:jq,1,ibdy)
     &                   ,rtmpusrfn(jq+1:2*jq))
     &            +Dfractal2_esh(1:jq,1,ibdy)*ksh_tmp

              Xfractal_esh(jq2+1:jq2+jq,i,ne,ibdy)= 
     &             Xfractal_esh(jq2+1:jq2+jq,i,ne,ibdy)
     &            +(
     &             Xfractal_esh(1:jq,i,ne,ibdy)
     &             -(1.0+dt)*rtmpusrfn(1:jq)
     &             )/(dt*gamma_Coef(ibdyg))


              ksh_tmp=smatsave_esh(2,i,ne)
              rtmpusrfn(1:jq) =Xfractal_esh(jq+1:2*jq,i,ne,ibdy)
              rtmpusrfn(jq+1:2*jq)=
     &                 Xfractal_esh(jq2+jq+1:jq2+2*jq,i,ne,ibdy)

              Xfractal_esh(jq+1:2*jq,i,ne,ibdy)=
     &             matmul(Bfractal2_esh(1:jq,1:jq,2,ibdy)
     &                   ,rtmpusrfn(1:jq))
     &            +matmul(Cfractal2_esh(1:jq,1:jq,2,ibdy)
     &                   ,rtmpusrfn(jq+1:2*jq))
     &            +Dfractal2_esh(1:jq,2,ibdy)*ksh_tmp

              Xfractal_esh(jq2+jq+1:jq2+2*jq,i,ne,ibdy)= 
     &             Xfractal_esh(jq2+jq+1:jq2+2*jq,i,ne,ibdy)
     &            +(
     &             Xfractal_esh(jq+1:2*jq,i,ne,ibdy)
     &             -(1.0+dt)*rtmpusrfn(1:jq)
     &             )/(dt*gamma_Coef(ibdyg))

              ksh_tmp=smatsave_esh(3,i,ne)
              rtmpusrfn(1:jq) =Xfractal_esh(2*jq+1:3*jq,i,ne,ibdy)
              rtmpusrfn(jq+1:2*jq)=
     &                 Xfractal_esh(jq2+2*jq+1:jq2+3*jq,i,ne,ibdy)

              Xfractal_esh(2*jq+1:3*jq,i,ne,ibdy)=
     &             matmul(Bfractal2_esh(1:jq,1:jq,3,ibdy)
     &                   ,rtmpusrfn(1:jq))
     &            +matmul(Cfractal2_esh(1:jq,1:jq,3,ibdy)
     &                   ,rtmpusrfn(jq+1:2*jq))
     &            +Dfractal2_esh(1:jq,3,ibdy)*ksh_tmp

              Xfractal_esh(jq2+2*jq+1:jq2+3*jq,i,ne,ibdy)= 
     &             Xfractal_esh(jq2+2*jq+1:jq2+3*jq,i,ne,ibdy)
     &            +(
     &             Xfractal_esh(2*jq+1:3*jq,i,ne,ibdy)
     &             -(1.0+dt)*rtmpusrfn(1:jq)
     &             )/(dt*gamma_Coef(ibdyg))
           enddo
         enddo                  
       endif


        deallocate(
     &       aamat_esh
     &      ,fibmRHS1_esh,fibmRHS2_esh,fibmRHS3_esh
     &      ,temp_ibmtype,a3bar_Dr
     &      ,Forcetemp1
     &      ,temp_ibmtype2,temp_ibmtype3
     &      ,a3bar_Drs,a3_Dr
     &      ,Da_ab_Dr,a3tilde_Dr,Db_ab_Dr
     &      ,Da_ab_Drs,a3tilde_Drs,a3_Drs,Depsilon_ab_r,Dkappa_ab_r
     &      ,Db_ab_Drs,Depsilon_ab_rs
     &      ,Dkappa_ab_rs
     &      ,kb11,kb12,kb13
     &      ,kb21,kb22,kb23
     &      ,kb31,kb32,kb33
     &      ,kkb,kkbf
     &          )

      endif !Genalpha_timesolver((ibdyg))

      else
            Print*, 'this Shell model is not recognized'
            Print*, 'ShellModelType_esh of body',ibdyg 
      endif !ShellModelType_esh

