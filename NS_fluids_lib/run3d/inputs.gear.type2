

# ------------------  INPUTS TO MAIN PROGRAM  -------------------
# CHANGES FROM PAST VERSION:
# no more raster stuff (hdf), add mac.mac_abs_tol
# blob.* now becomes ns.*
#
max_step  =  20000   # maximum timestep
stop_time =  0.02  # maximum problem time 0.012

# ------------------  INPUTS TO CLASS AMR ---------------------
# set up for bubble
# thickness of gear is 1.5x2=3
# so multiply drag by 3/1.125=2.67
geometry.coord_sys      = 0        # 0 => cart, 1 => RZ
geometry.prob_lo   =   -18.0  0.0 -18.0
geometry.prob_hi   =   18.0  1.125 18.0
#ns.show_mem=1  # 1 => do a "top" every time step to check node usage.
ns.show_mem=0
#geometry.is_periodic = 0 0 1
ns.project_solver_type=0 # 0MGPCG 1PCG 2 MINV=I
ns.minimum_relative_error=1.0e-18
ns.initial_project_cycles=10
ns.initial_cg_cycles=10

ns.num_materials=3
ns.num_species_var=0

ns.FSI_flag=0 0 2

mg.verbose = 0
cg.verbose = 0
# set above to 2 for maximum verbosity
mg.nu_f = 40
mg.nu_0 = 1   # 1 - v-cycle 2 - w-cycle
cg.maxiter = 9000
mg.bot_atol = 1.0e-13
mg.rtol_b = -0.01
Lp.v = 0

Lp.smooth_type=2  # 0 GSRB 1 ICRB 2 ILU
Lp.bottom_smooth_type=2

amr.n_cell    = 128 4 128
amr.max_level =  1  # set to 4 for production runs.

# 0- 1 level 1- 2 levels  2- 3 levels
amr.regrid_int      = 1       # how often to regrid
amr.n_error_buf     = 2 2 2 2 2  # number of buffer cells in error est
amr.grid_eff        = 0.85   # what constitutes an efficient grid MS
# above was .55 (smaller=> less boxes)
amr.blocking_factor = 4    # block factor in grid generation MS
amr.check_int       = 100   # number of timesteps between checkpoints
amr.check_file      = chk     # root name of checkpoint file
amr.plot_int	  = 1 # 100 CHANGE TO 1
amr.plot_file       = plt 
amr.grid_log        = grdlog  # name of grid logging file
amr.max_grid_size   = 64
amr.plotfile_on_restart=1
#amr.restart         = chk00100
#amr.trace   =1

# ------------------  INPUTS TO PHYSICS CLASS -------------------
ns.dt_cutoff      = 5.0e-8  # level 0 timestep below which we halt

mac.mac_abs_tol    = 1.0e-11


ns.redist_on_init=0
ns.conserve_vof=0

ns.cfl            = 0.5      # cfl number for hyperbolic system MS
ns.init_shrink    = 1.0      # scale back initial timestep
ns.change_max=1.01      # scale back initial timestep
ns.visc_coef      = 0.01
ns.gravity        = 0.0 
ns.tension        = 0.0 0.0 0.0
#ns.fixed_dt	  = 1.e-04    # dz_coarse=1/64  max_level=1 => dz=1/128
                             # u dt = (1/2) dz  dt=1/256
ns.sum_interval   = 20       # timesteps between computing mass 

ns.axis_dir=2
ns.vorterr=999999.0
ns.rgasinlet=1.57
# gear radius 7.5 cm
# radians/s=RPM * 2 pi/60=1200
# tip velocity about 7.5*1200=9000 cm/s
# Artificial viscosity necessary to resolve this speed:
# u dt = dx
# mu dt = rho dx^2
# mu=rho dx^2/(dx/u)=u rho dx=9000*0.001*(18/128)=1.27 
# expected power loss for gear 2 at 1200 rad/s is 500 watts.
# for half domain problem, expected power loss is 250 watts.
# if domain thickness is 1.125, then expected power loss
# is 500/(3/1.125)=187.5
# power = torque dot w
# units: kg m/s^2 m 1/s =1000 g m^2/s^3=10^7 cm^2/s^3
# expected "DRAG" is: 187 x 10^7=1.9 x 10^9
ns.vinletgas=11459.16  # RPM of gear
ns.twall=5.0
ns.advbot=0.0  # liquid jet inflow velocity
ns.adv_vel=0.0   # inflow velocity of gas
ns.adv_dir=1  # x direction
ns.heatviscconst=0.0 0.0 0.0
ns.viscconst=1.0 0.02 1.0 # value to resolve flow 1.27
ns.denconst=1.0 0.001 1.0 
ns.material_type=0 0 999
ns.xblob=999999  # position of jet at inflow
ns.yblob=999999
ns.zblob=999999
ns.zblob2=-40.0  # free surface height (>zhi if all liquid <zlo if all gas)
ns.radblob=0.5  # positive if liquid jet comes into domain
ns.denfact=1.0
ns.velfact=0.0
ns.probtype=563  # gear problem

#ns.mem_debug = 1
ns.v = 1
#ns.d = 1

# ----------------  PROBLEM DEPENDENT INPUTS
ns.lo_bc          = 5 4 5
ns.hi_bc          = 5 4 5  

# >>>>>>>>>>>>>  BC FLAGS <<<<<<<<<<<<<<<<
# 0 = Interior           3 = Symmetry
# 1 = Inflow             4 = SlipWall
# 2 = Outflow            5 = NoSlipWall

# turn any of these on to generate run-time timing stats


# select single or double precision of FAB output data
#        default is whatever precision code is compiled with.
#fab.precision = FLOAT     # output in FLOAT or DOUBLE
fab.precision = DOUBLE    # output in FLOAT or DOUBLE

