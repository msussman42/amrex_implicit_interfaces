# ------------------  INPUTS TO MAIN PROGRAM  -------------------
# CHANGES FROM PAST VERSION:
# no more raster stuff (hdf), add mac.mac_abs_tol
# blob.* now becomes ns.*
#
max_step  = 100000     # maximum timestep
#max_step  =  2    # maximum timestep
stop_time =  300  # maximum problem time

# ------------------  INPUTS TO CLASS AMR ---------------------
# set up for bubble
geometry.coord_sys      = 0        # 0 => cart, 1 => RZ
geometry.prob_lo   =  0.0 0.0 0.0
geometry.prob_hi   = 12.0 2.0 4.0
geometry.is_periodic = 1 1 0
#ns.implicit_surface_tension=1

# multigrid class
#mg.verbose = 1
#cg.verbose = 1
# set above to 2 for maximum verbosity
mg.nu_f = 40
mg.nu_0 = 1   # 1 - v-cycle 2 - w-cycle
cg.maxiter = 200
mg.bot_atol = 1.0e-10
mg.rtol_b = -0.01
#Lp.v = 1
amr.n_cell    = 24 4 8
amr.max_level = 3  #  4 for production runs
# 0- 1 level 1- 2 levels  2- 3 levels
amr.regrid_int      = 1       # how often to regrid
amr.n_error_buf     = 2 2 2 2 2    # number of buffer cells in error est
amr.grid_eff        = 0.85   # what constitutes an efficient grid
# above was .55 (smaller=> less boxes)
amr.blocking_factor = 4       # block factor in grid generation
amr.check_int       = 100      # number of timesteps between checkpoints
amr.check_file      = chk     # root name of checkpoint file
amr.plot_int        = 100
amr.plot_file       = plt 
amr.grid_log        = grdlog  # name of grid logging file
amr.max_grid_size   = 512
#amr.restart         = chk13200
#amr.trace   =1

# ------------------  INPUTS TO PHYSICS CLASS -------------------
ns.dt_cutoff      = 0.000005  # level 0 timestep below which we halt

mac.mac_abs_tol    = 1.0e-8

ns.pcav=220.2726
ns.dencav=0.0001
ns.pchopp=220.2726
ns.denchopp=0.0001
ns.soundchopp=1.0
ns.bubble_pressure=0.0
ns.bubble_density=0.001

ns.hydrostatic_pressure=10.0
ns.visual_lo = 5   0  0 
ns.visual_hi = 19  512 512 


ns.overlap=0.0
ns.is_twophase=1

ns.cfl            = 1.0      # cfl number for hyperbolic system
ns.init_shrink    = 1.0      # scale back initial timestep
ns.change_max=1.01      # scale back initial timestep
ns.visc_coef      = 1.0     # always 1 for shear thinning or
          # (eta_solvent/eta_total)*(1/Re(based on eta_total))
mac.visc_abs_tol   = 1.0e-8
ns.gravity        = -980.0  # body force  (gravity in MKS units)
ns.gravityangle = 0.0
ns.tension        = 25.0   # interfacial tension force
#ns.fixed_dt	  = 0.0025   # hardwire dt
ns.sum_interval   = 1        # timesteps between computing mass 

# axis_dir=0 newtonian liquid
# 0<axis_dir<=7 shear thinning
# axis_dir=12 viscoelastic inside drop (LS>0 inside, LS<0 outside)
# probtype=1, axis_dir=11
ns.axis_dir=11 # LS<0 inside of drop ("gas")  LS>0 outside drop ("liquid")
ns.transposegradu=0
ns.is_viscoelastic=1
ns.elastic_time=5.0  # relaxation time or Deborah number
ns.elastic_viscosity=1.0  # c*eta_solvent or c*eta_solvent/(eta_total*Re)
ns.polymer_factor=0.2  # 1/L
ns.Carreau_alpha=2.0
ns.Carreau_beta=1.0
ns.Carreau_n=0.5

ns.vorterr=999999.0
ns.rgasinlet=1.57
# if xblob10=0, then u(zhi)=vinletgas, u(0)=-vinletgas
# if xblob10=1.0, zblob=zhi/2, then u(zhi)=vinletgas, u(0)=radblob10
ns.vinletgas=41.47
ns.xblob10=1.0   # set xblob10=1 inorder to override bc at the bottom
ns.radblob10=0.0 # this will be the overridden velocity at the bottom
ns.twall=0.1
ns.advbot=0.0
ns.adv_vel=0.0
ns.adv_dir=3
ns.viscunburn=1.2411215  # (1+c)eta_s
ns.viscburn=0.2411215  # bubble viscosity or viscosity ratio
ns.viscvapor=0.2411215 # bubble viscosity or viscosity ratio
ns.tcenter=2.0  # adapt if radius of curvature<tcenter*dx
ns.denspread=2.0
ns.denwater=1.0  # solvent density or 1.0
ns.denair=1.0  # bubble density or density ratio
ns.denvapor=1.0 # bubble density or density ratio
ns.xblob=6.0
ns.yblob=1.0
ns.zblob=2.0  # zhi=2*zblob
ns.radblob=0.5
ns.denfact=1.0
ns.velfact=0.0
ns.probtype=1

proj.bogus_value = 5.0e+5
proj.Pcode = 0
#proj.Pcode = 2

#ns.mem_debug = 1
#ns.v = 1
#ns.d = 1

# ----------------  PROBLEM DEPENDENT INPUTS
ns.lo_bc          = 0 0 5
ns.hi_bc          = 0 0 5

# >>>>>>>>>>>>>  BC FLAGS <<<<<<<<<<<<<<<<
# 0 = Interior           3 = Symmetry
# 1 = Inflow             4 = SlipWall
# 2 = Outflow            5 = NoSlipWall

# turn any of these on to generate run-time timing stats


# select single or double precision of FAB output data
#        default is whatever precision code is compiled with.
#fab.precision = FLOAT     # output in FLOAT or DOUBLE
fab.precision = DOUBLE    # output in FLOAT or DOUBLE

# --------------------------------------------------------------------
# -----       CONTOUR PLOTTING ONLY AVAILABLE IN 2-D           -------
# --------------------------------------------------------------------
# uncomment the next line to set a default level for contour plotting
# contour.level = 1
#
# These variables control interactive contour plotting on UNIX systems
# file_name   = root name of postscript file (will be appended with ".ps")
# var_name    = name of thermodynamic variable to plot
# device      = 1  => XWINDOW, 2 = POSTSCRIPT, 3 = both
# freq        = intervals between plots (-1 = off)
# n_cont      = number of contour lines per plot
# sho_grd     = 0 => don't show grid placement, 1 => show grid placement
#               2 => show grid placement and overlay velocity vector plot
#               3 => same as 2 except show Up and not Ud
# win_siz     = number of pixels in max window direction
#
#             file_name  var_name   device  freq  n_cont  sho_grd win_siz sval sdir sstr
contour.verbose = 1
#contour.plot = triple triple   1       1     -1     2   400  6.0  0  yz
contour.plot = triple triple   1       1     -1     2   600  1.0  1  xz
#contour.plot = triple triple   1       1     -1     2   600  2.0  2  xy
#contour.plot = triple triple   2     100    -1     2   400  6.0  0  yz
#contour.plot = triple triple   2     100    -1     2   400  1.0  1  xz
#contour.plot = triple triple   2     100    -1     2   400  2.0  2  xy
