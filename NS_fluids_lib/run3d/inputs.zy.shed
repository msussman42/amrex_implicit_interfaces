

# ------------------  INPUTS TO MAIN PROGRAM  -------------------
# CHANGES FROM PAST VERSION:
# no more raster stuff (hdf), add mac.mac_abs_tol
# blob.* now becomes ns.*
#
max_step  =  99999    # maximum timestep
#max_step  =  2    # maximum timestep
#stop_time =  0.9375  # 30 for translating  0.3125 (T) for Seo coarse test
#stop_time=2.361  # 0.787 (T) for Seo convergence study
stop_time=15.0  # 3 x (T)=15 for body-fit compare

# ------------------  INPUTS TO CLASS AMR ---------------------
# set up for bubble
geometry.coord_sys      = 0        # 0 => cart, 1 => RZ
geometry.prob_lo   =  0.0 0.0 0.0 
#geometry.prob_hi   =  4.0 2.0  # 64x16 for translating  4x2 for Seo test
geometry.prob_hi   =  1.0 8.0 16.0  # body fit compare

ns.min_visc_theta=0.1  # 0.1
ns.sweeps_to_predict_velocity=0

# 0=GSRB 1=ICRB 2=ILU
Lp.smooth_type=2
Lp.bottom_smooth_type=2
ns.minimum_relative_error=1.0e-18
ns.initial_project_cycles=0
ns.project_solver_type=0
ns.initial_cg_cycles=10

# multigrid class
mg.verbose = 0
cg.verbose = 0
# set above to 2 for maximum verbosity
mg.nu_f = 40
mg.nu_0 = 1   # 1 - v-cycle 2 - w-cycle
cg.maxiter = 200
mg.bot_atol = 1.0e-13
mg.rtol_b = -0.01
Lp.v = 1

#amr.n_cell    = 40 20  # 128x32 translating 40x20 Seo coarse test
#amr.n_cell=64 32        # Seo convergence study
amr.n_cell=2 64 128        # body fit compare.
amr.max_level =  3  # 3,4,5,6 translating  0 Seo coarse test  6 body-fit comp
# 0- 1 level 1- 2 levels  2- 3 levels
amr.regrid_int      = 1       # how often to regrid
amr.n_error_buf     = 4 4 4 4 4 4 4    # number of buffer cells in error est
amr.grid_eff        = 0.75   # what constitutes an efficient grid
# above was .55 (smaller=> less boxes)
amr.blocking_factor = 2       # block factor in grid generation
amr.check_int       = 100     # number of timesteps between checkpoints
amr.check_file      = chk     # root name of checkpoint file
amr.plot_int        = 100
amr.plot_file       = plt 
amr.grid_log        = grdlog  # name of grid logging file
amr.max_grid_size   = 1024
#amr.restart         = chk00600
#amr.trace   =1

# ------------------  INPUTS TO PHYSICS CLASS -------------------
ns.dt_cutoff      = 0.000005  # level 0 timestep below which we halt

mac.mac_abs_tol    = 1.0e-11


ns.cfl            = 0.533    # cfl number for hyperbolic system
ns.init_shrink    = 1.0      # scale back initial timestep
ns.change_max     = 1.1      # scale back initial timestep
#ns.visc_coef      = 0.032   # 0.05 translating 1/31 Seo coarse test
#ns.visc_coef=0.0127          # 1/78.5 Seo convergence test
ns.visc_coef=0.01          # 1/100 body fit compare
mac.visc_abs_tol   = 1.0e-8
ns.gravity        = 0.0     # body force  (gravity in MKS units)
ns.tension        = 0.0 0.0 0.0 0.0 0.0 0.0
#ns.fixed_dt	  = 0.003125 # comment out for translating  
#ns.fixed_dt	  = 0.001574 # dt=0.002T=0.002 * 0.787  Seo convergence test
ns.fixed_dt	  = 0.008 # compare w/body fit  dt=CFL*dx
ns.sum_interval   = 1        # timesteps between computing mass 

ns.axis_dir=0  
ns.vorterr=999999.0
ns.rgasinlet=1.57
ns.vinletgas=0.0
ns.twall=0.1
ns.advbot=0.0  # -1.0 if moving cylinder  0 if stationary  0 for Seo test
ns.adv_vel=0.0 # 0 if moving cylinder  1.0 if stationary  0 for Seo test
#ns.xblob4=0.3125 # Seo => T=1/f  f=3.2
#ns.xblob4=0.787 # Seo convergence test => T=1/f  f=1.27
ns.xblob4=5.0 # f=1/5 T=5 body-fit compare
ns.radblob4=1.0  # UU override for calculating drag (comparison w/body-fit)
#ns.radblob4=1.1269  # mistake in Seo paper, they scale drag by UU=sqrt(f) 
                     #instead of UU=f
#ns.xblob3=0.05   # Seo => x0=1/(2 pi f)
#ns.xblob3=0.125   # Seo => x0=1/(2 pi f) convergence test
ns.xblob3=0.7957   # Seo => x0=1/(2 pi f) body fit compare
ns.adv_dir=3  # z direction
ns.viscconst=1.0 1.0 1.0 1.0
ns.denconst=1.0 1.0 1.0 1.0
ns.xblob=0.5  # 24 stationary cylinder  48 moving cylinder  2 Seo coarse test
              # 32 body-fit compare
ns.yblob=0.0
ns.zblob=8.0 
ns.radblob=0.5
ns.denfact=1.0
ns.velfact=0.0
ns.probtype=32

proj.bogus_value = 5.0e+5
proj.Pcode = 0
#proj.Pcode = 2

#ns.mem_debug = 1
ns.v = 1
#ns.d = 1

# ----------------  PROBLEM DEPENDENT INPUTS
ns.lo_bc          = 4 3 2    # 2 3 if moving cylinder  1 3 if stationary
ns.hi_bc          = 4 2 2    # 2 2 if moving cylinder  2 5 if stationary

# >>>>>>>>>>>>>  BC FLAGS <<<<<<<<<<<<<<<<
# 0 = Interior           3 = Symmetry
# 1 = Inflow             4 = SlipWall
# 2 = Outflow            5 = NoSlipWall

# turn any of these on to generate run-time timing stats


# select single or double precision of FAB output data
#        default is whatever precision code is compiled with.
#fab.precision = FLOAT     # output in FLOAT or DOUBLE
fab.precision = DOUBLE    # output in FLOAT or DOUBLE
fab.do_initval=0

