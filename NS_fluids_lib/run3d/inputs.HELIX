# This is an example of inputs file that would go with a user defined
# problem defined in PROB.F90, GLOBALDIST.F90, 
# SOLIDFLUID.F90, and sci_clsvof.F90.
#
# The steps for creating ones' own new problem setup:
# 1. pick a probtype that is not used (in this example: probtype.eq.401)
# 2. create a fortran module that has routines for initial level set functions,
#    temperature, velocity, ..., boundary conditions, source terms
#    (in this example: helix.F90)
# 3. add the module file name to iamrlib/Make.package (put it 
#    immediately following sample_user_defined.F90)
# 4. modify PROB.F90, GLOBALDIST.F90, SOLIDFLUID.F90 and sci_clsvof.F90 
#    to call the new user defined routines when 
#    probtype.eq.<selected probtype>  (search for keyword HELIX (or helix)
#    in PROB.F90,
#    GLOBALDIST.F90, SOLIDFLUID.F90, and sci_clsvof.F90  for examples)
#
# in future: it will be possible to take a CAD file from AUTODESK (for example)
# and have it automatically converted into a levelset function.

max_step  =  99999    # maximum timestep
#max_step  =  2    # maximum timestep
stop_time =  10.0

ns.extend_pressure_into_solid=1

# liquid,gas,solid
ns.num_materials=3
ns.num_species_var=0
ns.num_divu_outer_sweeps=1

# 0=cell
# 1=face

ns.post_init_pressure_solve=1
ns.slice_dir=1 # 0..sdim-1
ns.xslice=0.0 0.0 0.0

# ------------------  INPUTS TO CLASS AMR ---------------------
geometry.coord_sys      = 0        # 0 => cart, 1 => RZ
geometry.prob_lo   =  -3.0 -1.5 -1.5
geometry.prob_hi   =  3.0  1.5  1.5  

# multigrid class
mg.verbose = 0
cg.verbose = 0
# set above to 2 for maximum verbosity
mg.nu_f = 40
mg.nu_0 = 1   # 1 - v-cycle 2 - w-cycle
cg.maxiter = 400
mg.bot_atol = 1.0e-12
mg.rtol_b = -0.01
Lp.v = 0
# continuous_mof=0 regular MOF
# continuous_mof=1 CMOF
ns.continuous_mof=0
ns.MOFITERMAX=30
# EILE_flag=-1 Weymouth and Yue
# EILE_flag=1 alternate EI-LE
ns.EILE_flag=1
ns.ns_tiling=false
ns.project_solver_type=0 # 0MGPCG 1PCG 2 MINV=I

ns.projection_pressure_scale=1.0
ns.minimum_relative_error=1.0e-24
ns.initial_project_cycles=3  # number of initial jacobi iterations
ns.initial_cg_cycles=3  # number of MGPCG steps to do in order to get
                         # decent sized residual.

# level 0 is very coarse so that conversion from Lagrangian representation
# to Eulerian representation is fast.
amr.n_cell    = 32 16 16 
amr.max_level =  1

# 0- 1 level 1- 2 levels  2- 3 levels
amr.regrid_int      = 1       # how often to regrid
amr.n_error_buf     = 4 4 4 4 4 4  # number of buffer cells in error est
amr.grid_eff        = 0.9   # what constitutes an efficient grid
# above was .55 (smaller=> less boxes)
amr.blocking_factor = 4       # block factor in grid generation
amr.check_int       = 100     # number of timesteps between checkpoints
amr.check_file      = chk     # root name of checkpoint file
amr.plot_int        = 10     # 10 for debug, 100 for production run? 
amr.plot_file       = plt 
amr.grid_log        = grdlog  # name of grid logging file
amr.max_grid_size   = 16
#amr.restart         = chk04600
#amr.trace   =1

# ------------------  INPUTS TO PHYSICS CLASS -------------------
ns.dt_cutoff      = 1.0e-11  # level 0 timestep below which we halt

mac.mac_abs_tol    = 1.0e-10

# 1=always take sound speed into account
# 2=never take sound speed into account
# 0=take sound speed into account at t=0 only if compressible material
# water, vacuum, sphere
#ns.shock_timestep=1 1 2  # COMPRESSIBLE
ns.shock_timestep=2 2 2  # INCOMPRESSIBLE
ns.cfl            = 0.5    # cfl number for hyperbolic system
ns.init_shrink    = 0.5      # scale back initial timestep
ns.change_max=1.01    # scale back initial timestep
ns.visc_coef      = 1.0    # coef of viscosity
mac.visc_abs_tol   = 1.0e-8
ns.gravity        = 0.0
ns.gravityangle = 0.0
#ns.inflow_pressure=1.0e+6  # should not be used
#ns.outflow_pressure=1.0e+6  # this will be used at all outflow boundaries.
ns.tension        = 10.0 0.0 0.0 
#ns.fixed_dt	  = 0.01     # hardwire dt
ns.sum_interval   = 1        # timesteps between computing mass 

ns.axis_dir=0
ns.vorterr=0.0 0.0 0.0 0.0
ns.rgasinlet=1.57
ns.vinletgas=0.0
ns.twall=0.1
ns.advbot=0.0 
# we want the velocity in the constricted part to be ~ 1.0e+4 cm/s
# aspect ratio is 2mm/150 microns=13.3
ns.adv_vel=1.0
ns.adv_dir=1  # adv_dir=1..sdim+1
ns.viscconst=0.01 0.0001 0.01
ns.tempconst=293.0 293.0 293.0
ns.pressure_error_cutoff=0.0 0.0 0.0 0.0
ns.material_type=0 0 999 # INCOMPRESSIBLE
#ns.material_type=1 14  999 # COMPRESSIBLE (EOS_tait, EOS_air_rho2)
#ns.density_floor=0.9999577 0.9999999 # corresponds ~ 250 dyne/cm^2
#ns.density_ceiling=1.006 1.00000001  # corresponds ~ 10^9 dyne/cm^2
ns.density_floor=0.99 0.00099 0.99
ns.density_ceiling=1.01 0.0011 1.01
# see FORT_WALLFUNCTION in GODUNOV_3D.F90
# see getGhostVel in GODUNOV_3D.F90
ns.law_of_the_wall=0 0 0  # make 1 for law of the wall
ns.FSI_flag=0 0 2  # 1 (GLOBALDIST), 2 (cas (or related) file)
# refine_factor==0 => do not refine the LAG surface.
ns.FSI_refine_factor=0 0 0
# 1 Watt=10^7 ERG/S
# 1 W/(M K)=10^5 ERG/(S CM K)
# 1 ERG= 1 (gram cm^2/s^2)
# air: k=0.024 W/(M K)
# water: k=0.58 W/(M K)
# OPTION 1
ns.heatviscconst=0.0 0.0 0.0
ns.include_viscous_heating=0
ns.denconst=1.0 0.001 1.0
ns.xblob=-2.0
ns.yblob=0.0 
ns.zblob=0.0
ns.radblob=0.5
ns.denfact=1.0
ns.velfact=0.0
ns.probtype=401

#ns.mem_debug = 1
ns.v = 1
#ns.d = 1

# ----------------  PROBLEM DEPENDENT INPUTS
ns.lo_bc          = 1 5 5
ns.hi_bc          = 1 5 5
#ns.species_lo_bc  = 2 2 2
#ns.species_hi_bc  = 2 1 2

# >>>>>>>>>>>>>  BC FLAGS <<<<<<<<<<<<<<<<
# 0 = Interior           3 = Symmetry
# 1 = Inflow             4 = SlipWall
# 2 = Outflow            5 = NoSlipWall

# turn any of these on to generate run-time timing stats


# select single or double precision of FAB output data
#        default is whatever precision code is compiled with.
#fab.precision = FLOAT     # output in FLOAT or DOUBLE
fab.precision = DOUBLE    # output in FLOAT or DOUBLE

