max_step  =  999999   # maximum timestep
stop_time =  3.0  # maximum problem time

# R_theta=sqrt(pi/(2 theta - sin(2 theta))) R_0
# e=(1+cos(pi-theta))R_theta
# L=2 sin(pi-theta)R_theta
# if theta=60 degrees,
# R_theta=1.59923 * 1 = 1.59923
# e=1.59923/2=0.79962
# L=2.77
# if L=0.06348 cm U=1 cm/s then
# Re=rho L U/mu=(1)(0.06348)/0.01=6.348  (1/Re)=0.16
# We=rho U^2 L/sigma = 0.06348/70.9=8.95e-4  (1/We)=1117

geometry.coord_sys      = 0        # 0 => cart, 1 => RZ
geometry.prob_lo   =  0.0  0.0 0.0 
geometry.prob_hi   =  6.0  6.0 3.0
geometry.is_periodic = 0 0 0

# no interpolation of phi or curvature.
ns.EILE_flag=-1

# multigrid class
mg.verbose = 0
cg.verbose = 0
# set above to 2 for maximum verbosity
mg.nu_f = 40
mg.nu_0 = 1   # 1 - v-cycle 2 - w-cycle
cg.maxiter = 9000
mg.bot_atol = 1.0e-11
mg.rtol_b = -0.01
Lp.v = 1

ns.num_materials=3
ns.num_species_var=0

ns.projection_pressure_scale=10000.0

amr.n_cell    = 48 48 24
amr.max_level =  1


                      # contained on finest level.

ns.MOFITERMAX=15

ns.minimum_relative_error=1.0e-18
ns.initial_cg_cycles=10
ns.initial_project_cycles=10
ns.project_solver_type=0 # 0MGPCG 1PCG 2 MINV=I
# 0=GSRB 1=ICRB 2=ILU
Lp.smooth_type=2
Lp.bottom_smooth_type=2


amr.regrid_int      = 1       # how often to regrid
amr.n_error_buf     = 4 4 4 4 4 4 4 4   # number of buffer cells in error est
amr.grid_eff        = 0.8   # what constitutes an efficient grid
# above was .55 (smaller=> less boxes)
amr.blocking_factor = 4       # block factor in grid generation
amr.check_int       = 100     # number of timesteps between checkpoints
amr.check_file      = chk     # root name of checkpoint file
amr.plot_int        = 10       # CHANGE TO 100
amr.plot_file       = plt 
amr.grid_log        = grdlog  # name of grid logging file
amr.max_grid_size   = 32
#amr.restart         = chk0500
#amr.trace   =1

# ------------------  INPUTS TO PHYSICS CLASS -------------------
ns.dt_cutoff      = 1.0e-10  # level 0 timestep below which we halt

mac.mac_abs_tol    = 1.0e-11

ns.cfl            = 0.5      # cfl number for hyperbolic system
ns.init_shrink    = 1.0      # scale back initial timestep
ns.change_max     = 1.1      # scale back initial timestep
ns.visc_coef      = 0.16     # coef of viscosity
ns.gravity        = 0.0

# sigma_{SV}-sigma_{SL}=sigma_{LV}cos(theta)
# 60 degrees=>sigma_{SV}=sigma_{LV}
# sigma-sigma_SL=sigma cos(60)=1/2 sigma
# 1/2 sigma = sigma_SL
ns.tension       = 1118.0 559.0 1118.0

# sigma_{SV}-sigma_{SL}=sigma_{LV}cos(theta)
# 45 degrees=>sigma_{SV}=sigma_{LV}  and
# sigma_{SL}/sigma_{LV}=1-2^{-1/2}
#ns.tension        = 1118.0 327.0 1118.0   

ns.capillary_artificial_viscosity=0.0 0.0 0.0  # gets multiplied by visc_coef

# 135 degrees
# sigma_{SV}-sigma_{SL}=sigma_{LV}(-1/sqrt(2))
# sigma_SV=0 sigma_SL=1118/sqrt(2)=791
#ns.tension        = 1118.0 791.0 0.0

# 180 degrees
# sigma_SL=sigma_SV+sigma_LV
#ns.tension        = 1118.0 1118.0 0.0

#ns.fixed_dt	  = 5.0e-5   # hardwire dt
ns.sum_interval   = 10       # timesteps between computing mass 
ns.twall=0.0

ns.axis_dir=0
ns.vorterr=0.0 0.0 0.0
ns.rgasinlet=0.0
ns.vinletgas=0.0
ns.advbot=0.0
ns.adv_vel=0.0   # WIND
ns.adv_dir=1       # inflow in x-direction
ns.xblob=3.0  # center of falling droplet
ns.yblob=3.0
ns.zblob=1.0
ns.radblob=1.0
ns.xblob2=3.0  # "center" of inclined plane
ns.yblob2=3.0
ns.zblob2=1.0
ns.radblob2=0.314  # 18 degrees in x direction
ns.radblob3=0.0  # 0 degrees in y direction
ns.radblob4=0.0  # 0.0=90 degree angle at t=0, 1.0=static angle at t=0
ns.denfact=1.0
ns.velfact=0.0
ns.probtype=55
ns.material_type=0 0 999
ns.heatviscconst=0.0 0.0 0.0
ns.viscconst=1.0 0.0156552 1.0 
ns.denconst=1.0 0.001226 1.0 
ns.tempconst=293.0 293.0 293.0 
ns.pressure_error_cutoff=0.0 0.0 0.0 

# ----------------  PROBLEM DEPENDENT INPUTS
ns.lo_bc          = 5 5 5
ns.hi_bc          = 5 5 5

# >>>>>>>>>>>>>  BC FLAGS <<<<<<<<<<<<<<<<
# 0 = Interior           3 = Symmetry
# 1 = Inflow             4 = SlipWall
# 2 = Outflow            5 = NoSlipWall

# turn any of these on to generate run-time timing stats


# select single or double precision of FAB output data
#        default is whatever precision code is compiled with.
#fab.precision = FLOAT     # output in FLOAT or DOUBLE
fab.precision = DOUBLE    # output in FLOAT or DOUBLE
