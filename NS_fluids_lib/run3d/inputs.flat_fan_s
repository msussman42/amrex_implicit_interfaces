#
max_step  =  10000  # maximum timestep
stop_time =  999999  # maximum problem time

# ------------------  INPUTS TO CLASS AMR ---------------------
# MARK:
# nozzle at x=0,y=0,z=0 (cas file starts at 1.1 but it will be shifted down
# in sci_clsvof.F90)
# zhi changed from 12 to 2 for testing purposes.
geometry.coord_sys      = 0        # 0 => cart, 1 => RZ
geometry.prob_lo   =  -2.0 -2.0 0.0
geometry.prob_hi   =   2.0  2.0 2.0  # units of cm
geometry.is_periodic = 0 0 0

# multigrid class
mg.verbose = 0
cg.verbose = 0
# set above to 2 for maximum verbosity
mg.nu_f = 40
mg.nu_0 = 1   # 1 - v-cycle 2 - w-cycle
cg.maxiter = 9000
mg.bot_atol = 1.0e-9
mg.rtol_b = -0.01
Lp.smooth_type=2

Lp.v = 0

ns.num_materials=3
ns.num_species_var=0


# MARK: stick with MOF for now (as long as scales are resolved)
# MARK: 1st order pressure enough at coarse/fine borders
ns.projection_pressure_scale=10000.0


ns.FSI_flag=0 0 2


# MARK: n_cell changed to 32 32 16 for testing.
amr.n_cell    = 32 32 16  # 96^3 change to 32^3
# MARK: max_level changed from 3 to 1 for testing
amr.max_level =  1  #  1 change to 3
# 0- 1 level 1- 2 levels  2- 3 levels
amr.regrid_int      = 2       # how often to regrid
# MARK: 4 better than 2.
amr.n_error_buf     = 4 4 4 4 4 4   # number of buffer cells in error est
amr.grid_eff        = 0.8   # what constitutes an efficient grid
# above was .55 (smaller=> less boxes)
amr.blocking_factor = 4       # block factor in grid generation
amr.check_int       = 500     # number of timesteps between checkpoints
amr.check_file      = chk     # root name of checkpoint file
# MARK: changed from 100 to 10 for debugging
amr.plot_int        = 10    # 100 change to 10
amr.plot_file       = plt 
amr.grid_log        = grdlog  # name of grid logging file
# MARK: 32 better than 16?
amr.max_grid_size   = 32
#amr.restart         = chk01000
#amr.trace   =1

# ------------------  INPUTS TO PHYSICS CLASS -------------------
#ns.dt_cutoff      = 8.0e-4  # level 0 timestep below which we halt

mac.mac_tol        = 1.0e-7
mac.mac_abs_tol    = 1.0e-7

ns.cfl            = 0.5      # cfl number for hyperbolic system
ns.init_shrink    = 1.0      # scale back initial timestep
ns.change_max     = 1.1      # scale back initial timestep
ns.visc_coef      = 1.0   # coef of viscosityx10^-3
mac.visc_abs_tol   = 1.0e-7
# MARK: gravity=-980 (I think program automatically makes gravity face down)
ns.gravity        = -980.0   # body force  (gravity in MKS units)
ns.tension        = 72.8 0.0 0.0 # cgsx10^-6 (scale velocity by 10^-3)
#ns.fixed_dt	  = 4.0e-4   # hardwire dt
ns.sum_interval   = 10       # timesteps between computing mass 

ns.axis_dir=100  # 0=no nozzle  1=nozzle  100=fan injector
ns.vorterr=999999.0
ns.rgasinlet=1.57
ns.vinletgas=0.0
ns.twall=0.1

ns.advbot=103.73    # 0.3GPM inflow velocity at nozzle at the bottom
ns.adv_vel=0.0     # inflow of air from the side
ns.adv_dir=1       # inflow in x-direction
ns.heatviscconst=0.0 0.0 0.0
ns.viscconst=0.013 0.0002 0.013
ns.denconst=1.0 0.00125 1.0 
ns.material_type=0 0 999
ns.pressure_error_cutoff=0.0 0.0 0.0  # new parameter
ns.tempconst=293.0 293.0 293.0        # new parameter

ns.xblob=0.0
ns.yblob=0.0
ns.zblob=0.0
# MARK: make radblob=0.3 so that liquid fills the bottom part 
# of nozzle.
ns.radblob=0.3  # 0.242

ns.denfact=1.0
ns.velfact=0.0
# MARK: this now works for probtype=53
# MARK: in order to prevent irrosion of corners over
# time, "stationary_solid" (PROB_3D.F90) 
# returns iflag=1 for this
# problem. (axis_dir=100, FSI_flag=2)
ns.probtype=53

ns.UseLagrangianModel=0;
ns.droplet_size_factor=2.0
ns.droplet_sphericity=2.0
ns.x_measure_plan=999999
ns.n_radblob_critical_plane=0

#ns.mem_debug = 1
# MARK: uncomment this line when checking initial residual of solver.
#ns.v = 1
#ns.d = 1

# ----------------  PROBLEM DEPENDENT INPUTS
ns.lo_bc          = 2 2 1
ns.hi_bc          = 2 2 2

# >>>>>>>>>>>>>  BC FLAGS <<<<<<<<<<<<<<<<
# 0 = Interior           3 = Symmetry
# 1 = Inflow             4 = SlipWall
# 2 = Outflow            5 = NoSlipWall

# turn any of these on to generate run-time timing stats


# select single or double precision of FAB output data
#        default is whatever precision code is compiled with.
#fab.precision = FLOAT     # output in FLOAT or DOUBLE
fab.precision = DOUBLE    # output in FLOAT or DOUBLE

