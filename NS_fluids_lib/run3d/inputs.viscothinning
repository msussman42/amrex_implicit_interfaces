# ------------------  INPUTS TO MAIN PROGRAM  -------------------
# CHANGES FROM PAST VERSION:
# no more raster stuff (hdf), add mac.mac_abs_tol
# blob.* now becomes ns.*

max_step  = 8000   # maximum timestep
#max_step  =  2    # maximum timestep
stop_time =  300  # maximum problem time

# ------------------ Dimention version 08/02/18 ---------------
# ------------------  INPUTS TO CLASS AMR ---------------------
# set up for bubble
geometry.coord_sys      = 0        # 0 => cart, 1 => RZ
geometry.prob_lo   =  0.0 0.0 0.0
# 12 12 60 CHANGED TO 3.0 3.0 6.0
geometry.prob_hi   =  3.0 3.0 6.0    # D* 4 4 20

# 0MGPCG 1PCG 2 MINV=I
ns.project_solver_type=0
Lp.smooth_type=2
Lp.bottom_smooth_type=2
ns.num_materials=2
ns.num_species_var=0
ns.minimum_relative_error=1.0e-18
ns.initial_project_cycles=10  # number of initial jacobi iterations
ns.initial_cg_cycles=10  # number of MGPCG steps to do in order to get
                         # decent sized residual.

# multigrid class
#mg.verbose = 1
#cg.verbose = 1
# set above to 2 for maximum verbosity
mg.nu_f = 40
mg.nu_0 = 1   # 1 - v-cycle 2 - w-cycle
cg.maxiter = 200
mg.bot_atol = 1.0e-10
mg.rtol_b = -0.01
#Lp.v = 1

amr.n_cell    = 32 32 64  # 32 32 160 CHANGED TO 32 32 64
amr.max_level = 0  # 2 CHANGED TO 0
 
# 0- 1 level 1- 2 levels  2- 3 levels
amr.regrid_int      = 1       # how often to regrid
amr.n_error_buf     = 2 2 2 2 2    # number of buffer cells in error est
amr.grid_eff        = 0.70   # what constitutes an efficient grid
# above was .55 (smaller=> less boxes)
amr.blocking_factor = 4       # block factor in grid generation
amr.check_int       = 100      # number of timesteps between checkpoints
amr.check_file      = chk     # root name of checkpoint file
amr.plot_int        = 5  # 25 CHANGED TO 5
amr.plot_file       = plt 
amr.grid_log        = grdlog  # name of grid logging file
amr.max_grid_size   = 1024
#amr.restart         = chk2700
amr.trace   =1

# ------------------  INPUTS TO PHYSICS CLASS -------------------
ns.dt_cutoff      = 5.0e-7  # truncate u if u dt_cut>dx

mac.mac_abs_tol    = 1.0e-8


ns.transposegradu=0
ns.elastic_time=0.4699 0.0     # relaxation time or Deborah number
ns.elastic_viscosity=9.99000999 0.0  # c*eta_solvent, c*eta_solvent/(eta_total*Re)
ns.polymer_factor=0.1 0.0        # parameter, 1/L
ns.Carreau_alpha=2.0 0.0
ns.Carreau_beta=1.0 0.0
ns.Carreau_n=0.5 0.0

ns.cfl            = 0.500      # cfl number for hyperbolic system

ns.init_shrink    = 1.0   # scale back initial timestep
ns.change_max     = 1.1 
ns.visc_coef      = 1.0      # viscosity 1.0 or
                            # (eta_solvent/eta_total)*(1/Re(based on eta_total))
mac.visc_abs_tol   = 1.0e-8
ns.gravity        =-980   # gravity or 1/Fr
ns.tension        = 50.0     # interfacial tension coefficient or 1/We
#ns.fixed_dt	  = 0.0025   # hardwire dt
ns.sum_interval   = 1        # timesteps between computing mass 

ns.axis_dir=0
ns.vorterr=999999.0
ns.rgasinlet=1.57
ns.vinletgas=0.0
ns.twall=0.1
ns.advbot=0.0
ns.adv_vel=-0.0
ns.adv_dir=3
ns.viscconst=10.00 1.8E-4     # (1+c)eta_s
ns.tcenter=4.0  # adapt if radius<tcenter*dx    =1.0
ns.denconst=1.0 1.2E-3        # solvent density or 1.0
ns.material_type=0 0
ns.heatviscconst=0.0 0.0
ns.xblob=0.0          # D*2  6 CHANGED TO 0
ns.yblob=0.0          # D*2  6 CHANGED TO 0
ns.zblob=2.25         # D*0.75
ns.radblob=1.5		# bubble/drop radius
ns.denfact=1.0
ns.velfact=0.0
ns.probtype=36

proj.bogus_value = 5.0e+5
proj.Pcode = 0                     
#proj.Pcode = 2

#ns.mem_debug = 1
ns.v = 1
#ns.d = 1

# ----------------  PROBLEM DEPENDENT INPUTS
# for probtype=36, hydrostatic pressure using den(1) enforced at
# outflow boundaries.
ns.lo_bc          = 3 3 2  # 2 2 2 CHANGED TO 3 3 2
ns.hi_bc          = 2 2 2  

# >>>>>>>>>>>>>  BC FLAGS <<<<<<<<<<<<<<<<
# 0 = Interior           3 = Symmetry
# 1 = Inflow             4 = SlipWall
# 2 = Outflow            5 = NoSlipWall

# turn any of these on to generate run-time timing stats


# select single or double precision of FAB output data
#        default is whatever precision code is compiled with.
#fab.precision = FLOAT     # output in FLOAT or DOUBLE
fab.precision = DOUBLE    # output in FLOAT or DOUBLE

