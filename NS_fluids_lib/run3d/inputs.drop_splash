max_step  =  999999   # maximum timestep
stop_time =  1.0e1  # maximum problem time

# ------------------  INPUTS TO CLASS AMR ---------------------
# set up for bubble
geometry.coord_sys      = 0        # 0 => cart, 1 => RZ
geometry.prob_lo   =  0.0 0.0 0.0 
# MARK: changed from 0.64^3 to 0.08^3 for debugging
# MARK: in sci_clsvof.F90, local_sci_grid_size=96, but if
#  domain 0.64^3, this must be increased.  Search "rough surface"
#  in sci_clsvof.F90 to see where to make the change to local_sci_grid_size.
geometry.prob_hi   =  0.08 0.08 0.08
geometry.is_periodic = 0 0 0

# multigrid class
mg.verbose = 0
cg.verbose = 0
# set above to 2 for maximum verbosity
mg.nu_f = 40
mg.nu_0 = 1   # 1 - v-cycle 2 - w-cycle
cg.maxiter = 9000
mg.bot_atol = 1.0e-11
mg.rtol_b = -0.01
Lp.v = 1

ns.FSI_flag=0 0 2  # MARK: will try to read "rough.cas"
ns.num_materials=3
ns.num_species_var=0

ns.projection_pressure_scale=1.0

amr.n_cell    = 32 32 32
# MARK: max_level=1 instead of 4 for debugging purposes.
amr.max_level = 1

ns.minimum_relative_error=1.0e-18
ns.initial_cg_cycles=10
ns.initial_project_cycles=10
ns.project_solver_type=0 # 0MGPCG 1PCG 2 MINV=I
# 0=GSRB 1=ICRB 2=ILU
Lp.smooth_type=2
Lp.bottom_smooth_type=2


amr.regrid_int      = 1       # how often to regrid
amr.n_error_buf     = 4 4 4 4 4 4 4 4 4   # number of buffer cells in error est
amr.grid_eff        = 0.8   # what constitutes an efficient grid
# above was .55 (smaller=> less boxes)
amr.blocking_factor = 4       # block factor in grid generation
amr.check_int       = 50     # number of timesteps between checkpoints
amr.check_file      = chk     # root name of checkpoint file
# MARK: 10 for debugging, 50 otherwise
amr.plot_int        = 10      
amr.plot_file       = plt 
amr.grid_log        = grdlog  # name of grid logging file
# MARK: max_grid_size changed from 8 to 32.
amr.max_grid_size   = 32
# amr.restart         = chk00000
# amr.trace   =1

# ------------------  INPUTS TO PHYSICS CLASS -------------------
ns.dt_cutoff      = 1.0e-10  # level 0 timestep below which we halt

mac.mac_abs_tol    = 1.0e-11

ns.cfl            = 0.5      # cfl number for hyperbolic system
ns.init_shrink    = 1.0      # scale back initial timestep
ns.change_max     = 1.1      # scale back initial timestep
ns.visc_coef      = 1.0     # coef of viscosity
# MARK: gravity=-980
ns.gravity        = -980.0      # cm/s
# sigma_{SV}-sigma_{SL}=sigma_{LV}cos(theta)
# 45 degrees=>sigma_{SV}=sigma_{LV}  and
# sigma_{SL}/sigma_{LV}=1-2^{-1/2}
ns.tension        = 96.0 72.8 96.0  #liquid-gas, liq-solid, solid-vapor 
#ns.fixed_dt	  = 5.0e-5   # hardwire dt
ns.sum_interval   = 10       # timesteps between computing mass 
ns.twall=0.0

ns.axis_dir=0
ns.vorterr=999999.0
ns.rgasinlet=0.0
ns.vinletgas=0.0
# MARK: advbot has initial downward velocity of drop
ns.advbot=300.0
ns.zblob9 = 0.0   
ns.xblob9 = 0.0
ns.yblob9 = 0.0
ns.adv_vel=0.0
ns.adv_dir=1       # inflow in x-direction
ns.xblob=0      # center of falling droplet
ns.yblob=0
# MARK: zblob,radblob changed from 0.4, 0.114 for debugging purposes.
ns.zblob=0.05
ns.radblob=0.02
ns.xblob2=0  # "center" of inclined plane
ns.yblob2=0
ns.zblob2=0.01
# MARK: these parameters not used.
ns.yblob10=0.01     # Standard Dev. of random disturbance
ns.zblob10=64	    # Number of places to break grid into, both x,y
ns.radblob2=0.0     # 18 degrees in x direction (radblob2=0.3)
ns.radblob3=0.0     # 0 degrees in y direction
ns.denfact=1.0
ns.velfact=0.0
# MARK: in order to prevent irrosion of corners over
# time, "stationary_solid" (PROB_3D.F90)
# returns iflag=1 for probtype=5501.
ns.probtype=5501
# MARK: if probtype=5501, then contact angle model depends on xblob10.
# see routine "get_use_DCA" in PROB_3D.F90
ns.xblob10=0  # 0=use static angle 1=Jiang 2=Kistler
ns.material_type=0 0 999
ns.viscconst= 0.01 0.0002 1.0 
ns.denconst=1.0 0.001226 1.0
ns.heatviscconst=0.0 0.0 0.0
ns.pressure_error_cutoff=0.0 0.0 0.0
ns.tempconst=293.0 293.0 293.0

#ns.mem_debug = 1
# MARK: uncomment this line when checking initial residual of solver.
#ns.v = 1
#ns.d = 1

# ----------------  PROBLEM DEPENDENT INPUTS
ns.lo_bc          = 3 3 5
ns.hi_bc          = 2 2 1

# >>>>>>>>>>>>>  BC FLAGS <<<<<<<<<<<<<<<<
# 0 = Interior           3 = Symmetry
# 1 = Inflow             4 = SlipWall
# 2 = Outflow            5 = NoSlipWall

# turn any of these on to generate run-time timing stats


# select single or double precision of FAB output data
#        default is whatever precision code is compiled with.
#fab.precision = FLOAT     # output in FLOAT or DOUBLE
fab.precision = DOUBLE    # output in FLOAT or DOUBLE
