GPU capability, MPI capability, OpenMP
AMR capability,
Particle Container
Multimaterial
Sharp interface

Each material has an associated level set function which is initialized
as a distance function locally to the interface.  each material has an
associated MAC velocity, cell velocity, density, temperature and species.
GFM used at material boundaries.

Each particle has an associated material id which is assigned when the
particle is added and modified prior to redistancing.

There are 2 kinds of particles:
a) bulk particles (min |phi_{m}|>=alpha h)

   particle_nsubdivide_bulk

b) (i) narrow band particles (min |phi_{m}| < alpha h)
   (ii) close-in narrow band particles x^init-=phi_{m} n_{m}

   particle_nsubdivide_narrow

Each particle has a position, displacement, velocity, temperature, 
and material id.


1. initialize Levelsets, make them locally distance functions.  
2. generate the AMR grid near zero level set(s).

3. add and delete particles; particles deleted if particle density exceeds
a threshold.

4. advection (use UMAC): 
  (a) particles (advective velocity material id=particle material id), RK2
  (b) level set functions, velocity(s), temperature(s),density(s), species
      unsplit: RK2, WENO3
  (c) PDE extension of levelsets into solids, velocity, temperature, density,
      species into other materials.
  (d) PDE reinitialize the level set function(s), use particles to correct.
5. (a) phase change, limit the normal velocity so that 
V(phi_source_old)-V(phi_source_new)=V(phi_target_new)-V(phi_target_old)
   (b) reinitialize the level set function(s), use particles to correct.

6. combine the cell centered advected velocities and advected temperatures and
  species.

7. viscosity, heat conduction, species diffusion

8. extend velocity, temperature, species

9. interpolate cell velocity to MAC velocity (each material)

10. combine MAC velocity and project.

11. extend MAC velocity and make sure each MAC_{material} velocity is 
divergence free.


Note: for compressible flows, add enough artificial diffusion so that there 
are 2 points in the transition region.

Use viscous Burgers' equation as a guide:
u_t + (u^2/2)_x = nu u_xx

u=1-tanh((x-t)/(2 nu))

References:
Jawad, Petkovi, Biswas (2010), Soliton solutions of Burgers 
equations and perturbed Burgers equation, 
Applied Mathematics and Computation.

Peng, D., Merriman, B., Osher, S., Zhao, H., & Kang, M. (1999). A PDE-based fast local level set method. Journal of computational physics, 155(2), 410-438.

1. make sure code works for single precision (VOFTOL, INTERCEPT_TOL, solver
default tolerances, etc)
2. check freezing results, restart bubble jetting.
