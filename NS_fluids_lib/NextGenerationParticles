GPU capability, MPI capability, OpenMP
AMR capability,
Particle Container
Multimaterial

Each material has an associated level set function which is initialized
as a distance function locally to the interface.

Each particle has an associated material id which is assigned only when the
particle is added.

There are 3 kinds of particles:
a) bulk particles (min |phi_{m}|>=alpha h)

   particle_nsubdivide_bulk

b) (i) narrow band particles (min |phi_{m}| < alpha h)
   (ii) close-in narrow band particles x^init-=phi_{m} n_{m}

   particle_nsubdivide_narrow_band
   particle_nsubdivide_high_curvature

Each particle has a position, displacement, velocity, density, temperature, 
material id, and species.

particle density update:
rho=I(rho^{n+1})
particle velocity update:
Du/Dt = I[ u^{viscosity} - u^{advect} - F_Boussinesq(T(xgrid)) ] + 
        F_Boussinesq(T(xpart)).
particle temperature update:
DT/Dt = I[ T^{diffusion} - T^{advect} ]

Feedback to Eulerian grid proportional to "h":
eulerian velocity correction:
u^{viscosity}+=alpha1 * (u^{particle} - u^{viscosity})
eulerian temperature correction:
T^{diffusion}+=alpha2 * (T^{particle} - T^{diffusion})

particle velocity update:
Du/Dt = I[ u^{n+1} - u^{viscosity ]
particle temperature update:
DT/Dt = I[ T^{n+1} - T^{diffusion} ]

1. initialize Levelsets, make them locally distance functions. 
2. generate the AMR grid near zero level set(s).
3. a) delete particles if 
      (i) imat_id((I_LS)(xpart))!=imat_id(particle) and
      (ii) I(LS_imat_id) < -alpha h
   b) add bulk, narrow band, and close-in narrow band particles.
4. For each material, the advective velocity is UMAC
5. (a) advect the particles using UMAC
   (a) LS_{t} + div (UMAC LS) = 0 (using PPM or WENO or ...)
   (b) project LS_{m} to be "vacuum free."
6. Redistance the level set function(s) using dtau=dx/2 for example:
    (a) LS0 is given
    (b) for n=1,2,3,...
          for each grid cell:
          (i) find grad LS(n-1) using upwinded WENO
          (ii) x_test=x-dtau sign(LS0) grad LS/|grad LS| 
          (iii) if sign(I LS(x_test))=sign(LS0) then
                 S \equiv sign(LS0)
                else
                 S \equiv sign(LS0) |LS(n-1)|/
                   (|LS(n-1)|+|I LS(x_test)|)
                endif
                LS(n)=LS(n-1)+dtau S *(1-|grad LS|)
                ( (LS(n)-LS(n-1))/dtau + S * n dot grad LS = +S
          (iv) lambda=sum w(||x-xp||)(I LS(n)(xp))/sum w(||x-xp||
               min w(||x-xp||)(I LS(xp)-lambda)^2
               LScorrect(n)=LS(n)-lambda
          (v) for bulk particles in which imat((I LS(n))(xp)) is 
              inconsistent with imat(particle), make the following 
              correction:
              mu=sum_{particle_inconsistent}
                w(||x-xp||)(I LS(n)(xp))/sum w(||x-xp||
                min w(||x-xp||)(I LS(xp)-mu)^2
               LScorrect(n)=LS(n)-mu

    (c) endfor
7. go back to step 2.

References:
Peng, D., Merriman, B., Osher, S., Zhao, H., & Kang, M. (1999). A PDE-based fast local level set method. Journal of computational physics, 155(2), 410-438.

work plan:
1. make sure code works for single precision (VOFTOL, INTERCEPT_TOL, solver
default tolerances, etc)
2. check freezing results, restart bubble jetting.
3. solve temperature always on the supermesh.  
4. conservation form in the bulk gas regions.
