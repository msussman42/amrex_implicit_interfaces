# material 2 radius: 0.15 located at (1/2,1/2)  1x1 domain
# material 1 top half, material 3 bottom half
# Smith, Solis, Chopp "A projection method for motion of 
# triple junctions by levels sets, Interfaces Free Bound, 
# 4 (2002), pp. 263â€“276
# gam1=(sig12-sig23+sig13)/2
# gam2=(sig12+sig23-sig13)/2
# gam3=(-sig12+sig23+sig13)/2
# gam1+gam2=sig12
# gam2+gam3=sig23
# gam1+gam3=sig13
# We2=60 We1=We3=36
# sig12=(1/36+1/60)=1/22.5
# sig23=(1/60+1/36)=1/22.5
# sig13=(1/36+1/36)=1/18
# Re=60 constant viscosity dimensionless density is 1.
# expected distance between triple junctions:
# sin theta1/sig23=sin theta2/sig13=sin theta3/sig12
# theta1=theta3
# sin theta2=sin theta1 (sig13/sig23)
# theta1=2.2467  theta2=1.7898  A=pi*.15^2  theta2=2pi-2theta1
# d=0.4596 using "ternary.f" (just use 3 digits d=0.460)
# October 3, 2018:
# max_level=1  recon: .462  LS: .455
# max_level=2  recon: .460  LS: .456
# max_level=3  recon: .460  LS: .458  dx_finest=0.00195
# (face_flag=0 default) 
max_step  =  99999    # maximum timestep
#max_step  =  1    # maximum timestep
stop_time=4.0  # liquid lens
#stop_time=0.4  # gas lens ?

# ------------------  INPUTS TO CLASS AMR ---------------------
# set up for bubble
geometry.coord_sys      = 0        # 0 => cart, 1 => RZ
geometry.prob_lo   =  0.0 0.0
geometry.prob_hi   =  1.0 1.0  
geometry.is_periodic = 1 0 0 
mac.visc_abs_tol=1.0e-10

# 0MGPCG 1PCG 2 MINV=I
ns.project_solver_type=0
Lp.smooth_type=2
Lp.bottom_smooth_type=2
Lp.gpucount=1

# multigrid class
#mg.verbose = 1
#cg.verbose = 1
# set above to 2 for maximum verbosity
mg.nu_f = 40
mg.nu_0 = 1   # 1 - v-cycle 2 - w-cycle
cg.maxiter = 200
mg.bot_atol = 1.0e-12
mg.rtol_b = -0.01
#Lp.v = 1

ns.continuous_mof=2
ns.EILE_flag=1

ns.conservative_tension_force=0

ns.num_materials=3
ns.num_species_var=0
ns.mof_error_ordering=1 # 1=try all combintations 0=recon. furthest x 1st.
ns.mof_ordering=0 0 0

ns.projection_pressure_scale=1.0
ns.advection_order=1 1 1

ns.minimum_relative_error=1.0e-18
ns.initial_project_cycles=3  # number of initial jacobi iterations
ns.initial_cg_cycles=10  # number of MGPCG steps to do in order to get
                         # decent sized residual.
amr.n_cell    = 64 64  
amr.max_level = 1   # max_level=2 for the IJNMF paper.
# 0- 1 level 1- 2 levels  2- 3 levels
amr.regrid_int      = 1       # how often to regrid
amr.n_error_buf     = 8 8 8 8 8   # number of buffer cells in error est
amr.grid_eff        = 0.75   # what constitutes an efficient grid
# above was .55 (smaller=> less boxes)
amr.blocking_factor = 8       # block factor in grid generation
amr.check_int       = 500     # number of timesteps between checkpoints
amr.check_file      = chk     # root name of checkpoint file
amr.plot_int        = 200
amr.plot_file       = plt 
amr.grid_log        = grdlog  # name of grid logging file
amr.max_grid_size   = 64
#amr.restart         = chk00100
#amr.trace   =1

# ------------------  INPUTS TO PHYSICS CLASS -------------------
ns.dt_cutoff      = 0.000005  # level 0 timestep below which we halt

mac.mac_tol        = 1.0e-10  # tolerence for mac projections
mac.mac_abs_tol    = 1.0e-10

ns.visual_option=-2

ns.cfl            = 0.85      # cfl number for hyperbolic system
ns.init_shrink    = 1.0      # scale back initial timestep
ns.change_max     = 1.1    
ns.visc_coef      = 0.0166667    # 1/60 liquid lens
#ns.visc_coef      = 0.01  # water viscosity gas lens
ns.gravity        = 0.0
ns.min_velocity_for_dt=1.0
ns.use_lsa=0
# 12, 13, 23
# material 2 will be bubble
# material 1 top half material 2 bottom half
# sigma_{i,j}cos(theta_{i,k})=sigma_{j,k}-sigma_{i,k}
# We_1=We_3=36 We_2=60
# sigma_12=gamma_1+gamma_2
# sigma_13=gamma_1+gamma_3
# sigma_23=gamma_2+gamma_3
# if 1cm^2 domain, then water surface tension is 72.8.
ns.tension        = 0.044444444444 0.055555555555  0.044444444444 # liquid lens
#ns.tension        = 72.8 91.0 72.8 # gas lens
#ns.fixed_dt	  = 0.0025     # hardwire dt
ns.sum_interval   = 5        # timesteps between computing mass 

ns.axis_dir=0
ns.vorterr=0.0 0.0 0.0
ns.rgasinlet=1.57
ns.vinletgas=0.0
ns.twall=0.1
ns.advbot=0.0
ns.adv_vel=0.0
ns.adv_dir=1 # adv_dir=1 (x direction)
ns.heatviscconst=0.0 0.0 0.0 0.0
#ns.constant_viscosity=0  # gas lens
ns.constant_viscosity=1  # liquid lens
#ns.viscconst=1.0 0.01 1.0 # gas lens
ns.viscconst=1.0 1.0 1.0 # liquid lens
#ns.denconst=1.0 0.001 1.0 # gas lens
ns.denconst=1.0 1.0 1.0 # liquid lens
ns.tempconst=293.0 293.0 293.0 
ns.material_type=0 0 0 
ns.pressure_error_cutoff=0.0 0.0 0.0 
ns.xblob=0.5
ns.yblob=0.5
ns.zblob=0.0  
ns.zblob2=0.5  
ns.radblob=0.15
ns.denfact=1.0
ns.velfact=0.0
ns.probtype=202  # liquid lens

proj.bogus_value = 5.0e+5
proj.Pcode = 0
#proj.Pcode = 2

#ns.mem_debug = 1
ns.v = 1
#ns.d = 1

# ----------------  PROBLEM DEPENDENT INPUTS
ns.lo_bc          = 0 3 
ns.hi_bc          = 0 3  

# >>>>>>>>>>>>>  BC FLAGS <<<<<<<<<<<<<<<<
# 0 = Interior           3 = Symmetry
# 1 = Inflow             4 = SlipWall
# 2 = Outflow            5 = NoSlipWall

# turn any of these on to generate run-time timing stats

fab.do_initval=1

# select single or double precision of FAB output data
#        default is whatever precision code is compiled with.
#fab.precision = FLOAT     # output in FLOAT or DOUBLE
fab.precision = DOUBLE    # output in FLOAT or DOUBLE

