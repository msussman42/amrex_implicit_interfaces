max_step  =  99999    # maximum timestep
#max_step  =  2    # maximum timestep
#
# test 1: flow past cylinder stop_time=30
# test 2a: oscillating cylinder Seo and Mittal stop_time=3T=3x0.3125=.9475
# test 2b: oscillating cylinder Seo and Mittal convergence study
#          stop_time=3T=3x0.787=2.361
# test 3: oscillating cylinder compare w/body fitted stop_time=3x(T)=15
stop_time=15.0

# ------------------  INPUTS TO CLASS AMR ---------------------
# set up for bubble
geometry.coord_sys      = 0        # 0 => cart, 1 => RZ
geometry.prob_lo   =  0.0 0.0
# 64x16 flow past cylinder
# 4x2 Seo and Mittal tests
# 16x8 compare with body fitted
geometry.prob_hi   =  16.0 8.0
ns.projection_pressure_scale=1.0

ns.MOFITERMAX=15

ns.num_materials=3
ns.num_species_var=0
ns.post_init_pressure_solve=1
ns.use_lsa=0

# 0=GSRB 1=ICRB 2=ILU
Lp.smooth_type=2
Lp.bottom_smooth_type=2
ns.minimum_relative_error=1.0e-24
# jacobi iterations at the beginning of an elliptic solve
ns.initial_project_cycles=10 
ns.project_solver_type=0 # 0MGPCG 1PCG 2 MINV=I
ns.initial_cg_cycles=10  # do minimum "initial_cg_cycles" iterates of MGPCG
ns.multilevel_maxcycle=200

# multigrid class
mg.verbose = 0
cg.verbose = 0
# set above to 2 for maximum verbosity
mg.nu_f = 40
mg.nu_0 = 1   # 1 - v-cycle 2 - w-cycle
cg.maxiter = 200
mg.bot_atol = 1.0e-13
mg.rtol_b = -0.01
Lp.v = 1

# flow past cylinder: n_cell=128x32 max_level=3,4,5,6
# Seo coarse test: n_cell=40x20  max_level=0
# Seo convergence study: n_cell=64x32
# compare with body fitted: n_cell=128x64  max_level=6
amr.n_cell=128 64
amr.max_level = 6
# 0- 1 level 1- 2 levels  2- 3 levels
amr.regrid_int      = 1       # how often to regrid
amr.n_error_buf     = 4 4 4 4 4 4 4    # number of buffer cells in error est
amr.grid_eff        = 0.75   # what constitutes an efficient grid
# above was .55 (smaller=> less boxes)
amr.blocking_factor = 2       # block factor in grid generation
amr.check_int       = 100     # number of timesteps between checkpoints
amr.check_file      = chk     # root name of checkpoint file
amr.plot_int        = 100
amr.plot_file       = plt 
amr.grid_log        = grdlog  # name of grid logging file
amr.max_grid_size   = 1024
#amr.restart         = chk00600
#amr.trace   =1

# ------------------  INPUTS TO PHYSICS CLASS -------------------
ns.dt_cutoff      = 0.000005  # level 0 timestep below which we halt

mac.mac_tol        = 1.0e-11  # tolerence for mac projections
mac.mac_abs_tol    = 1.0e-11

# -2 = tecplot  -1 = visit

ns.cfl            = 0.533    # cfl number for hyperbolic system
ns.init_shrink    = 1.0      # scale back initial timestep
ns.change_max     = 1.1      # scale back initial timestep
# visc_coef=0.032=1/31 Seo coarse test
# visc_coef=0.05  flow past cylinder
# visc_coef=0.0127=1/78.5 Seo convergence test
# visc_coef=0.01 compare with body fitted 
ns.visc_coef=0.01
mac.visc_abs_tol   = 1.0e-8
ns.gravity        = 0.0     # body force  (gravity in MKS units)
ns.tension        = 0.0 0.0 0.0
# ns.fixed_dt=0.001574=0.002T=0.002 x 0.787 Seo convergence test
# ns.fixed_dt=0.003125  ??
# ns.fixed_dt=0.008  compare w/body fitted (dt=CFL dx)
# instead of fixed_dt=0.008 for comparing w/body fitted, have
# ns.min_velocity_for_dt=0.25
ns.min_velocity_for_dt=0.25

ns.sum_interval   = 1        # timesteps between computing mass 
ns.usekluge       = 0

ns.axis_dir=0  
ns.vorterr=0.0 0.0 0.0
ns.rgasinlet=1.57
ns.vinletgas=0.0
ns.twall=0.1
# ns.advbot=-1.0 if translating cylinder
# ns.advbot=0.0 if stationary (flow past) cylinder
# ns.advbot=0.0 for Seo tests
ns.advbot=0.0  
# ns.adv_vel=0.0 if translating cylinder
# ns.adv_vel=0.0 for Seo tests
# ns.adv_vel=1.0 if stationary (flow past) cylinder
ns.adv_vel=0.0
#ns.xblob4=0.3125 Seo T=1/f  f=3.2
#ns.xblob4=0.787 Seo convergence test => T=1/f  f=1.27
#ns.xblob4=5.0 f=1/5 T=5 body-fit compare
#ns.xblob4=0.0 flow past cylinder
ns.xblob4=5.0
# ns.radblob4=1.0 UU override for calculating drag (comparison w/body-fit)
# ns.radblob4=1.1269 mistake in Seo paper, they scale drag by UU=sqrt(f) 
#                    instead of UU=f
# ns.radblob4=0.0  flow past cylinder (use adv_vel or advbot instead)
ns.radblob4=1.0
# ns.xblob3=0.05    Seo => x0=1/(2 pi f)
# ns.xblob3=0.125   Seo => x0=1/(2 pi f) convergence test
# ns.xblob3=0.7957  Seo => x0=1/(2 pi f) body fit compare
# ns.xblob3=0.0     flow past cylinder
# velocity amplitude is 2 pi xblob3/xblob4
# body fit compare: 2(3.14)(0.8)/5 ~ 1
ns.xblob3=0.7957
ns.adv_dir=1  # x direction
ns.material_type=0 0 999
ns.viscconst=1.0 1.0 1.0 
ns.denconst=1.0 1.0 1.0 
ns.tempconst=293.0 293.0 293.0 
ns.heatviscconst=0.0 0.0 0.0
ns.pressure_error_cutoff=0.0 0.0 0.0


# ns.xblob=24.0 flow past cylinder
# ns.xblob=48.0 moving cylinder
# ns.xblob=2.0  Seo coarse test
# ns.xblob=8.0 body fit compare
ns.xblob=8.0 
ns.yblob=0.0  # 0 if symmetric
ns.zblob=0.0
ns.radblob=0.5
ns.denfact=1.0
ns.velfact=0.0
ns.probtype=32

proj.bogus_value = 5.0e+5
proj.Pcode = 0
#proj.Pcode = 2

#ns.mem_debug = 1
ns.v = 1
#ns.d = 1

# ----------------  PROBLEM DEPENDENT INPUTS
# Seo tests count as "moving cylinder"
#ns.lo_bc          = 2 3 if moving cylinder  1 3 if stationary
#ns.hi_bc          = 2 2 if moving cylinder  2 5 if stationary
ns.lo_bc          = 2 3   
ns.hi_bc          = 2 2  

# >>>>>>>>>>>>>  BC FLAGS <<<<<<<<<<<<<<<<
# 0 = Interior           3 = Symmetry
# 1 = Inflow             4 = SlipWall
# 2 = Outflow            5 = NoSlipWall

# turn any of these on to generate run-time timing stats


# select single or double precision of FAB output data
#        default is whatever precision code is compiled with.
#fab.precision = FLOAT     # output in FLOAT or DOUBLE
fab.precision = DOUBLE    # output in FLOAT or DOUBLE
fab.do_initval=0

