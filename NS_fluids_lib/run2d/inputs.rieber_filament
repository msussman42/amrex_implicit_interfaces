

# ------------------  INPUTS TO MAIN PROGRAM  -------------------
# CHANGES FROM PAST VERSION:
# no more raster stuff (hdf), add mac.mac_abs_tol
# blob.* now becomes ns.*
#
max_step  =  999999   # maximum timestep
stop_time =  20.0  # maximum problem time

# ------------------  INPUTS TO CLASS AMR ---------------------
# set up for bubble
geometry.coord_sys      = 1        # 0 => cart, 1 => RZ
geometry.prob_lo   =  0.0  0.0  
geometry.prob_hi   =  0.064 0.032 
geometry.is_periodic = 0 0

# multigrid class
mg.verbose = 0
cg.verbose = 0
# set above to 2 for maximum verbosity
mg.nu_f = 40
mg.nu_0 = 1   # 1 - v-cycle 2 - w-cycle
cg.maxiter = 9000
mg.bot_atol = 1.0e-11
mg.rtol_b = -0.01
Lp.v = 1

ns.num_materials=3
ns.num_species_var=0

amr.n_cell    = 128 64
amr.max_level =  2  

ns.minimum_relative_error=1.0e-18
ns.initial_cg_cycles=10
ns.initial_project_cycles=10
ns.project_solver_type=0 # 0MGPCG 1PCG 2 MINV=I
# 0=GSRB 1=ICRB 2=ILU


amr.regrid_int      = 1       # how often to regrid
amr.n_error_buf     = 4 4 4 4 4 4 4 4 4   # number of buffer cells in error est
amr.grid_eff        = 0.8   # what constitutes an efficient grid
# above was .55 (smaller=> less boxes)
amr.blocking_factor = 4       # block factor in grid generation
amr.check_int       = 100     # number of timesteps between checkpoints
amr.check_file      = chk     # root name of checkpoint file
amr.plot_int        = 50
amr.plot_file       = plt 
amr.grid_log        = grdlog  # name of grid logging file
amr.max_grid_size   = 32
#amr.restart         = chk0500
#amr.trace   =1

# ------------------  INPUTS TO PHYSICS CLASS -------------------
ns.dt_cutoff      = 1.0e-10  # level 0 timestep below which we halt

mac.mac_abs_tol    = 1.0e-11

ns.cfl            = 0.5      # cfl number for hyperbolic system
ns.init_shrink    = 1.0      # scale back initial timestep
ns.change_max=1.01      # scale back initial timestep
# OH/sqrt(WE)  A=0.0014/sqrt(250)=0.000089    
# OH/sqrt(WE)  B=0.0016/sqrt(437)=0.000077 
# OH/sqrt(WE)  C=0.0014/sqrt(598)=0.000057 

ns.visc_coef      = 0.01      # coef of viscosity
ns.gravity        = 0.0
# sigma_{SV}-sigma_{SL}=sigma_{LV}cos(theta_{LS})
# 45 degrees=>sigma_{SV}=sigma_{LV}  and
# sigma_{SL}/sigma_{LV}=1-2^{-1/2}
# A=1/250=0.004  B=1/437=0.0023  C=1/598=0.00167
# 12 13 23 
#ns.tension        = 72.8 0.0 72.8  
#ns.tension        = 72.8 0.0 0.0 
ns.tension        = 72.8 72.8 0.0   # FILAMENT
#ns.fixed_dt	  = 5.0e-5   # hardwire dt
ns.sum_interval   = 10       # timesteps between computing mass 
ns.twall=0.0

ns.axis_dir=0
ns.vorterr=999999.0
ns.rgasinlet=0.0
ns.vinletgas=0.0
ns.advbot=5000.0  # velocity of drop
ns.adv_vel=0.0
ns.adv_dir=1       # inflow in x-direction
ns.xblob=0.0  # center of falling droplet
ns.yblob=0.012
ns.zblob=0.012
ns.radblob=0.005
ns.radblob2=0.001  # thickness of thin film A=0.116 B=0.1 C=0.116
# thickness of thin film if thin film is material 3
#ns.radblob3=0.001  # thickness of thin film A=0.116 B=0.1 C=0.116
ns.radblob4=0.00003  # thickness of "air cushion" should be small, but
                    # resolvable by "stackvolume" FILAMENT
ns.denfact=1.0
ns.velfact=0.0
ns.probtype=540
ns.material_type=0 0 0 0
ns.heatviscconst=0.0 0.0 0.0
ns.viscconst=1.0 0.0157 0.0157   # FILAMENT
ns.denconst=1.0 0.001226 0.001226   # FILAMENT
ns.v=1

# ----------------  PROBLEM DEPENDENT INPUTS
ns.lo_bc          = 3 4
ns.hi_bc          = 4 2

# >>>>>>>>>>>>>  BC FLAGS <<<<<<<<<<<<<<<<
# 0 = Interior           3 = Symmetry
# 1 = Inflow             4 = SlipWall
# 2 = Outflow            5 = NoSlipWall

# turn any of these on to generate run-time timing stats


# select single or double precision of FAB output data
#        default is whatever precision code is compiled with.
#fab.precision = FLOAT     # output in FLOAT or DOUBLE
fab.precision = DOUBLE    # output in FLOAT or DOUBLE
