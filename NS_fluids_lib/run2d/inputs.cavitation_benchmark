max_step  =  99999    # maximum timestep
#max_step  =  2    # maximum timestep
stop_time =  1.4e-3  # 20 x (0.7cm / 10^4 cm/s) W NOZZLE
stop_time =  100.0   # Simple J Nozzle

# liquid,vacuum,solid  W Nozzle
ns.num_materials=3  # CAVITATION
ns.num_species_var=1 # CAVITATION
ns.num_divu_outer_sweeps=4

ns.extend_pressure_into_solid=1

# Simple J Nozzle
ns.num_materials=2  # CAVITATION
ns.num_species_var=0 # CAVITATION
ns.num_divu_outer_sweeps=1

ns.post_init_pressure_solve=1
ns.slice_dir=1 # 0..sdim-1
ns.xslice=0.0 0.0

# ------------------  INPUTS TO CLASS AMR ---------------------
geometry.coord_sys      = 0        # 0 => cart, 1 => RZ
geometry.prob_lo   =  0.0 0.0

# W nozzle
geometry.prob_hi   =  0.7 0.35  # centimeters scale

# simple J nozzle
geometry.prob_hi   =  4.0 2.0  # meters scale

# multigrid class
mg.verbose = 0
cg.verbose = 0
# set above to 2 for maximum verbosity
mg.nu_f = 40
mg.nu_0 = 1   # 1 - v-cycle 2 - w-cycle
cg.maxiter = 400
mg.bot_atol = 1.0e-12
mg.rtol_b = -0.01
Lp.v = 0
# continuous_mof=0 regular MOF
# continuous_mof=1 CMOF
ns.continuous_mof=1
ns.MOFITERMAX=30
# EILE_flag=-1 Weymouth and Yue
# EILE_flag=1 alternate EI-LE
ns.EILE_flag=1
ns.ns_tiling=false
ns.project_solver_type=0 # 0MGPCG 1PCG 2 MINV=I
ns.projection_pressure_scale=1.0e+6 # since outflow_pressure=1.0e+6
ns.minimum_relative_error=1.0e-24
ns.initial_project_cycles=3  # number of initial jacobi iterations
ns.initial_cg_cycles=10  # number of MGPCG steps to do in order to get
                         # decent sized residual.

amr.n_cell    = 64 32 # 4x2 domain  4x1 nozzle  max_level=0 dx_finest=2/32=1/16
amr.max_level =  0
# W Nozzle
ns.ncoarseblocks=1
ns.xcoarseblocks=0.35
ns.ycoarseblocks=0.0
ns.zcoarseblocks=0.0
ns.rxcoarseblocks=0.1
ns.rycoarseblocks=0.05
ns.rzcoarseblocks=0.0

# J Simple Nozzle
ns.ncoarseblocks=0

# 0- 1 level 1- 2 levels  2- 3 levels
amr.regrid_int      = 1       # how often to regrid
amr.n_error_buf     = 4 4 4 4 4 4  # number of buffer cells in error est
amr.grid_eff        = 0.7   # what constitutes an efficient grid
# above was .55 (smaller=> less boxes)
amr.blocking_factor = 4       # block factor in grid generation
amr.check_int       = 100     # number of timesteps between checkpoints
amr.check_file      = chk     # root name of checkpoint file

amr.plot_int        = 10     # 10 for debug, 100 for production run? 
ns.visual_output_raw_State_Type=1
ns.visual_output_raw_mac_Type=1
ns.visual_WALLVEL_plot_int=1

amr.plot_file       = plt 
amr.grid_log        = grdlog  # name of grid logging file
amr.max_grid_size   = 256
#amr.restart         = chk04600
#amr.trace   =1

# ------------------  INPUTS TO PHYSICS CLASS -------------------
ns.dt_cutoff      = 1.0e-11  # level 0 timestep below which we halt

mac.mac_abs_tol    = 1.0e-10

# 1=always take sound speed into account
# 2=never take sound speed into account
# 0=take sound speed into account at t=0 only if compressible material
# water, vacuum, sphere
ns.shock_timestep=1 2  # COMPRESSIBLE
#ns.shock_timestep=2 2   # INCOMPRESSIBLE
ns.shock_timestep=2 2   # INCOMPRESSIBLE SIMPLE J Nozzle
ns.cfl            = 0.5    # cfl number for hyperbolic system
ns.init_shrink    = 0.5      # scale back initial timestep
ns.change_max=1.01    # scale back initial timestep
ns.visc_coef      = 1.0    # coef of viscosity
mac.visc_abs_tol   = 1.0e-8
ns.gravity        = 0.0
ns.gravityangle = 0.0

# 12 13 23 21 31 32 
ns.latent_heat=0.0 0.0 0.0 0.0 0.0 0.0 # disable CAVITATION
#ns.latent_heat=1.0 0.0 0.0 0.0 0.0 0.0 # enable CAVITATION
ns.mass_fraction_id=1 0 0 0 0 0 # CAVITATION
ns.freezing_model=7 0 0 0 0 0 # CAVITATION

# Simple J Nozzle
ns.mass_fraction_id=0 0 0 0 0 0 # CAVITATION
ns.freezing_model=0 0 0 0 0 0 # CAVITATION

#CAVITATION saturation pressure g/(cm s^2)
ns.cavitation_pressure=35400.0 0.0 
ns.cavitation_vapor_density=0.00002558 0.0 0.0
ns.cavitation_tension=71.7 0.0 0.0

ns.inflow_pressure=1.0e+6  # should not be used
ns.outflow_pressure=1.0e+6  # this will be used at all outflow boundaries.

ns.tension        = 0.0 0.0 0.0 
#ns.fixed_dt	  = 0.01     # hardwire dt
ns.sum_interval   = 1        # timesteps between computing mass 

# axis_dir=10 inputs.sphere_cavitation: density_at_depth=1.0000423520369408
# axis_dir=20 inputs.cavitation_benchmark
ns.axis_dir=20 

ns.vorterr=0.0 0.0 0.0 0.0
ns.rgasinlet=1.57
ns.vinletgas=0.0
ns.twall=0.1
ns.advbot=0.0 
# we want the velocity in the constricted part to be ~ 1.0e+4 cm/s
# aspect ratio is 2mm/150 microns=13.3
ns.adv_vel=0.75e+3  # W Nozzle

# for the rasterized formulation, the normal distance of the image point
# to the wall is dx/2 which is the same as the normal distance of the ghost
# point to the wall.
ns.adv_vel=0.5      # Simple J nozzle

ns.adv_dir=1  # adv_dir=1..sdim+1
ns.viscconst=0.00853 0.00853 0.00853 #CAVITATION W Nozzle

ns.viscconst=0.001 0.001 # Simple J Nozzle (Pascals * sec)
ns.viscconst_eddy_wall=1.0e-10 0.0

ns.tempconst=293.0 293.0 293.0
ns.pressure_error_cutoff=0.0 0.0 0.0 0.0
#ns.material_type=0 999 # INCOMPRESSIBLE
ns.material_type=1 1 999 # COMPRESSIBLE (EOS_tait) CAVITATION

ns.material_type=0 999 # Simple J Nozzle

ns.density_floor=0.9999577 0.9999577 0.9999999 # corresponds ~ 250 dyne/cm^2
ns.density_ceiling=1.006 1.006 1.00000001  # corresponds ~ 10^9 dyne/cm^2

# Simple J Nozzle
ns.density_floor=0.999 0.999
ns.density_ceiling=1.001 1.001

# see fort_wallfunction in GODUNOV_3D.F90
# see getGhostVel in GODUNOV_3D.F90
ns.law_of_the_wall=1 1 0 # make 1 for law of the wall (2 for GNBC)
ns.FSI_flag=0 0 1 # CAVITATION

ns.FSI_flag=0 1 # Simple J nozzle

# 1 Watt=10^7 ERG/S
# 1 W/(M K)=10^5 ERG/(S CM K)
# 1 ERG= 1 (gram cm^2/s^2)
# air: k=0.024 W/(M K)
# water: k=0.58 W/(M K)
# OPTION 1
# CAVITATION
ns.heatviscconst=58000.0 58000.0 58000.0
ns.include_viscous_heating=0
# CAVITATION
ns.denconst=1.0 1.0 1.0

ns.denconst=1.0 1.0  # Simple J nozzle

ns.zblob=0.0
ns.radblob=1.0

ns.xblob=3000.0  # length of thicker part of nozzle (Brusiani)
ns.yblob=2000.0  # J, U or W nozzle (centerline)
ns.radblob2=2.0  # W nozzle configuration Brusiani et al 2013
ns.radblob3=301.0 # W or U nozzle, nl_width
ns.radblob4=270.0 # W nozzle, nr_width
ns.radblob6=20.0  # J, U or W nozzle (radius of curvature of rounded edge)

#ns.radblob4=284.0 # U nozzle, nr_width
ns.radblob5=1.0e+4  # scaling for the J, U or W nozzle from Brusiani

ns.radblob2=0.0  # J nozzle configuration
ns.radblob3=299.0 # J nozzle, nl_width
ns.radblob4=299.0 # J nozzle, nr_width
ns.radblob3=1.0 # J nozzle, nl_width (simple test)
ns.radblob4=1.0 # J nozzle, nr_width (simple test)
ns.radblob5=1.0 # scaling for nozzle
ns.radblob6=0.0  # J, U or W nozzle (radius of curvature of rounded edge)
ns.yblob=1.0    # centerline of nozzle
ns.xblob=0.0  # length of thicker part of nozzle (Brusiani)

ns.denfact=1.0
ns.velfact=0.0
ns.probtype=46

#ns.mem_debug = 1
ns.v = 1
#ns.d = 1

# ----------------  PROBLEM DEPENDENT INPUTS
ns.lo_bc          = 1 3
ns.hi_bc          = 2 3
ns.species_lo_bc  = 1 3
ns.species_hi_bc  = 2 3

# >>>>>>>>>>>>>  BC FLAGS <<<<<<<<<<<<<<<<
# 0 = Interior           3 = Symmetry
# 1 = Inflow             4 = SlipWall
# 2 = Outflow            5 = NoSlipWall

# turn any of these on to generate run-time timing stats


# select single or double precision of FAB output data
#        default is whatever precision code is compiled with.
#fab.precision = FLOAT     # output in FLOAT or DOUBLE
fab.precision = DOUBLE    # output in FLOAT or DOUBLE

