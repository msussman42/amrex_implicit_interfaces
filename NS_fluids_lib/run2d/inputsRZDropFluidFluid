max_step  = 200000   # maximum timestep
#max_step  =  2    # maximum timestep
stop_time = 200  # maximum problem time

# ------------------  INPUTS TO CLASS AMR ---------------------
# set up for bubble
geometry.coord_sys      = 1   # 0 => cart, 1 => RZ
geometry.prob_lo   =  0.0 0.0
geometry.prob_hi   =  1.0 4.0  # 4,4,8 XYZ  2,8 => RZ
geometry.is_periodic = 0 0 0 

# 0MGPCG 1PCG 2 MINV=I
ns.project_solver_type=0
Lp.smooth_type=2
Lp.bottom_smooth_type=2
Lp.gpucount=1

# multigrid class
#mg.verbose = 1
#cg.verbose = 1
# set above to 2 for maximum verbosity
mg.nu_f = 40
mg.nu_0 = 1   # 1 - v-cycle 2 - w-cycle
cg.maxiter = 200
mg.bot_atol = 1.0e-10
mg.rtol_b = -0.01
#Lp.v = 1

# NOV 4: 3 values required
# NOV 4:
# material 2 is the bubble or drop
# material 1 is the lower stratified fluid
# material 3 is the upper stratified fluid
ns.num_materials=3
ns.num_species_var=0
ns.minimum_relative_error=1.0e-18
# M.OHTA: scale set in order that initial residual O(1)
ns.projection_pressure_scale=100.0
# M.OHTA 2 should be ok, 3 is conservative choice

#JUNE 28
ns.truncate_thickness=2.0

# JUNE 28
# OCTOBER 22 - EILE_flag=-1 performs best
ns.EILE_flag=-1  # EILE_flag=1 (EILE)  EILE_flag=-1 (weymouth yue)
# water is 1st order, gas is 1st order 
# NOV 4: 3 values required
# JAN8: 2nd order so that splash is captured.

# 0=use LS  1=use VOF

ns.minimum_relative_error=1.0e-18
ns.initial_project_cycles=10  # number of initial jacobi iterations
ns.initial_cg_cycles=10  # number of MGPCG steps to do in order to get
                         # decent sized residual.

# 64x256 base, max_level=1
amr.n_cell    = 44 176
amr.max_level = 1
# 0- 1 level 1- 2 levels  2- 3 levels
amr.regrid_int      = 1       # how often to regrid
amr.n_error_buf     = 2 2 2 2 2   # number of buffer cells in error est
# M.OHTA 0.85 a more conservative choice than 0.95, but 0.95 works too.
amr.grid_eff        = 0.85   # what constitutes an efficient grid
# above was .55 (smaller=> less boxes)
# blocking_factor=4 is best
amr.blocking_factor = 4       # block factor in grid generation
amr.check_int       = 100     # number of timesteps between checkpoints
amr.check_file      = chk     # root name of checkpoint file
# NOV 4, JULY 30 - made this smaller to speed up testing
amr.plot_int        = 100      # 1000
amr.plot_file       = plt 
amr.grid_log        = grdlog  # name of grid logging file
# M.OHTA 32 is more optimal than 16 I think.
amr.max_grid_size   = 32
#amr.restart         = chk10000
#amr.trace   =1

# ------------------  INPUTS TO PHYSICS CLASS -------------------
ns.dt_cutoff      = 0.000005  # level 0 timestep below which we halt

mac.mac_tol        = 1.0e-8  # tolerence for mac projections
mac.mac_abs_tol    = 1.0e-8

# M.OHTA this option not used in 3d since output files already
# binary format.
#JAN21


ns.cfl            = 0.5      # cfl number for hyperbolic system
ns.init_shrink    = 1.0      # scale back initial timestep
ns.change_max     = 1.1      # scale back initial timestep
ns.visc_coef      = 1.0        # 1/Re
mac.visc_abs_tol   = 1.0e-8
ns.gravity        = -980     # 1/Fr
# 12, 13, 23
# material 2 will be bubble
# if materials 1 and 3 are the same, then sigma_13=0 and
# sigma_12=sigma_23
# since, sigma_{i,j}cos(theta_{i,k})=sigma_{j,k}-sigma_{i,k}
# sigma_12 cos(theta_13)=sigma23-sigma13 theta13=0 degrees
# sigma_21 cos(theta_23)=sigma13-sigma23  theta23=180 degrees
# sigma_23 cos(theta_21)=sigma_31-sigma21  theta_21=180 degrees
# NOV 4:
# material 2 is bubble or drop, material 1 lower, material 3 upper
# sigma_23=69.4 ? (between drop and air)
# sigma_13=69.4 ? (between lower liquid and upper air)
# sigma_12=20.2 or 19.7 (between lower liquid and drop)
ns.tension        = 29.0 54.51 15.4 # 0.0025

ns.ignition       = -30000.0
#ns.fixed_dt	  = 0.0025     # hardwire dt
# NOV 4: sum_interval changed from 1 to 10
ns.sum_interval   = 10        # timesteps between computing mass

ns.axis_dir=0
# NOV 4: 3 values required
ns.vorterr=0.0 0.0 0.0
ns.rgasinlet=1.57
ns.vinletgas=0.0
ns.twall=0.1
ns.advbot=75.0
ns.adv_vel=0.0
ns.adv_dir=3 # 2 RZ 3 XYZ
ns.fluid_stable_factor=0.0
ns.heatviscconst=0.0 0.0 0.0 0.0
ns.viscconst=1.4E-2 4.58E-2  1.822E-4
ns.denconst=1.04 0.92 0.001205 
ns.tempconst=293.0 293.0 293.0 
ns.material_type=0 0 0 
ns.pressure_error_cutoff=0.0 0.0 0.0 
ns.xblob=0.0
ns.yblob=3.8
ns.zblob=3.8  # center (2,2,1) XYZ  (0,1) RZ
ns.zblob2=0.8  # material 1 z<zblob2 material 3 z>zblob2 XYZ or RZ
ns.radblob=0.104535
ns.denfact=1.0
ns.velfact=0.0
ns.probtype=201

proj.bogus_value = 5.0e+5
proj.Pcode = 0
#proj.Pcode = 2

#ns.mem_debug = 1
#ns.v = 1
#ns.d = 1

# ----------------  PROBLEM DEPENDENT INPUTS
# NOV 17: cannot have outflow at ylo. (changed to NoSlipWall)
# NOV 17: code is fixed so that hydrostatic pressure equilibrium is 
#  prescribed at outflow boundaries.  Now, the liquid at the bottom
#  will not be "pushed out" of the domain by gravity.
ns.lo_bc          = 3 5  # 4 4 4 XYZ 3 4 RZ
ns.hi_bc          = 2 5  # 4 4 4 XYZ 4 4 RZ

# >>>>>>>>>>>>>  BC FLAGS <<<<<<<<<<<<<<<<
# 0 = Interior           3 = Symmetry
# 1 = Inflow             4 = SlipWall
# 2 = Outflow            5 = NoSlipWall

# turn any of these on to generate run-time timing stats

fab.do_initval=1

# select single or double precision of FAB output data
#        default is whatever precision code is compiled with.
#fab.precision = FLOAT     # output in FLOAT or DOUBLE
fab.precision = DOUBLE    # output in FLOAT or DOUBLE

