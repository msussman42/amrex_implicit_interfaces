max_step  =  99999    # maximum timestep
#max_step  =  3    # maximum timestep
stop_time =  1.0  # maximum problem time

# ------------------  INPUTS TO CLASS AMR ---------------------
# use RT_growth.f90 to determine expected growth rate
# formula comes from Chandrasekhar page 444.
# Use a very small amplitude (<=10^-3 dx) and a very large
# frequency (>1.0E+5) in order to 
# expose MOF for having a jagged interface as a steady solution
# to the N-S equations for multiphase flow.
geometry.coord_sys      = 0        # 0 => cart, 1 => RZ
geometry.prob_lo   =  0.0 0.0
geometry.prob_hi   =  2.0 1.0 # cgs units
geometry.is_periodic=1 0
ns.show_timings=0

ns.EILE_flag=-1
ns.continuous_mof=0
ns.MOFITERMAX=15

# 0=GSRB 1=ICRB 2=ILU
Lp.smooth_type=2
Lp.bottom_smooth_type=2

# multigrid class
#mg.verbose = 1
#cg.verbose = 1
# set above to 2 for maximum verbosity
mg.nu_f = 40
mg.nu_0 = 1   # 1 - v-cycle 2 - w-cycle
cg.maxiter = 400
mg.bot_atol = 1.0e-14
mg.rtol_b = -0.01
#Lp.v = 1

ns.num_materials=2
ns.num_species_var=0
ns.post_init_pressure_solve=1 
# 1/c^2  assume mach number 0.01
ns.minimum_relative_error=1.0e-22
# number of Jacobi method cycles elliptic solver initially does.
ns.initial_project_cycles=3
# do 1 MGPCG cycles, then restart the MGPCG iteration
# and do as many cycles as necessary in order to achieve convergence.
ns.initial_cg_cycles=1
ns.projection_pressure_scale=1.0e+6
ns.project_solver_type=0 # 0MGPCG 1PCG 2 MINV=I
amr.n_cell    = 64 32
amr.max_level = 0
# 0- 1 level 1- 2 levels  2- 3 levels
amr.regrid_int      = 1       # how often to regrid
amr.n_error_buf     = 4 4 4 4 4 4    # MO improve efficiency (was 4)
amr.grid_eff        = 0.8   #  MO improve efficiency
# above was .55 (smaller=> less boxes)
amr.blocking_factor = 4       # 8 for GPU
amr.check_int       = 100      # number of timesteps between checkpoints
amr.check_file      = chk     # root name of checkpoint file
amr.plot_int        = 100
amr.plot_file       = plt 
amr.grid_log        = grdlog  # name of grid logging file
amr.max_grid_size   = 16
#amr.restart         = chk00500
amr.plotfile_on_restart=1
#amr.trace   =1

# ------------------  INPUTS TO PHYSICS CLASS -------------------
ns.dt_cutoff      = 0.000005  # level 0 timestep below which we halt

mac.mac_abs_tol    = 1.0e-12


ns.cfl            = 0.5 
ns.init_shrink    = 0.1
ns.change_max     = 1.1      
ns.visc_coef      = 1.0  # 1.0
# invert_gravity=0 => force points from heavy fluid to light fluid
# invert_gravity=1 => force points from light fluid to heavy fluid
ns.invert_gravity=0
ns.gravity        = 0.0  
ns.tension        = 72.8  # cgs units
#ns.fixed_dt	  = 0.0025     # hardwire dt
ns.sum_interval   = 20        # timesteps between computing mass 

ns.axis_dir=0
ns.vorterr=0.0 0.0
ns.rgasinlet=1.57
ns.vinletgas=0.0
ns.twall=0.1
ns.advbot=0.0
ns.adv_vel=0.0
ns.adv_dir=2


ns.heatviscconst=0.0 0.0 0.0 0.0
ns.viscconst=0.01 1.225e-5
ns.pressure_error_cutoff=0.0 0.0 
ns.denconst=1.0 0.001225 
#ns.tempconst=300.0188 282.88543  # stiffened EOS for water
ns.tempconst=282.88543 282.88543  # Tait EOS for water
# shock_timestep=2 2 option => never consider sound speed.
ns.shock_timestep=2 2  # 0 0 INCOMP; 2 2 if COMPRESSIBLE (shrink=0.1)
ns.material_type=0 0 
ns.stiffCP=4.19e+7  1.01e+7  # cgs units
# number of periods in the domain (if 0.0 then default 1 period)
ns.xblob=1.0e+10   
# average height of the interface
# this value will automatically be shifted up by dy/2
ns.yblob=0.5   
ns.zblob=0.0
ns.radblob=1.0e-10  # amplitude of perturbation 
ns.denfact=1.0
ns.velfact=0.0
ns.probtype=602

proj.bogus_value = 5.0e+5
proj.Pcode = 0
#proj.Pcode = 2

#ns.mem_debug = 1
#ns.v = 1
#ns.d = 1

# ----------------  PROBLEM DEPENDENT INPUTS
ns.lo_bc          = 0 5
ns.hi_bc          = 0 5

# >>>>>>>>>>>>>  BC FLAGS <<<<<<<<<<<<<<<<
# 0 = Interior           3 = Symmetry
# 1 = Inflow             4 = SlipWall
# 2 = Outflow            5 = NoSlipWall

# turn any of these on to generate run-time timing stats

#fab.initval=0.0
#fab.do_initval=1

# select single or double precision of FAB output data
#        default is whatever precision code is compiled with.
#fab.precision = FLOAT     # output in FLOAT or DOUBLE
fab.precision = DOUBLE    # output in FLOAT or DOUBLE

