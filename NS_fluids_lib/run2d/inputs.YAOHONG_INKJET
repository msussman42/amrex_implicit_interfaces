# Units are MKS
max_step  =  99999    # maximum timestep
#max_step  =  1      # maximum timestep
stop_time = 0.1 # 100 ms=0.1 s

# liquid,air,solid
ns.num_materials=3
ns.num_species_var=0

# 0=cell
# 1=face

ns.post_init_pressure_solve=1
#ns.slice_dir=1 # 0..sdim-1
#ns.xslice=0.0 0.0 0.0

# 4 * .002875 = .011500
# inhomogenius pressure at z=0.0115
# ------------------  INPUTS TO CLASS AMR ---------------------
geometry.coord_sys      = 1        # 0 => cart, 1 => RZ
geometry.prob_lo   = 0.0  0.0 
geometry.prob_hi   =  0.002875 0.0115  # meters 
amr.plotfile_on_restart=1

# multigrid class
mg.verbose = 0
cg.verbose = 0
# set above to 2 for maximum verbosity
mg.nu_f = 40
mg.nu_0 = 1   # 1 - v-cycle 2 - w-cycle
cg.maxiter = 400
mg.bot_atol = 1.0e-13
mg.visc_bot_atol = 1.0e-15
mg.thermal_bot_atol = 1.0e-13
mg.rtol_b = -0.01
Lp.v = 0
# continuous_mof=0 regular MOF
# continuous_mof=1 CMOF
ns.continuous_mof=1
ns.MOFITERMAX=30
# EILE_flag=-1 Weymouth and Yue
# EILE_flag=1 alternate EI-LE
ns.EILE_flag=1
ns.ns_tiling=false
ns.project_solver_type=0 # 0MGPCG 1PCG 2 MINV=I
ns.projection_pressure_scale=1.0 # depnding on outflow pressure
ns.minimum_relative_error=1.0e-15
ns.initial_project_cycles=3  # number of initial jacobi iterations
ns.initial_cg_cycles=10  # number of MGPCG steps to do in order to get
                         # decent sized residual.
ns.visual_tessellate_vfrac=0

amr.n_cell    = 32 128
amr.max_level =  0  

#ns.nblocks=1
#ns.xblocks=0.0
#ns.yblocks=0.375
#ns.zblocks=0.0
#ns.rxblocks=0.75
#ns.ryblocks=0.375
#ns.rzblocks=0.0

# 0- 1 level 1- 2 levels  2- 3 levels
amr.regrid_int      = 1       # how often to regrid
amr.n_error_buf     = 4 4 4 4 4  # number of buffer cells in error est
amr.grid_eff        = 0.8   # what constitutes an efficient grid
# above was .55 (smaller=> less boxes)
# blocking_factor[i] is the blocking factor for level i.
# blocking_factor must be a power of 2.
# blocking_factor[i+1]<=blocking_factor[i]
# max_grid_size[i]%blocking_factor[i] must be 0.
# The proper nesting buffer of level i cells next to level i+1
# cells is bf_lev[i]*n_proper. (2*bf_lev[i]=blocking_factor[i])
# in order for elements at level i to be aligned with (coarse)
# elements on level
# i-1, the blocking factor on level i must be equal to twice the order on
# level i-1.  In otherwords, blocking_factor[i]=2*order[i-1]
# In order to meet the proper nesting requirements, we must have:
# blocking_factor[i-1]=2*order[i-1]
amr.blocking_factor = 8 8 8 8 8      # block factor in grid generation
# 2nd order in space/time except near interfaces, where algorithm automatically
# reduces to first order.
amr.space_blocking_factor = 1 1 1 1 1
amr.time_blocking_factor=1
ns.enable_spectral=0  # enable_spectral=0 or 1 (advection, pressure grad are
                      #  high order in space and time.
amr.check_int       = 100    # number of timesteps between checkpoints
amr.check_file      = chk     # root name of checkpoint file
amr.plot_int        = 100       # 10 for debug, 100 for production run? 
amr.plot_file       = plt 
amr.grid_log        = grdlog  # name of grid logging file
amr.max_grid_size   = 512
#amr.restart         = chk00270
#amr.trace   =1

# ------------------  INPUTS TO PHYSICS CLASS -------------------
ns.dt_cutoff      = 1.0e-11  # level 0 timestep below which we halt

mac.mac_abs_tol    = 1.0e-11

# 1=always take sound speed into account
# 2=never take sound speed into account
# 0=take sound speed into account at t=0 only if compressible material
# water, vacuum, sphere
#ns.shock_timestep=1 2  # COMPRESSIBLE
#ns.shock_timestep=2 2   # INCOMPRESSIBLE
ns.cfl            = 0.5    # cfl number for hyperbolic system
# for SEM, the initial time step is further reduced by 2^{r_time}
ns.init_shrink    = 0.5      # scale back initial timestep
ns.change_max=1.01    # scale back initial timestep
ns.change_max_init= 1.1
ns.visc_coef      = 1.0    # coef of viscosity
mac.visc_abs_tol   = 1.0e-13
#ns.gravity        = -9.8
ns.gravity =0.0  
ns.gravity_dir = 2  # 1,2, or 3  (2 in 2D, 3 in 3D are the defaults)
#ns.inflow_pressure=0.0  # will use press_YAOHONG.in at z=zhi
#ns.outflow_pressure=0.0 # p=0.0 at z=zlo
# sigma_{SV}-sigma_{SL}=sigma_{LV}cos(theta_L)
# sigma_SV=0.064(1 + cos(thetaL))=0.064(1+cos(110))=0.042
# 12 13 23
ns.tension        = 0.064 0.064 0.042 
#ns.fixed_dt	  = 0.01     # hardwire dt
ns.sum_interval   = 1        # timesteps between computing mass 

ns.axis_dir=0
ns.vorterr= 0.0 0.0 0.0
ns.rgasinlet=1.57
ns.vinletgas=0.0
ns.twall=0.1
ns.advbot=0.0 
ns.adv_vel=0.0
ns.adv_dir=2  # not used (adv_dir=1,2,3)
ns.uncoupled_viscosity=0
ns.viscconst=1.7e-2 1.825e-5 1.7e-2
ns.tempconst=293.0 293.0 293.0
ns.pressure_error_cutoff=0.0 0.0 0.0 0.0
ns.material_type=0 0 999 # INCOMPRESSIBLE
# ns.density_floor=0.9999577 0.9999999 # corresponds ~ 250 dyne/cm^2
# ns.density_ceiling=1.006 1.00000001  # corresponds ~ 10^9 dyne/cm^2
# see FORT_WALLFUNCTION in GODUNOV_3D.F90
# see getGhostVel in GODUNOV_3D.F90
# ns.law_of_the_wall=0 0 0 # make 1 for law of the wall
ns.FSI_flag=0 0 1  # 1 (GLOBALDIST), 2 (cas file)
#ns.FSI_refine_factor=1 0
#ns.FSI_bounding_box_ngrow=3 3
#ns.heatviscconst=0.02588 0.02588
ns.heatviscconst=0.0 0.0 0.0 # no thermal diffusion (so that test runs quickly)
# ns.include_viscous_heating=0
ns.denconst=1180.0 1.169 1180.0
ns.xblob=0.0
ns.yblob=0.0
ns.zblob=0.0
ns.radblob=0.0

ns.denfact=1.0
ns.velfact=0.0
ns.probtype=2011 # YAOHONG_INKJET.F90

#ns.mem_debug = 1
ns.v = 1 # we want to monitor the residual.
#ns.d = 1

# ----------------  PROBLEM DEPENDENT INPUTS
# At an Inflow, SlipWall, or NoSlipWall domain boundary, 
# if the the boundary condition has
# \vec{u} dot n >= 0 (n is outward facing normal),
# then for higher than first order discretization, 
# S should have a numerical boundary condition, 
# not a dirichlet boundary.
ns.lo_bc          = 3 2
ns.hi_bc          = 3 2

# >>>>>>>>>>>>>  BC FLAGS <<<<<<<<<<<<<<<<
# 0 = Interior           3 = Symmetry
# 1 = Inflow             4 = SlipWall
# 2 = Outflow            5 = NoSlipWall

# turn any of these on to generate run-time timing stats


# select single or double precision of FAB output data
#        default is whatever precision code is compiled with.
#fab.precision = FLOAT     # output in FLOAT or DOUBLE
fab.precision = DOUBLE    # output in FLOAT or DOUBLE

