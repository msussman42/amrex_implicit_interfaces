max_step  =  200000   # maximum timestep
#max_step  =  2    # maximum timestep
stop_time =  120.0  # maximum problem time

# ------------------  INPUTS TO CLASS AMR ---------------------
# set up for bubble
geometry.coord_sys      = 0        # 0 => cart, 1 => RZ
geometry.prob_lo   =  -162.56 0.0
geometry.prob_hi   =   162.56 325.12 # L=128*2.54=325.12  0<x<2.54
geometry.is_periodic = 0  0          # MS 0  1 if periodic, 0  0 if not

ns.minimum_relative_error=1.0e-18
ns.initial_project_cycles=10  # number of initial jacobi iterations
ns.initial_cg_cycles=10  # number of MGPCG steps to do in order to get
                         # decent sized residual.

# multigrid class
mg.verbose = 0
cg.verbose = 0
# set above to 2 for maximum verbosity
mg.nu_f = 40
mg.nu_0 = 1   # 1 - v-cycle 2 - w-cycle
cg.maxiter = 200
mg.bot_atol = 1.0e-12
mg.rtol_b = -0.01
Lp.v = 0
ns.num_materials=3
ns.num_species_var=0

amr.n_cell   = 128 128  # 4096x4096 effective fine grid resolution
amr.max_level =  5
# 0- 1 level 1- 2 levels  2- 3 levels
amr.regrid_int      = 1       # how often to regrid
amr.n_error_buf     = 4 4 4 4 4    # number of buffer cells in error est
amr.grid_eff        = 0.8   # what constitutes an efficient grid
# above was .55 (smaller=> less boxes)
amr.blocking_factor = 4       # block factor in grid generation
amr.check_int       = 500     # number of timesteps between checkpoints
amr.check_file      = chk     # root name of checkpoint file
amr.plot_int        = 500      # CHANGE TO 500
amr.plot_file       = plt 
amr.grid_log        = grdlog  # name of grid logging file
amr.max_grid_size   = 4096
#amr.restart         = chk00500
#amr.trace   =1

# ------------------  INPUTS TO PHYSICS CLASS -------------------
ns.dt_cutoff      = 0.000005  # level 0 timestep below which we halt

mac.mac_abs_tol    = 1.0e-10

#amr.plotfile_on_restart=1


ns.continuous_mof=1

ns.cfl            = 0.5      # cfl number for hyperbolic system
ns.init_shrink    = 1.0      # scale back initial timestep
ns.change_max     = 1.1      # scale back initial timestep
ns.visc_coef      = 1.0
ns.gravity        = -980.0    # body force  -980.0
ns.invert_gravity=1  # 0=> gravity points down (or to the left)  
                     # 1=> gravity points up (or to the right)
ns.gravity_dir=1 # x direction
# sigma_{SV}-sigma_{SL}=sigma_{LV}cos(theta)
# 90 degrees=>sigma_{SV}=sigma_{LV}  and
# sigma_{SL}/sigma_{LV}=1
ns.tension        = 72.75 72.75 72.75    # 12 13 23
#ns.fixed_dt	  = 0.04       # hardwire dt
ns.sum_interval   = 10        # timesteps between computing mass 

ns.axis_dir=2  # axis_dir=1 liquid x>xblob
               # axis_dir=2 liquid  |x-xblob|>radblob2
ns.vorterr=999999.0
ns.rgasinlet=1.57
ns.vinletgas=2.0           # liquid inflow velocity  
ns.yblob4=0.0            # initial liquid velocity
ns.twall=0.1
ns.advbot=20.0          # gas inflow velocity 
ns.xblob4=0.0           # initial gas velocity
ns.adv_vel=0.0           # should always be 0.0
ns.adv_dir=2             # should always be 2
ns.heatviscconst=0.0 0.0 0.0 
ns.tempconst=293.0 293.0 293.0
ns.pressure_error_cutoff=0.0 0.0 0.0
ns.viscconst=0.01 0.00018 0.0
ns.denconst=1.0 0.001225 1.0
ns.material_type=0 0 999
# axis_dir=1 liquid x>xblob (swap if axis_dir=4)
# axis_dir=2 liquid |x-xblob|>radblob2
#ns.xblob=1.27    # this is for old axis_dir=1 case
#ns.radblob2=0.0
ns.xblob=1.27
ns.radblob2=0.635   # radius of initial gas jet (axis_dir=2)
ns.radblob3=1.27 # radius of pipe, 0<x<2*radblob3
ns.yblob=325.12            # wave length of perturbation  128*H
ns.zblob=0.0
ns.radblob=0.0               # perturbation
ns.denfact=1.0
ns.velfact=0.0 
ns.probtype=41

#ns.mem_debug = 1
ns.v = 1
#ns.d = 1

# ----------------  PROBLEM DEPENDENT INPUTS
ns.lo_bc          = 5 1  # MS 5 1 if inflow, 3 0 if periodic 
ns.hi_bc          = 5 2  # MS 5 2 if outflow, 5 0 if periodic 

# >>>>>>>>>>>>>  BC FLAGS <<<<<<<<<<<<<<<<
# 0 = Interior           3 = Symmetry
# 1 = Inflow             4 = SlipWall
# 2 = Outflow            5 = NoSlipWall

# turn any of these on to generate run-time timing stats


# select single or double precision of FAB output data
#        default is whatever precision code is compiled with.
#fab.precision = FLOAT     # output in FLOAT or DOUBLE
fab.precision = DOUBLE    # output in FLOAT or DOUBLE

