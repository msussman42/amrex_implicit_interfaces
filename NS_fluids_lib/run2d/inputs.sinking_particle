# sinking ball problem: Robey and Puckett
# dimensional parameters: rho_light=100  rho_heavy=110
# mu=10^7 Pa s=10^7 kg/(ms)   g=9.8m^2/s  L=1 m
# make characteristic scales as follows:
# length scale d=1
# velocity scale=mu/(rho0 d)=10^7/(100 x 1)=10^5 m/s
# Re=rho0 d U/mu = 100 x 1 x 10^5/10^7 = 1
# Re_standard= rho0 d v_terminal / mu = 100 x 1 x 1.5e-7/10^7=1.5e-12
# Fr=U^2/(d g)=10^10/(1 x 9.8)=10^10/9.8
# make gravity term 10^(-9)
# note gravity term can be also written as:
# d g/U^2 = d g/(mu/(rho0 d))^2=g d^3 rho0^2/mu^2
# v_terminal_scaled=(2/9)(0.1)/1 (1.0e-9)(0.26)^2=1.5e-12
# v_terminal=1.5e-7 m/s
#
#future work: try different time quadrature points, compare growth
#rate to analytical growth rate.  Do time parallel algorithm?
# rho_light=1 rho_heavy=1.1  kg/m^3
# L=1 m   g=9.8 m^2/s
# radius=0.25
# mu=1.0 Pa s (water is 8.9e-4 Pa s)
# v_terminal=(2/9)(0.1)/1 (9.8)(0.25)^2=1.361e-2 m/s
# Re_standard=(1)(1)(1.36e-2)/1=1.36e-2
# stop_time * 1.36e-2 = .4  stop_time=29.4
#
# if mu=0.5 Pa s  v_terminal=2.722e-2 m/s  Re_standard=5.44e-2
# stop_time * 2.722e-2 = 0.2 stop_time=7.0
#
# note: for EGP
# Rayleigh number * B = g d^3 Delta rho/(mu kappa)
# units of kappa: m^2/s
# units of mu: kg/(m s)
#
# Gerya-Yuen sinking box problem:
# domain dimensions 500^2 km
# box dimensions 100^2 km  distance of  box from top of domain: 50km
# box density: 3300 kg/m^3
# continuous fluid density: 3200 kg/m^3
# viscosity mu=10^21 Pa s=10^21 kg/(m s)
# g=9.8 m/s^2
#
# Length scale: d=100 km
# velocity scale: mu/(rho0 d)=10^21/(3200 * 10^5)=3.125E+12
# Re=rho0 d U/mu=3200 (10^5) 3.125E+12/(10^21) = 1
# Fr=U^2/(g d)=(3.125E+12)^2/(9.8 10^5)=9.965E+18
# 1/Fr=1.00352E-19
# T=d/U=10^5/3.125E+12=3.2E-8  t=T t^ast
# note: 1/T=3.125E+7
# v_terminal=(2/9)(3300-3200)/10^21  (9.8)(1E5)^2=2.2E-9 m/s
#  time to fall 100 km: 1E5=2.2E-9 * t_crit  t_crit=0.5E14
# v_terminal_scaled: (2/9)(0.03125)/1   (1.0e-19)(.26)^2=4.7E-23
#
# For falling sphere in an infinite domain:
# v_terminal = (2/9) (rho_particle - rho_fluid)/mu  (g R^2)
# units: kg/m^3 / kg/(m s)  m/s^2 m^2 = (s/m^2) (m^3/s^2)=m/s
# 
max_step  =  99999    # maximum timestep
#max_step  =  2    # maximum timestep
stop_time = 7.0
#stop_time = 10.0
#stop_time = 5.0e+12
#stop_time = 1.0e+30

# ------------------  INPUTS TO CLASS AMR ---------------------
geometry.coord_sys      = 1        # 0 => cart, 1 => RZ
geometry.prob_lo   =  0.0 0.0
geometry.prob_hi   =  0.5 1.0
geometry.is_periodic=0 0
ns.MOFITERMAX=15
# continuous_mof=0 regular MOF
# continuous_mof=2 CMOF
# continuous_mof=4 CLSVOF + CMOF hybrid
# continuous_mof=4 CLSVOF + CMOF hybrid
ns.continuous_mof=0
ns.face_flag=1
ns.conservative_tension_force=0
ns.temperature_primitive_variable=1 1 1 1 1

# 0=GSRB 1=ICRB 2=ILU
Lp.smooth_type=2
Lp.bottom_smooth_type=2
Lp.use_mg_precond_in_mglib=1 # def=1
mg.presmooth=2  # def=2
mg.postsmooth=2  # def=2
Lp.bottom_bottom_tol_factor=0.1 # def=0.1

# multigrid class
#mg.verbose = 1
#cg.verbose = 1
# set above to 2 for maximum verbosity
mg.nu_f = 40
mg.nu_0 = 1   # 1 - v-cycle 2 - w-cycle
cg.maxiter = 400
mg.bot_atol = 1.0e-13
#mg.bot_atol = 1.0e-14
mg.visc_bot_atol = 1.0e-13
#mg.visc_bot_atol = 1.0e-15
#mg.visc_bot_atol = 1.0e-23
mg.rtol_b = -0.01
#Lp.v = 1
ns.projection_pressure_scale=1.0
#ns.projection_pressure_scale=1.0e-12
#ns.projection_pressure_scale=1.0e-19
ns.num_materials=2
ns.num_species_var=0
ns.post_init_pressure_solve=1 # 1=INCOMP 0=COMPRESSIBLE
ns.minimum_relative_error=1.0e-22
ns.initial_project_cycles=3
ns.initial_cg_cycles=10
ns.project_solver_type=0 # 0MGPCG 1PCG 2 MINV=I
amr.n_cell    = 32 64
amr.max_level = 1
ns.ns_tiling=false
# 0- 1 level 1- 2 levels  2- 3 levels
amr.regrid_int      = 1       # how often to regrid
amr.n_error_buf     = 6 3 2    
amr.grid_eff        = 0.8   
# above was .55 (smaller=> less boxes)
amr.blocking_factor = 8 8 8 8      # 8 for GPU
amr.space_blocking_factor = 4 2 2 2
amr.time_blocking_factor=1
# make enable_spectral=3 for SDC and first order
# make enable_spectral=2 for first order in time and higher order in space
# make enable_spectral=1 for SDC and >1 order
ns.enable_spectral=2
ns.viscous_enable_spectral=0
amr.check_int       = 100     # number of timesteps between checkpoints
amr.check_file      = chk     # root name of checkpoint file
amr.plot_int        = 1
amr.plot_file       = plt 
amr.grid_log        = grdlog  # name of grid logging file
amr.max_grid_size   = 1024
#amr.restart         = chk00300
amr.plotfile_on_restart=1
#amr.trace   =1

# ------------------  INPUTS TO PHYSICS CLASS -------------------
ns.dt_cutoff      = 0.000005  # level 0 timestep below which we halt

mac.mac_abs_tol    = 1.0e-11
#mac.mac_abs_tol    = 1.0e-12
mac.visc_abs_tol    = 1.0e-11
#mac.visc_abs_tol    = 1.0e-13
#mac.visc_abs_tol    = 1.0e-21


ns.visual_option=-2  # -2,-3 zonal tecplot, -1 plot files
ns.visual_compare=0  # if 1, then compare to COARSEDATA.tec 
ns.visual_ncell=16 32

ns.cfl            = 0.5 
ns.init_shrink    = 0.1 
ns.change_max     = 1.1      
ns.change_max_init = 1.0e+5
ns.visc_coef      = 1.0   
ns.gravity        = -9.8
#ns.gravity        = -1.0e-9
#ns.gravity        = -1.00352e-19
# terminal_velocity_dt==1 =>
# use the terminal velocity for CFL condition instead 
# of the default condition: 
#   u dt < dx  u=(ubase + g drho dt)  
#   (ubase*dt+g drho dt^2) = dx   
#   g drho dt^2 + ubase dt - dx =0 
#   dt=(-ubase + sqrt(ubase^2 + 4 g drho dx))/(2 g drho) =
#      4 g drho dx/( 2 g drho (ubase+sqrt(ubase^2 + 4 g drho dx)))=
#      2 dx / (ubase+sqrt(ubase^2 + 4 g drho dx))=
#      sqrt(dx/(g drho)) if ubase=0
#      dx/ubase          if g=0
ns.terminal_velocity_dt=0
ns.min_velocity_for_dt=1.0e-16
ns.dt_max=1.0e+16
ns.use_lsa=0
# pick a surface tension so that dt~1E9
# k=2 pi/dxmin = 2 pi 128
# omega=k^(3/2)sqrt(tension/(den1+den2))
# wavespeed=omega/k
# see run2d/cap_wave_speed.f
ns.tension        = 0.0 
#ns.fixed_dt	  = 0.0025     # hardwire dt
ns.sum_interval   = 1        # timesteps between computing mass 
ns.usekluge       = 0

ns.axis_dir=0
ns.vorterr=0.0 0.0
ns.rgasinlet=1.57
ns.vinletgas=0.0
ns.twall=0.1
ns.advbot=0.0
ns.adv_vel=0.0
ns.adv_dir=2

ns.advection_order=1 1
ns.density_advection_order=1 1

# 1 Watt=10^7 ERG/S
# 1 W/(M K)=10^5 ERG/(S CM K)
# 1 ERG= 1 (gram cm^2/s^2)
# air: k=0.024 W/(M K)
# water: k=0.58 W/(M K)
ns.heatviscconst=0.0 0.0 0.0 0.0
ns.viscconst=0.5 50.0 0.0 0.0
#ns.viscconst=1.0 100.0 0.0 0.0
ns.pressure_error_cutoff=0.0 0.0 0.0 0.0
#ns.denconst=1.0 1.0 # Boussinesq
ns.denconst=1.0 1.1 # no Boussinesq
#ns.denconst_gravity=1.0 1.1  # Boussinesq
ns.denconst_gravity=1.0 1.0   # no Boussinesq
ns.stokes_flow=0
ns.tempconst=293.0 293.0 293.0 293.0
ns.include_viscous_heating=0
ns.constant_viscosity=1
# shock_timestep=2 2 option => never consider sound speed.
ns.shock_timestep=2 2  # 2 2 INCOMP; 2 2 if COMPRESSIBLE (shrink=0.1)
ns.material_type=0 0   # 0 0 if INCOMP;  13 14 if COMPRESSIBLE
ns.FSI_flag=0 5
ns.xblob=0.0
ns.yblob=0.6
ns.zblob=0.0
ns.radblob=0.25
ns.denfact=1.0
ns.velfact=0.0
ns.probtype=534

proj.bogus_value = 5.0e+5
proj.Pcode = 0
#proj.Pcode = 2

#ns.mem_debug = 1
ns.v = 1
ns.output_drop_distribution=1
#ns.d = 1

# ----------------  PROBLEM DEPENDENT INPUTS
ns.lo_bc          = 3 5
ns.hi_bc          = 5 5

# >>>>>>>>>>>>>  BC FLAGS <<<<<<<<<<<<<<<<
# 0 = Interior           3 = Symmetry
# 1 = Inflow             4 = SlipWall
# 2 = Outflow            5 = NoSlipWall

# turn any of these on to generate run-time timing stats

#fab.initval=0.0
#fab.do_initval=1

# select single or double precision of FAB output data
#        default is whatever precision code is compiled with.
#fab.precision = FLOAT     # output in FLOAT or DOUBLE
fab.precision = DOUBLE    # output in FLOAT or DOUBLE

