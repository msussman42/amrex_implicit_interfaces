# For more information check
# NASA_CRYOGENICS_GITHUB => references/Verification_tests/MK_tank/CRYOGENIC_TANK_MK.xlsx
# ----------------------------------------------------------
# -------- Problem setup -----------------------------------
# ----------------------------------------------------------
#max_step=200
max_step=99999999
stop_time=1.0e+20

# unique problem identifier associated with each new plug-in:
ns.probtype         = 423
# variable accessible from plug-in:
ns.axis_dir         = 0

# 1=liquid 2=gas(placeholder) 3=solid wall
ns.num_materials    = 3
# vapor
ns.num_species_var  = 1

# Material type:
# 0  => incompressible
# 24 => compressible 
# ([EOS/SOUNDSQR/INTERNAL/TEMPERATURE]_CRYOGENIC_TANK1 called from
# PROB.F90 and declared in CRYOGENIC_TANK1.F90)
ns.material_type = 0 0 999 
ns.material_type_evap = 0 24 999
ns.material_type_lowmach = 0 24 999
ns.material_type_visual = 0 24 999

#u_t + div(uu) = -grad p/rho + div tau/rho
#if face_flag=0, then div(uu), div tau/rho are CC, grad p/rho MAC
#if face_flag=1, then div(uu and grad p/rho are MAC, div tau/rho is CC
ns.face_flag=1
# remark: Lax Friedrichs method:
#   u_{i+1/2}^{n}=(u_i^{n} + u_{i+1}^{n})/2
#   u_{i+1/2}^{n+1}=u_{i+1/2}^{n}-dt/dx  (f_{i+1}^{n}-f_{i}^{n})
#   u_{i}^{n+1}=(u_{i+1/2}^{n+1} + u_{i-1/2}^{n+1})/2
# if filter_velocity=1 =>
#   (a) if face_flag=1,
#      before div tau/rho force, let u_CC=interp_to_CC(u_MAC)
#      then after div tau/rho force, let u_MAC=interp_to_MAC(u_CC)
#   (b) if face_flag=0,
#      before grad p/rho force, let u_MAC=interp_to_MAC(u_CC)
#      then after grad/rho force, let u_CC=interp_to_CC(u_MAC)
ns.filter_velocity=0 0 0  # 1..num_materials
ns.num_divu_outer_sweeps=1

# Solid defifnition for FSI
# 1 => By levelset definition in PROB.F90 (and module file)
ns.FSI_flag         = 0 0 1

# currently: only one tank allowed in the domain.
solvability_projection = 1 # sealed

# these variables will be available to plug-ins:
# Coordinate origin is at the center of the tank
ns.xblob            = 0.1016 # Tank cavity radius NOT ALIGNED
#ns.xblob            = 0.09525 # Tank cavity radius ALIGNED
ns.yblob            = 0.4064 # Height of Cylindrical part NOT ALIGNED
#ns.yblob            = 0.396875 # Height of Cylindrical part ALIGNED
ns.zblob            = 0.0    # Interface location 
ns.radblob          = 0.0    # Not used

ns.xblob4 	    = 0.2159 # End cap radius NOT ALIGNED
#ns.xblob4 	    = 0.0 # End cap radius ALIGNED

ns.yblob4	    = 0.0127 # X_2 of spherical cap center 

ns.zblob3	    = -0.1429 # X_2 of heater top 
ns.yblob3	    = -0.1683 # X_2 of heater bottom
#n_cell=16 64
# 0 < r < 0.127
# 0.09525 - (1/2) 0.127/16 = 0.09128125
ns.radblob3         = 0.09128125  # r_end of location of heater filament
ns.radblob4         = 0.09128125  # r_start of heater filament

# ----------------------------------------------------------
# -------- Domain and space/time discretization ------------
# ----------------------------------------------------------
# 0 => cart (XY or XYZ), 1 => RZ
# n_cell=16x64       
geometry.coord_sys  = 1
geometry.prob_lo    = 0.0   -0.254
geometry.prob_hi    = 0.127  0.254
geometry.is_periodic= 0 0

# dx_coarse=(prob_hi_x-prob_lo_x)/n_cell_x
# dy_coarse=(prob_hi_y-prob_lo_y)/n_cell_y
# best to have dx=dy for now.
amr.n_cell          = 16 64 
# just 1 level:
amr.max_level       = 0

amr.regrid_int      = 1     # How often to regrid
amr.max_grid_size   = 64

# Note: (max_level+1) values needed
amr.n_error_buf     = 4 4  # number of buffer cells in error est 
amr.blocking_factor = 8 8  # block factor in grid generation

amr.grid_eff        = 0.55  # smaller => less boxes

ns.vorterr	    = 0.0 0.0 0.0 # vorticity limit for grid refinement

# Adaptive dt
ns.cfl              = 0.5      # cfl number for hyperbolic system
ns.init_shrink      = 1.0      # scale back initial timestep
ns.change_max       = 1.1      
ns.dt_cutoff        = 1.0e-10  # level 0 timestep below which we halt

#0=only at t=0 1=always account for sound speed 2=ignore
ns.shock_timestep=2 2 2 

#ns.fixed_dt	    = 5.0e-5   # Hardwire dt

# ----------------------------------------------------------
# -------- Input/output (IO) -------------------------------
# ----------------------------------------------------------
# output file -2=> tecplot -1=> plot files (visit or paraview)
ns.visual_option    =-2
#ns.visual_buoyancy_plot_int=2000

amr.check_int       = 2000     # number of timesteps between checkpoints
amr.check_file      = chk     # root name of checkpoint file

ns.slice_dir=1 # y (aka z) direction
# 2 * 0.0635=.127
ns.xslice=0.0635 0.127
amr.slice_int=2000
amr.plot_int        = 2000   # number of timesteps between plot files
amr.plot_file       = plt     # root name of HDF5 plot file

ns.sum_interval     = 1     # timesteps between computing mass 

amr.grid_log        = grdlog  # name of grid logging file

amr.file_name_digits= 7

# make ns.v=1 to check the residual magnitude information for the solvers.
ns.v=0
#amr.restart        = chk00400 # Name of the restart checkpoint file
#amr.trace   	    = 1
#ns.show_mem        = 1

# ----------------------------------------------------------
# -------- Inputs to physics class -------------------------
# ----------------------------------------------------------
ns.gravity          = 9.8
ns.gravity_dir      = 2 # 1..SDIM
ns.invert_gravity   = 0  # invert_gravity=0 means gravity points down.
ns.gravity_potential_form=1
#override_density=0 if compressible material
#if incompressible material:
# override_density=0 => rho independent of T or Z
# override_density=1 => rho=rho(T,Z)  in the grad p/rho and div tau/rho
#  force terms.
# override_density=2 => has not been tested in a while 
#   (Boussinesq approximation)
#   rho independent of T or Z, but the gravity force is modified.
ns.override_density=1 1 0  # 1..num_materials
# rhohydro+fort_denconst(im)*DrhoDT(im)*(T-fort_tempconst(im))
ns.DrhoDT = -0.0007 -0.0034 0.0   # units: 1/degree K

ns.twall            = 0.0
ns.rgasinlet        = 0.0
ns.vinletgas        = 0.0
ns.advbot           = 0.0
ns.adv_vel          = 0.0
ns.adv_dir          = 1
ns.denfact          = 1.0
ns.velfact          = 0.0
ns.visc_coef        = 1.0

# ----------------------------------------------------------
# -------- Material properties -----------------------------
# ----------------------------------------------------------
# 3 materials
# 1=liquid HFE7000  2=gaseous HFE7000  3=solid acrylic
# 1 species variable => equal to 1 everywhere

# Assuming saturation condition initially

# Universal gas constant R = 8.31446261815324 [J/(Mol.K)]

# Molar mass [kg/mol]
# Acrylic ??? (Not used)
ns.molar_mass = 0.2 0.2 1  # 1..num_materials
ns.species_molar_mass=0.2  # molar mass for vapor should identical to liquid
                           # molar mass.

# Density [kg/m^3]
ns.denconst= 1400 5.3421449445 1190
ns.speciesconst= 1.0 1.0 1.0  #Kassemi

# Diffusion coefficient [m^2/s]
# Not used ???
# liquid, vapor, solid
ns.speciesviscconst = 0.0 9.5393525975504E-07 0.0

# 1. input to the Schrage velocity model: Temperature, gas mixture density,
#    mass fraction, liquid density
# 2. input to the expansion model: Delta F * (liquid density/vapor density)
#    It is assume that Y_{Interface}=1.
# Not used ???

# Specific heat capacity [J/(kg.K)]
ns.stiffCP=1300 2400.0          1500
ns.stiffCV=1300 2358.4276869092 1500  #CV used CRYOGENIC_TANK_MK to get CP

# Thermal conductivity [W/(m.K)]
ns.heatviscconst=0.075 0.00375 0.189

# Dynamic viscosity [Pa.s]
ns.viscconst=4.48E-04 1.00E-06 1.0

# Initial temeparture [K]
ns.tempconst=295.41 295.41 295.41

# Surface tension [N/m]
ns.tension=0.0 0.0 0.0
#ns.tension=2.0E-03 2.0E-03 2.0E-03

# ----------------------------------------------------------
# -------- Phase change model ------------------------------
# ----------------------------------------------------------
# latent_heat [Joule/kg]
# <0 if condensation or solidification
# >0 if boiling or melting
# 12 13 23 21 31 32
# 12 liquid->vapor (boiling)
# 21 vapor->liquid (condensation)
ns.latent_heat=1.42E+05 0.0 0.0 0.0 0.0 0.0

# distribution of the expansion term
# For evaporation and Boiling, this should always be 0.
ns.distribute_from_target= 0 0 0 0 0 0
ns.distribute_mdot_evenly = 0 0 0 0 0 0 # 2 * num_interfaces components
# density in the ambient gas will increase in a sealed tank.
ns.constant_density_all_time=1 0 1 # sealed 1..nmat
# constant_volume_mdot=0 in an open container
# constant_volume_mdot=-1 => redistribute -sum mdot evenly into the destination
#  material.
# constant_volume_mdot=1 => redistribute -sum mdot evenly into the source
#  material.
ns.constant_volume_mdot=-1 0 0 0 0 0 # sealed 1..2 nten

# MK model (evaporation only) 
ns.mass_fraction_id =   1 0 0 0 0 0 # material 1 (liquid) is turned into spec 1
# freezing_model==0 => Energy jump model, no species
# freezing_model==6 => Either Villegas etal/Palmore Desjardins model with
#  species for evaporation/condensation or 
#  Kassemi hybrid energy jump+Schrage model.
ns.freezing_model=      6 0 0 0 0 0
# Tanasawa_or_Schrage_or_Kassemi=0 => Villegas etal/Palmore Desjardins
# Tanasawa_or_Schrage_or_Kassemi=3 => Kassemi
ns.Tanasawa_or_Schrage_or_Kassemi= 3 0 0 0 0 0

# The phase-change saturation temperature and pressure are calculated
# from Clausiusâ€“Clapeyron relation. The "reference" temprature and
# pressure are given below.
ns.saturation_temp=307 0.0 0.0 0.0 0.0 0.0
ns.saturation_temp_min=273 0.0 0.0 0.0 0.0 0.0
ns.reference_pressure=101325 0.0 0.0 0.0 0.0 0.0
ns.accommodation_coefficient=1.0 0.0 0.0 0.0 0.0 0.0
# Universal gas constant:
ns.R_Palmore_Desjardins=8.3144626182 # J/(mol Kelvin)

# ----------------------------------------------------------
# -------- Initial and boundary conditions (IC/BC) ---------
# ----------------------------------------------------------
# 0 = Interior           3 = Symmetry
# 1 = Inflow             4 = SlipWall
# 2 = Outflow            5 = NoSlipWall
# 0=dirichlet at inflow (default)
# 1=dirichlet at inflow and outflow
# 2=dirichlet at inflow and walls.
# 3=dirichlet at inflow, outflow, and walls.
ns.prescribe_temperature_outflow=0

ns.lo_bc          = 3 3
ns.hi_bc          = 3 3
ns.temperature_lo_bc = 3 3
ns.temperature_hi_bc = 3 3


# 0=use LS (since GFM must be used at interfaces changing phase)
# 1=use VOF
ns.temperatureface_flag=0
ns.compressible_dt_factor=2.0 2.0 2.0
# temperature_primitive_variable=0:
#   (rho E)_{t} + div (rho u E) = -div( up )  (energy advection)
#   rho_t + div (rho u) =0
#   E=1/2  u dot u + e  e=e(T)
# temperature_primitive_variable=1:
#   (rho T)_{t} + div (rho u T) = -p div u  (energy advection)
#   rho_t + u dot grad rho = -rho div u
ns.temperature_primitive_variable=1 1 1

# Embedded boundary BC
# 0=diffuse in solid 1=dirichlet 2=neumann
ns.solidheat_flag   =0

# Heat flux from band heater
#ns.xblob3 = 61.6726637934 # -q dot n=Watts/m^2
ns.xblob3 = 61.6726637934 # -q dot n=Watts/m^2

# ----------------------------------------------------------
# -------- Reconstruction -----------------------------------
# ----------------------------------------------------------
ns.continuous_mof   = 2 # 0=MOF 2=CMOF

#-1=Weymouth Yue, 0=Sussman and Puckett algorithm 
# 1=EILE (default), 2=always EI, 3=always LE
ns.EILE_flag        = -1

ns.MOFITERMAX       = 15

ns.truncate_thickness=2.0

# ----------------------------------------------------------
# -------- Advection ---------------------------------------
# ----------------------------------------------------------
ns.advection_order  = 2 2 1

# 0=no limiter,  1=minmod
# 2=minmod with slope=0 at interface 
# 3=no limiter with slope=0 at interface
ns.slope_limiter_option = 2

# ----------------------------------------------------------
# -------- Projection --------------------------------------
# ----------------------------------------------------------
ns.projection_pressure_scale=1.0
ns.minimum_relative_error=1.0e-18
ns.initial_cg_cycles=10
ns.initial_project_cycles=3
ns.initial_viscosity_cycles=1
ns.initial_thermal_cycles=1
ns.project_solver_type=0 # 0MGPCG 1PCG 2 MINV=I

# 0=GSRB 1=ICRB 2=ILU 3=Jackobi
Lp.smooth_type       = 2
Lp.bottom_smooth_type= 2

# ----------------------------------------------------------
# -------- Other inputs ------------------------------------
# ----------------------------------------------------------
# multigrid class (set to 2 for maximum verbosity)
mg.verbose = 0
cg.verbose = 0

mg.nu_f = 40
mg.nu_0 = 1   # 1 - v-cycle 2 - w-cycle
cg.maxiter = 9000
mg.bot_atol = 1.0e-12
mg.rtol_b = -0.01
Lp.v = 1

mac.mac_tol=1.0e-10
mac.mac_abs_tol    = 1.0e-10

ns.use_lsa=0

ns.pressure_error_cutoff=0.0 0.0 0.0

# turn any of these on to generate run-time timing stats
RunStats.statvar = godunov_box level_project sync_project

# select single or double precision of FAB output data
#        default is whatever precision code is compiled with.
#fab.precision = FLOAT     # output in FLOAT or DOUBLE
fab.precision = DOUBLE    # output in FLOAT or DOUBLE
