#Hao, Lv, Zhang 2014 Applied Physics Letters
#for future reference see:
#Hao Zeng, Sijia Lyu, Dominique Legendre, Chao Sun, 
# Physical Review Fluids, 2022
#6 microliter water drop=6E-3 cm^3 
#ambient air: 293 Kelvin
#substrate: 265 Kelvin
#68 degree contact angle
#Hui Hu and Zheyan Jin, IJMF 2010
#radius: 400 microns, height: 250 microns
#Pr=Cpl mul/kl=4.22e7 * 1.79e-2 / .516e+5 = 14.639
#theta=TSAT+(T-TSAT)/(TSAT-TCOLD)=273.0 + (T-273.0)/(273-263)
#St=Cpl (Tm - Tc)/Lh=4.22e7 (10.0)/3.334e9=0.1266
#see effective_radius.f
#R=wetting radius=2mm
#Bo=rhoL g R^2 / sigma = 1.0 (980) R^2/72.8=0.5385
#Re=rhoL U R/mu_L=(1.0)(0.006)(.2cm)/(1.79e-2)=0.067
#We=rhoL U^2 R/sigma=(1)(0.006^2)(.2 cm)/72.8=9.93e-8
#TRY We=1/100
#Du/Dt = -grad p/rho + (1/Re)div(2 mu D) +
#  (1/We)sigma kappa grad H/rho+(Bo/We)*g
#(rho cp theta)_t+div(rho cp u theta)=(1/(Pr Re))div k grad theta
#summary:
#1. liquid density=1  rho_gl=rho_g/rho_L 
#2. liquid viscosity=1  mu_gl=mu_g/mu_L
#3. liquid cp =1  cpgl=cpg/cpl
#4. Latent heat=1/StefanNum
#5. liquid k=1  k_gl=kg/kl
#6. substrate supercool=-1
#7. wetting radius=1
#8. modify We so that capillary wave speeds comparable to freezing speed.
#9. modify Re so that explicity viscosity stability constraint is comparable
#   to the surface tension stability constraint.
#capillary wave speed: sqrt( n(n-1)(n+2) surface_tension/(rho R) )
#n=32  capillary wave speed=3503.85 cm/s
#U=3503.85 cm/s or choose U such that We=1:
#rhoL U^2 R/sigma=1  U=sqrt( sigma/(R rhoL) )=19.08 cm/s
#tau_c=rhoL C_{pL} R^2 /kL=(1)(4.22e+7)(.2^2)/(.516e+5)=32.71
#U=R/tau_c=0.2/32.71=0.006 cm/s
max_step  =  9999999    # maximum timestep

stop_time = 70.0
#stop_time=5.0 # if using "physical" latent heat.

# ------------------  INPUTS TO CLASS AMR ---------------------
# set up for bubble
geometry.coord_sys      = 1        # 0 => cart, 1 => RZ
geometry.prob_lo = 0.0  0.0
#geometry.prob_hi = 0.24 0.24  # centimeters
geometry.prob_hi = 1.2 1.2  # NONDIM
ns.slice_dir=1
ns.xslice=0.0 0.0
ns.EILE_flag=-1

ns.minimum_relative_error=1.0e-22
ns.initial_project_cycles=5
ns.initial_cg_cycles=10
ns.project_solver_type=0 # 0MGPCG 1PCG 2 MINV=I
#ns.projection_pressure_scale=1.0e-2
ns.projection_pressure_scale=1.0 #NONDIM
ns.num_materials=4 # 1: liquid 2: air 3: ice 4: solid

ns.num_species_var=0

ns.post_init_pressure_solve=1 
ns.MOFITERMAX=30
ns.MOF_TURN_OFF_LS=0
ns.MOF_DEBUG_RECON=0
ns.continuous_mof=1
ns.vof_height_function=1
ns.mof_decision_tree_learning=0
ns.MOFITERMAX_AFTER_PREDICT=0
# 0 - centroid furthest from uncaptured centroid
# 1 - use MOF error
ns.mof_error_ordering=0
# water,air,ice,solid
ns.mof_ordering=3 4 2 1

# multigrid class
mg.verbose = 0
cg.verbose = 0
# set above to 2 for maximum verbosity
mg.nu_f = 40
mg.nu_0 = 1   # 1 - v-cycle 2 - w-cycle

ns.multilevel_maxcycle=200
ns.multilevel_restart_period=25
cg.restart_period=25
cg.maxiter = 200
mg.bot_atol = 1.0e-14
mg.rtol_b = -0.01
Lp.v = 0

amr.plotfile_on_restart=1
#ns.visual_revolve=32

amr.n_cell=64 64
amr.max_level = 0
# water, gas, ice, substrate
amr.regrid_int      = 1       # how often to regrid
amr.n_error_buf     = 4 4 4 4 # number of buffer cells in error est
amr.grid_eff        = 0.8     # what constitutes an efficient grid
ns.ns_tiling=false
amr.blocking_factor = 8 8 8 8  # block factor in grid generation
amr.check_int       = 500
#amr.check_int       = 10000  # static freezing test 10 
amr.check_file      = chk     # root name of checkpoint file
amr.plot_int        = 500
#amr.plot_int        = 500 # static freezing test 10
amr.plot_file       = plt 
amr.grid_log        = grdlog  # name of grid logging file
amr.max_grid_size   = 1024
amr.file_name_digits=8
#amr.restart         = chk0027800
#amr.trace   =1

# ------------------  INPUTS TO PHYSICS CLASS -------------------
ns.dt_cutoff      = 1.0e-11  # level 0 timestep below which we halt

mac.mac_abs_tol    = 1.0e-13

ns.cfl            = 0.5      # cfl number for hyperbolic system
ns.init_shrink    = 1.0      # scale back initial timestep
ns.change_max     = 1.01 
#ns.visc_coef      = 1.0  #(1/Re)
ns.visc_coef      = 14.93  #(1/Re) (NONDIM)
ns.heatvisc_coef=1.0     # (1/(Pr Re)
ns.explicit_viscosity_dt=1.0
mac.visc_abs_tol  = 1.0e-10
#ns.gravity        = 0.0 # thermal effects only
#ns.gravity        = -981.0e-5
ns.gravity        = -0.5385e+2 #NONDIM
ns.incremental_gravity_flag=0
ns.invert_gravity=1

# 12,13,14,23,24,34
# LG,LI,LS,IG,GS,SI  
#initial theta_liquid (CL_tensions_from_angles.f):
# sigma_{SG}-sigma_{SL}=sigma_{LG}cos(theta_L_initial)
#    let sigma_{SG}=sigma_{LG} =>
# 1-sigma_{SL}/sigma_{LG}=cos(theta_L_initial)
# sigma_SL = sigma_LG * (1-cos(theta_L))=75.7e-5 * (1-cos(68))=47.3e-5
# sigma_SL = sigma_LG * (1-cos(theta_L))=72.8e-5 * (1-cos(76))=55.19e-5
#
#contact line: theta_L_initial=68 degrees
# LG,LI,LS,IG,GS,SI  (SI used)
#thermal effects only
#surface tension algorithm treats liquid and ice as just one liquid:
#Lyu, S., Wang, K., Zhang, Z., Pedrono, A., Sun, C., & 
#Legendre, D. (2021). A hybrid VOF-IBM method for the simulation of 
#freezing liquid films and freezing drops. Journal of Computational 
#Physics, 432, 110160.
#ns.tension=      75.7e-5 0.0 36.75e-5 0.0 75.7e-5 0.0 #theta_L=90
#ns.tension_init= 75.7e-5 0.0 36.75e-5 0.0 75.7e-5 0.0
# TRIPLE POINT LIQUID-GAS-ICE 
# sigma_{IG}-sigma_{IL}=sigma_{LG}cos(theta_L)
# LG,LI,LS,IG,GS,SI  
#ns.tension=      75.7e-5 75.7e-5 36.75e-5 75.7e-5 75.7e-5 0.0 #theta_L=90
#ns.tension_init= 75.7e-5 75.7e-5 36.75e-5 75.7e-5 75.7e-5 0.0
ns.radblob9=0.5
#72.8 cos_theta_L=72.8-x
#x=72.8*(1-cos(50 deg))=26.0
#ns.tension=      72.8 26.0 26.0 72.8 72.8 0.0 
#ns.tension_init= 72.8 26.0 26.0 72.8 72.8 0.0
ns.tension=      100.0 35.7 35.7 100.0 100.0 0.0 
ns.tension_init= 100.0 35.7 35.7 100.0 100.0 0.0 

#sigma_IL+sigma_LG cos(50)=sigma_IG  sigma_IG=sigma_LG
#sigma_IL=sigma_LG(1-cos(50))=27.0
#sigma_IL=sigma_LG(1-cos(45))=22.2
#sigma_IL=sigma_LG(1-cos(55))=32.3
#ns.tension=      72.8e-5 26.0e-5 26.0e-5 72.8e-5 72.8e-5 0.0 #theta_L=50
#ns.tension_init= 72.8e-5 26.0e-5 26.0e-5 72.8e-5 72.8e-5 0.0

#sigma_IL+sigma_LG cos(135)=sigma_IG  sigma_IL=sigma_LG
#sigma_LG(1+cos(135))=sigma_IG=22.2
#ns.tension=      75.7e-5 75.7e-5 36.75e-5 22.2e-5 75.7e-5 0.0 #theta_L=135
#ns.tension_init= 75.7e-5 75.7e-5 36.75e-5 22.2e-5 75.7e-5 0.0


# 1 J/kg = 10^4 erg/g
# specific heat of glass: 0.84E+3 J/(kg K)
# specific heat of water: 4.186E+3 J/(kg K)
# specific heat of ice: 2.05E+3 J/(kg K)
# material 1=liquid 2=gas  3=ice 4=solid  
# Cp_s/Cp_l=0.48
# Pr=Cp_l mu_l/k_l=4.2e+3 * 1.7e-3 / 0.55 = 13.0
# DEFAULT: stiffCV = stiffCP
#ns.stiffCP = 4.22e+7 1.039e+7 2.050e+7 0.39e+7  # dimensional erg/(g K)
ns.stiffCP = 1.0 0.2462 0.4858 0.0924  # NONDIM
# units of latent_heat: 1 J/kg=10^7 erg/(1000 g)=10^4 erg/g
# L=334 J/g=3.34E+9 erg/g=334 J/(kg/1000)=3.34E+5 J/kg
# <0 if condensation or solidification
# >0 if boiling or melting
# latent_heat[2*max_num_tension]
#12 13 14 23 24 34 then reverse
# dimensional J/kg:
# St=Cp_l(T_m - T_c)/L=4.2e+3 * 2/3.34e+5 = 0.025
#ns.latent_heat = 0.0 -3.334e+9 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 
ns.latent_heat = 0.0 -7.8989 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0  #NONDIM
#ns.latent_heat = 0.0 -65.0e+9 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 
#default: Stefan model
ns.freezing_model = 0 0 0 0 0 0 0 0 0 0 0 0 
# 1->2 liquid-> gas
# 1->3 liquid->ice 
# ....
#12 13 14 23 24 34 then reverse
ns.saturation_temp = 0.0 273.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0
# 
#ns.fixed_dt	  = 0.01     # hardwire dt
ns.sum_interval   = 5        # timesteps between computing mass 

# initial droplet with small layer of ice at its bottom, on a solid substrate.
# probtype=55 (GENERAL_PHASE_CHANGE.F90)
ns.axis_dir=5   
ns.vorterr=0.0 0.0 0.0 0.0
ns.rgasinlet=1.57
ns.vinletgas=0.0
ns.twall=272  # not used
ns.advbot=0.0  # initial falling (downward) speed of liquid drop if axis_dir=1
ns.adv_vel=0.0 # keep 0.0
ns.adv_dir=1 # adv_dir=1 x direction  adv_dir=2 y direction   
ns.pressure_error_cutoff=0.0 0.0 0.0 0.0
# material 1=liquid 2=gas  3=ice 4=solid
ns.material_type=0 0 0 999
# Latent heat: 1 J/kg = 10^7 erg/kg=10^4 erg/g
# 1 Watt=10^7 ERG/S
# 1 W/(M K)=10^5 ERG/(S CM K)
# 1 ERG= 1 (gram cm^2/s^2)
# air: k=0.024 W/(M K)
# water: k=0.58 W/(M K)
# MKS: cp=4.1855 J/((kg/1000)K)=4.1855E+3 J/(kg K)
# k_s/k_l=2.2/0.55=4.0
#ns.heatviscconst=0.516e+5 0.02421e+5 2.22e+5 2.22e+5 # erg/(s cm K) #thermal diffusivity
ns.heatviscconst=1.0 0.0469 4.302 4.302 # erg/(s cm K) #thermal diffusivity
# 12 13 14 23 24 34  
ns.heatviscconst_interface=0.0 0.0 0.0 0.0 1.0e-10  4.302
# 1 Pa = 10 CGS
#ns.viscconst=1.79e-2 1.724e-4 10000.0 10000.0 # derive CGS:  CGS= Pa s x 10
#ns.viscconst=1.79e-2 1.724e-4 2.0e-2 2.0e-2 # derive CGS:  CGS= Pa s x 10
ns.viscconst=1.0 0.0096 1.0 1.0 # derive CGS:  CGS= Pa s x 10
#ns.uncoupled_viscosity=1
#ns.denconst=1.0 0.00129 1.0 10.0 #thermal effects only
#ns.denconst=1.0 0.001292 0.917 10.0 #physical values of denconst
#ns.denconst=1.0 0.001292 0.917 10.0
ns.denconst=1.0 0.01292 0.917 10.0
ns.FSI_flag=0 0 9 1 #FSI_ICE_STATIC=9 FSI_PRESCRIBED_PROBF90=1
ns.recalesce_flag=0 0 0 0
# solidheat_flag=0=>diffuse in solid 
# solidheat_flag=1=>dirichlet  (must have heatvisc(im_solid)>0)
# solidheat_flag=2=>neumann
ns.solidheat_flag=1
#instead of T=271.0 (-2 test plate), try -3,-4,-5,-6, -73
#pendant drop experiment: T_substrate=263.0
#ns.tempconst=          273.0 293.0 273.0 200.0
#ns.initial_temperature=273.0 293.0 273.0 200.0
ns.tempconst=          273.0 275.0 273.0 272.0
ns.initial_temperature=273.0 275.0 273.0 272.0
#ns.xblob3=298.0 #force ambient temperature condition on all walls except the
                #bottom wall (axis_dir=5)
ns.xblob=0.0  # center of water drop
# dxcoarse=0.4/64
#ns.yblob=0.01875 #4*dxcoarse=3.125e-3 #align w/ grid
ns.yblob=0.09375 #4*dxcoarse=3.125e-3 #align w/ grid
ns.zblob=0.0
ns.xblob2=0.0 # center of surface of cold plate (xblob2,yblob2) (inclined)  
#ns.yblob2=0.01875 #dxcoarse=0.4/64  4*dxcoarse=0.1/32=0.003125
ns.yblob2=0.09375 #dxcoarse=0.4/64  4*dxcoarse=0.1/32=0.003125
ns.zblob2=0.0
ns.radblob2=0.0 # zero degrees incline (radians)
# thickness of underside of droplet that is already frozen
#ns.radblob3=0.009375 #dimensionless 2*dxcoarse=2(0.3/64)=0.009375
ns.radblob3=0.046875 #dimensionless 2*dxcoarse=2(0.3/64)=0.009375
# effective radius of water/ice drop: volume=(1/2)  (4/3)pi r^3=
# (1/2) (4/3) pi (0.15631)^3=0.007999
# (1/2) (4/3) pi (0.142)^3=0.006
#ns.zblob4=0.00625
#transitional substrate temperature
ns.zblob4=0.0 #substrate temperature=wall temperature(atylo)
#Hui Hu and Zheyan Jin, IJMF 2010
#radius: 400 microns, height: 250 microns
#radblob=effective hemispherical radius scaled by wetting radius
#see effective_radius.f
#8.5 microliters=8.5e-6 liters=8.5e-3 cm^3
#1 liter=1000cm^3
#ns.radblob=0.15631 # centimeters
#ns.radblob=0.2 # centimeters
ns.radblob=0.724 # centimeters (.160/.221)
ns.denfact=1.0
ns.velfact=0.0
ns.probtype=55

#ns.mem_debug = 1
#ns.v = 2
ns.output_drop_distribution=1
#ns.show_mem=1
#ns.d = 1

# ----------------  PROBLEM DEPENDENT INPUTS
# boundary conditions 
# 0=dirichlet at inflow
# 1=dirichlet at inflow and outflow
# 2=dirichlet at inflow and walls.
# 3=dirichlet at inflow, outflow, and walls.
ns.prescribe_temperature_outflow=0
ns.lo_bc          = 3 2
ns.hi_bc          = 3 2
ns.temperature_lo_bc=3 1
ns.temperature_hi_bc=3 3
ns.viscosity_lo_bc=3 5
ns.viscosity_hi_bc=5 5

# >>>>>>>>>>>>>  BC FLAGS <<<<<<<<<<<<<<<<
# 0 = Interior           3 = Symmetry
# 1 = Inflow             4 = SlipWall
# 2 = Outflow            5 = NoSlipWall

# turn any of these on to generate run-time timing stats


# select single or double precision of FAB output data
#        default is whatever precision code is compiled with.
#fab.precision = FLOAT     # output in FLOAT or DOUBLE
fab.precision = DOUBLE    # output in FLOAT or DOUBLE

