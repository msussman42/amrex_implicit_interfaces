max_step  =  5401      # maximum timestep 
stop_time =  1.0     # maximum problem time
ns.FSI_flag=0 0 2 2 # 1=solid prescribed in PROB_[23]D.F90, 2=sci_clsvof.F90

# ------------------  INPUTS TO CLASS AMR ---------------------
# set up for bubble
geometry.coord_sys      = 1        # 0 => cart, 1 => RZ
geometry.prob_lo   =  0.0 0.0
# MARCO: 1.53 for live run, 0.34 for test
geometry.prob_hi   =   0.085  0.34 # units of cm
geometry.is_periodic = 0 0 0

# multigrid class
mg.verbose = 0
cg.verbose = 0
# set above to 2 for maximum verbosity
mg.nu_f = 40
mg.nu_0 = 1   # 1 - v-cycle 2 - w-cycle
cg.maxiter = 9000
mg.bot_atol = 1.0e-12  # the coarsest coarsening of level 0 in old version;
                       # level 0 in the new version.
mg.rtol_b = -0.01
Lp.smooth_type=2
Lp.v = 0
ns.minimum_relative_error=1.0e-18
ns.initial_cg_cycles=10  # number of MGPCG steps to do in order to get
                         # decent sized residual.
ns.initial_project_cycles=3  # number of initial jacobi iterations

ns.num_materials=4
ns.num_species_var=0

ns.wall_scale=0.0
ns.embedded_wall_scale=0.0

# sub-cycling velocity diffusion with no projection.

fab.do_initval=0  # default is 1


# MARCO: 64, 64, 576, max_level=0 for live runs. 
#        64 64, 128, max_level=0 for debugging
amr.n_cell    = 32 128
amr.max_level = 0

# 0- 1 level 1- 2 levels  2- 3 levels
amr.regrid_int      = 1       # how often to regrid
amr.n_error_buf     = 4 4 4 4 4 4 4 4 4   # number of buffer cells in error est
amr.grid_eff        = 0.8   # what constitutes an efficient grid
# above was .55 (smaller=> less boxes)
amr.blocking_factor = 4       # block factor in grid generation
amr.check_int       = 100      # number of timesteps between checkpoints
amr.check_file      = chk     # root name of checkpoint file
# MARCO: adjust plot_int for live runs
amr.plot_int        = 100
amr.plot_file       = plt 
#amr.grid_log        = grdlog  # name of grid logging file
# MARCO: 32 for live runs, 64 for debugging
amr.max_grid_size   = 64
#amr.restart         = chk02100
#amr.trace   =1
#DistributionMapping.strategy        = ROUNDROBIN
#DistributionMapping.strategy        = SFC

# ------------------  INPUTS TO PHYSICS CLASS -------------------
ns.dt_cutoff      = 4.0e-12 # level 0 timestep below which we halt
mac.mac_tol        = 1.0e-10
mac.mac_abs_tol    = 1.0e-10

ns.cfl            = 0.25      # cfl number for hyperbolic system
ns.init_shrink    = 0.1      # scale back initial timestep
ns.change_max     = 1.025      # scale back initial timestep
ns.visc_coef      = 1.0
mac.visc_abs_tol   = 1.0e-7
ns.gravity        = 0.0  
ns.tension        = 24.0 24.0 24.0 24.0 24.0 24.0 #cgs contact angle=90 degrees
ns.shock_timestep=0 0 0 0     # 0=use "c" at t=0, 1=always use "c", 2=never
#ns.fixed_dt	  = 2.0e-8   # hardwire dt
#ns.sum_interval   = 10      # timesteps between computing mass 

ns.vorterr=0.0 0.0 0.0 0.0
ns.rgasinlet=1.57
ns.vinletgas=0.0
ns.twall=0.1

ns.axis_dir=2  # 0=no nozzle  1=nozzle (BC=1)  2=nozzle+pressure BC
ns.advbot=0   # inflow velocity at nozzle at the bottom (cm/s)
ns.outflow_pressure=2.0e+7
ns.inflow_pressure=1.50e+9
ns.adv_vel=0.0
ns.adv_dir=1
# MARCO
# material 1 is water (tait EOS), material 15 is dodecane
# (in this version, sound speed for dodecane might not be correct, so
# water is used instead)
ns.material_type=1 5 999 999          # material 5 is air
ns.tempconst=343. 303. 303. 303.        # nominal initial values
ns.viscconst=0.0147 0.000142 0.013 0.013 # g/(cm s)
# 1 Watt=10^7 ERG/S
# 1 W/(M K)=10^5 ERG/(S CM K)
# 1 ERG= 1 (gram cm^2/s^2)
# Thermal conductivity of air at 900 K and 6 MPa: k=0.06316 W/(M K)
#              of dodecane at 363 K and 106 MPa: k=0.157 W/(M K)
ns.heatviscconst=15700.0 6316.0 3000.0 3000.0
ns.denconst=0.709 0.0228 1.0 1.0

ns.pressure_error_cutoff=0.0 0.0 0.0 0.0

ns.xblob=0.0 # cm
ns.yblob=0.0
ns.zblob=0.0
ns.radblob=0.084  # external radius cm
ns.zblob2= 0.135   # height
ns.denfact=1.0
ns.velfact=0.0
ns.probtype=538
ns.v=1

#ns.ncoarseblocks = 4
#ns.xcoarseblocks = 0.      0.     -0.062 0.062
#ns.rxcoarseblocks = 0.085  0.085   0.020 0.020
#ns.ycoarseblocks = -0.062  0.062   0.    0.
#ns.rycoarseblocks = 0.020  0.020   0.085 0.085
#ns.zcoarseblocks = 0.25    0.25    0.25  0.25
#ns.rzcoarseblocks = 0.08   0.08    0.08  0.08

# ----------------  PROBLEM DEPENDENT INPUTS
ns.lo_bc          = 3 2
ns.hi_bc          = 2 2

# >>>>>>>>>>>>>  BC FLAGS <<<<<<<<<<<<<<<<
# 0 = Interior           3 = Symmetry
# 1 = Inflow             4 = SlipWall
# 2 = Outflow            5 = NoSlipWall

# turn any of these on to generate run-time timing stats


# select single or double precision of FAB output data
#        default is whatever precision code is compiled with.
#fab.precision = FLOAT     # output in FLOAT or DOUBLE
fab.precision = DOUBLE    # output in FLOAT or DOUBLE

