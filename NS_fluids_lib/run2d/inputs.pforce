max_step  =  999999   # maximum timestep
#stop_time =  60.0  # maximum problem time
stop_time =  57.0  # maximum problem time


ns.advection_order=2 1 # advection_order=2 in order to capture surface wave

ns.num_materials=2
ns.num_species_var=0

ns.FSI_flag=0 0
ns.minimum_relative_error=1.0e-18
ns.projection_pressure_scale=10000.0
ns.initial_project_cycles=10  # number of initial jacobi iterations
ns.initial_cg_cycles=10  # number of MGPCG steps to do in order to get
                         # decent sized residual.
# 0=GSRB 1=ICRB 2=ILU
Lp.smooth_type=2
Lp.bottom_smooth_type=2
ns.project_solver_type=0 # 0MGPCG 1PCG 2 MINV=I

# ------------------  INPUTS TO CLASS AMR ---------------------

geometry.coord_sys      = 0        # 0 => cart, 1 => RZ
geometry.prob_lo  =  0.0  0.0
geometry.prob_hi  =  100.0  100.0
geometry.is_periodic = 1 0 

ns.MOFITERMAX=15


# multigrid class
mg.verbose = 0
cg.verbose = 0
# set above to 2 for maximum verbosity
mg.nu_f = 40
mg.nu_0 = 1   # 1 - v-cycle 2 - w-cycle
cg.maxiter = 9000
mg.bot_atol = 1.0e-12
mg.rtol_b = -0.01
Lp.v = 0

ns.visual_option=-2  # -2,-3 zonal tecplot, -1 plt files for Visit

amr.n_cell    = 32 32 
amr.max_level =  0
# 0- 1 level 1- 2 levels  2- 3 levels
amr.regrid_int      = 1       # how often to regrid
amr.n_error_buf     = 4 4 4 4   # number of buffer cells in error est
amr.grid_eff        = 0.8   # what constitutes an efficient grid
# above was .55 (smaller=> less boxes)
amr.blocking_factor = 4       # block factor in grid generation
amr.check_int       = 100     # number of timesteps between checkpoints
amr.check_file      = chk     # root name of checkpoint file
#amr.plot_int        = 100    
amr.plot_int        = 2
amr.plot_file       = plt 
amr.grid_log        = grdlog  # name of grid logging file
amr.max_grid_size   = 32
#amr.restart         = chk01507
#amr.trace   =1

# ------------------  INPUTS TO PHYSICS CLASS -------------------
ns.dt_cutoff      = 1.0e-12  # level 0 timestep below which we halt

mac.mac_abs_tol    = 1.0e-10

ns.cfl            = 0.5      # cfl number for hyperbolic system
ns.init_shrink    = 0.1      
ns.change_max     = 1.1   
ns.visc_coef      = 0.0       
                             # Re=rho L U/mu  L=0.01  U=1
ns.gravity        = -980.0   
# We=rho L U^2/sigma
ns.tension        = 0.0 0.0  
ns.use_lsa=0
ns.capillary_artificial_viscosity=0.0 0.0 0.0
ns.Lref=0.0  # if Lref=0 then use dx
ns.Uref=0.0  # reduce capillary_artificial_viscosity until
             # cap_wave_speed>Uref, do nothing if Uref=0

ns.sum_interval   = 100      # timesteps between computing mass 

ns.axis_dir=0
ns.vorterr=999999.0
ns.rgasinlet=1.57
ns.twall=0.1
ns.advbot=0.0
ns.adv_vel=0.0     
ns.vinletgas=0.0
ns.adv_dir=1       # inflow in x direction (not used)
ns.material_type=0 0 
ns.tempconst=293.0 293.0 
ns.viscconst=0.0 0.0
ns.pressure_error_cutoff=0.0 0.0 0.0
ns.heatviscconst=0.0 0.0 0.0
# water on bottom, air on top
ns.denconst=1.0  0.001
ns.yblob2=1.0  # eta_1
ns.zblob2=0.0  # eta_2
# pforce=c1 * cos(kx-omega t) + c2 sin(kx-omega t)
# c1=-mu(t) * (eta_2 * rhow * |g| )
# c2= mu(t) * (eta_1 * rhow * |g| )
# omega=sqrt(gk tanh(kh))=15.69  c=w/k=62.4
# mu(t)=mu * f(t) * exp(omega_2 t)  omega_2 approx mu/2 * omega
# interface: eta=(eta1 cos(kx-omega t)+eta2 sin(kx-omega t))*exp(omega2 t)
ns.xblob=0.0
ns.xblob2=0.01  # mu, growth rate is approx exp((mu/2)*omega*t )
ns.xblob3=1.0   # startup time f(t)=1 t>xblob3
ns.xblob4=55.0  # cutoff time for pressure force (set to 0 to disable)
# k=2 pi/wavelen= 2 pi/25=0.2513
ns.yblob3=25.0  # wave length; x domain length should be integer multiple.
ns.yblob=50.0  # dist=yblob-y
ns.zblob=0.0
ns.radblob=0.0
ns.denfact=1.0
ns.velfact=0.0
ns.probtype=90

# ----------------  PROBLEM DEPENDENT INPUTS
ns.lo_bc          = 0 4 
ns.hi_bc          = 0 2
ns.v=1

# >>>>>>>>>>>>>  BC FLAGS <<<<<<<<<<<<<<<<
# 0 = Interior           3 = Symmetry
# 1 = Inflow             4 = SlipWall
# 2 = Outflow            5 = NoSlipWall

# turn any of these on to generate run-time timing stats


# select single or double precision of FAB output data
#        default is whatever precision code is compiled with.
#fab.precision = FLOAT     # output in FLOAT or DOUBLE
fab.precision = DOUBLE    # output in FLOAT or DOUBLE

