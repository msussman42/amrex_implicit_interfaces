# water (material 3) on top
# water (material 1) on bottom
# sigma=72.8
# rho=1 viscosity=0.01
# diameter=200 microns=2E-4 m=2E-2 cm=0.02 cm
# WE=rho D U^2 /sigma  D=diam  U=relative impact velocity
# RE=rho D U/mu
# RE^2/WE=rho D sigma/mu^2=(1)(0.02) 72.8/(0.01^2)=14560
# RE=sqrt(WE) * 120.7

max_step  =  99999    # maximum timestep
#max_step  =  2    # maximum timestep
stop_time =  300  # maximum problem time

# ------------------  INPUTS TO CLASS AMR ---------------------
# set up for bubble
geometry.coord_sys      = 1       # 0 => cart, 1 => RZ
geometry.prob_lo   =  0.0 -4.0
geometry.prob_hi   =  2.0 4.0  
geometry.is_periodic = 0 0 0     

# 0MGPCG 1PCG 2 MINV=I
ns.project_solver_type=0
Lp.smooth_type=2
Lp.bottom_smooth_type=2
Lp.gpucount=1

# multigrid class
#mg.verbose = 1
#cg.verbose = 1
# set above to 2 for maximum verbosity
mg.nu_f = 40
mg.nu_0 = 1   # 1 - v-cycle 2 - w-cycle
cg.maxiter = 200
mg.bot_atol = 1.0e-10
mg.rtol_b = -0.01
#Lp.v = 1

ns.num_materials=2
ns.num_species_var=0



ns.minimum_relative_error=1.0e-18
# scaling set so that initial pressure solve residual ~O(1)
ns.projection_pressure_scale=100.0
ns.initial_project_cycles=10  # number of initial jacobi iterations
ns.initial_cg_cycles=10  # number of MGPCG steps to do in order to get
                         # decent sized residual.
amr.n_cell    = 64 256 
amr.max_level = 2
# 0- 1 level 1- 2 levels  2- 3 levels
amr.regrid_int      = 1       # how often to regrid
amr.n_error_buf     = 4 4 4 4 4   # number of buffer cells in error est
amr.grid_eff        = 0.8   # what constitutes an efficient grid
# above was .55 (smaller=> less boxes)
amr.blocking_factor = 4       # block factor in grid generation
amr.check_int       = 500     # number of timesteps between checkpoints
amr.check_file      = chk     # root name of checkpoint file
amr.plot_int        = 100
amr.plot_file       = plt 
amr.grid_log        = grdlog  # name of grid logging file
amr.max_grid_size   = 64
#amr.restart         = chk00100
#amr.trace   =1

# ------------------  INPUTS TO PHYSICS CLASS -------------------
ns.dt_cutoff      = 0.000005  # level 0 timestep below which we halt

mac.mac_tol        = 1.0e-8  # tolerence for mac projections
mac.mac_abs_tol    = 1.0e-8

ns.visual_option=-2


ns.cfl            = 0.5      # cfl number for hyperbolic system
ns.init_shrink    = 1.0      # scale back initial timestep
ns.change_max     = 1.1    
# WE=15,25,60
# Re=467.5, 603.5, 934.9
# 1/Re=0.002, 0.0017, 0.0011
ns.visc_coef      = 0.0017
mac.visc_abs_tol   = 1.0e-8
ns.gravity        = 0.0
ns.use_lsa=1
# 12 (water-air), 13 (water-water), 23 (water-air)
# sigma_12=1/We  
# non-dim values: 72.8, 0.0, 72.8
# We=15.0, 25.0, 60.0
#ns.tension         = 0.0667  0.0  0.0667 # We=15.0
ns.tension         = 0.04  0.0  0.04 # We=25.0
#ns.tension         = 0.01667  0.0  0.01667 # We=60.0
#ns.fixed_dt	  = 0.0025     # hardwire dt
ns.sum_interval   = 5        # timesteps between computing mass 

ns.axis_dir=0
ns.vorterr=999999.0
ns.rgasinlet=1.57
ns.vinletgas=0.0
ns.twall=0.1
ns.advbot=0.0
ns.adv_vel=0.0
ns.adv_dir=1
ns.heatviscconst=0.0 0.0 0.0 0.0
# Re=467.5, 603.5, 934.9
# 1/Re=0.002, 0.0017, 0.0011
# physical values: water 0.01
ns.viscconst=1.0 0.01 1.0
ns.denconst=1.0 0.0012 1.0
ns.tempconst=293.0 293.0 293.0 
ns.material_type=0 0 0 
ns.pressure_error_cutoff=0.0 0.0 0.0 
ns.xblob=0.0
ns.yblob=0.0
ns.zblob=0.0  
ns.radblob=0.5
ns.denfact=1.0
ns.velfact=0.0
ns.probtype=18

proj.bogus_value = 5.0e+5
proj.Pcode = 0
#proj.Pcode = 2

#ns.mem_debug = 1
# DEBUG
#ns.v = 1
#ns.d = 1

# ----------------  PROBLEM DEPENDENT INPUTS
ns.lo_bc          = 3 5  # 4 4 4 XYZ 3 4 RZ
ns.hi_bc          = 5 5  # 4 4 4 XYZ 4 4 RZ

# >>>>>>>>>>>>>  BC FLAGS <<<<<<<<<<<<<<<<
# 0 = Interior           3 = Symmetry
# 1 = Inflow             4 = SlipWall
# 2 = Outflow            5 = NoSlipWall

# turn any of these on to generate run-time timing stats

fab.do_initval=1

# select single or double precision of FAB output data
#        default is whatever precision code is compiled with.
#fab.precision = FLOAT     # output in FLOAT or DOUBLE
fab.precision = DOUBLE    # output in FLOAT or DOUBLE

