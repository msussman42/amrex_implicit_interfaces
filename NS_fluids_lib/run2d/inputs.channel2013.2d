max_step  =  999999   # maximum timestep
stop_time =  999999  # maximum problem time

ns.num_materials=3
ns.num_species_var=0

ns.FSI_flag=0 0 1
ns.minimum_relative_error=1.0e-18
# for 2D:
#ns.projection_pressure_scale=100000.0
# for 3D:
#ns.projection_pressure_scale=1000.0
ns.projection_pressure_scale=100000.0
ns.initial_project_cycles=10  # number of initial jacobi iterations
ns.initial_cg_cycles=10  # number of MGPCG steps to do in order to get
                         # decent sized residual.
ns.project_solver_type=0 # 0MGPCG 1PCG 2 MINV=I

# ------------------  INPUTS TO CLASS AMR ---------------------
# L=1  l=L l^*
# channel cross section 97.5 microns wide by 85 microns high.
# 97.5 microns=97.5 x 10^-4 cm=0.975 E-2 cm=0.00975 cm
# 85 microns=0.0085 cm
# for 3D: 
# prob_lo= -0.03 0.0  0.0
# prob_hi=  0.09 0.06 0.0075
# for 2D:
# prob_lo= -0.03 0.0  
# prob_hi=  0.09 0.06 
geometry.coord_sys      = 0        # 0 => cart, 1 => RZ
geometry.prob_lo   =  -0.03 0.0 
geometry.prob_hi   =   0.09 0.06    # x=L x^* L=1 cm
geometry.is_periodic = 0 0 0

ns.MOFITERMAX=15
                            # and no gravity.

# multigrid class
mg.verbose = 0
cg.verbose = 0
# set above to 2 for maximum verbosity
mg.nu_f = 40
mg.nu_0 = 1   # 1 - v-cycle 2 - w-cycle
cg.maxiter = 9000
mg.bot_atol = 1.0e-12
mg.rtol_b = -0.01
Lp.v = 0


# for 3D:
# amr.n_cell    = 64 32 4
# for 2D:
# amr.n_cell    = 64 32 
amr.n_cell    = 64 32
amr.max_level = 1
ns.post_init_pressure_solve=1
# 0- 1 level 1- 2 levels  2- 3 levels
amr.regrid_int      = 1       # how often to regrid
amr.n_error_buf     = 4 4 4 4 4   # number of buffer cells in error est
amr.grid_eff        = 0.8   # what constitutes an efficient grid
# above was .55 (smaller=> less boxes)
amr.blocking_factor = 2       # block factor in grid generation
amr.check_int       = 2000    # number of timesteps between checkpoints
amr.check_file      = chk     # root name of checkpoint file
amr.plot_int        = 1000    # change to 1000
amr.plot_file       = plt 
amr.grid_log        = grdlog  # name of grid logging file
amr.max_grid_size   = 512     # 32 for parallel computing
#amr.restart         = chk08000
#amr.trace   =1

# ------------------  INPUTS TO PHYSICS CLASS -------------------
ns.dt_cutoff      = 1.0e-10  # level 0 timestep below which we halt

mac.mac_abs_tol    = 1.0e-10

ns.cfl            = 0.5      # cfl number for hyperbolic system
ns.init_shrink    = 0.1      
ns.change_max=1.01     
ns.visc_coef      = 1.0      # Re=rho L U/mu  L=1  U=1
ns.gravity        = 0.0   # Fr=U^2/gL L=1  
# water is material 1 and it is dispersed phase
# mineral oil is material 2 and it is continuous phase
# We=rho L U^2/sigma  
# 1 mN/m=1E-3 N/m=1E-3 kg /s^2 =1 g/s^2=1 dyne/cm
# sigma_og=28 dyne/cm
# sigma_gs-sigma_os=sigma_og cos(40)=21.4
# sigma_gs-sigma_ws=sigma_wg cos(110)=-25.0
# sigma_os-sigma_ws=sigma_ow cos(theta)
# -25.0-21.4=50 cos(theta) theta=180-22=158
# sigma_os-sigma_ws=50 cos(158)=-46
# assume sigma_ws=50
# sigma_os=50-46=4
# sigma_ow sigma_ws sigma_os
# costheta=(ten23-ten13)/ten12=(4-50)/50=-0.92
# 50,50,1 if no surfactant
# 5.0, 5.0, 0.1 if surfactant
ns.tension        = 50.0 50.0 0.0  # if 50 dyne/cm, 4.0=157 2.0=164 1.0=169
ns.capillary_artificial_viscosity=0.0 0.0 0.0  
#ns.fixed_dt	  = 1.0e-5   # hardwire dt
ns.sum_interval   = 20      # timesteps between computing mass 

ns.axis_dir=4  # 0 = prism (Roper) 3=simple (Roper)  4=simple (Roper 2013)
ns.vorterr=999999.0
ns.rgasinlet=1.57
ns.twall=0.1
# note: tension=50
# Q=1 microliter/minute
# cross section area is 0.00975cm x 0.0085 cm=8.2875E-5 cm^2
# 1 liter=1000cm^3  1 kg/L=1000 g/L=1 g/cm^3
# 1microliter=0.001 cm^3
# Q=0.001 cm^3/minute=0.001 cm^3/(60 seconds)=1.66667E-5 cm^3/s
# U=Q/A=1.66667E-5/8.2875E-5=0.201 cm/s
# water is dispersed phase, oil is continuous phase.
# capillary number=mu_c U_c/sigma
# phi=y-yblob
# 1/1 experiments: Q_water/Q_oil=1.24
# 1/1 microliter/min  water inflow: 0.201  oil inflow: 0.162
# 1/2 experiments: Q_water/Q_oil=0.642
# 1/2 microliter/min  water inflow: 0.201  oil inflow: 0.313
# 0.5/1 experiments: Q_water/Q_oil=0.675
# 0.5/1 microliter/min  water inflow: 0.101  oil inflow: 0.149
ns.advbot=-0.201 # inflow velocity of water from yhi position
ns.min_velocity_for_dt=2.0
ns.adv_vel=0.0    # make this zero otherwise all 6 walls will have this.
ns.vinletgas=0.162 # inflow velocity of oil from the xlo position
ns.adv_dir=1       # inflow in x-direction
ns.material_type=0 0 999
# 1 N s/m^2 = 1 Pa s = 10 Poise
# 1 dyne s/cm^2 = 1 (g cm/s^2) s/cm^2=1 g/(s cm)=(1/1000) kg/(cm s)
# = (1/10) N s/m^2    1 N s/m^2=10 Poise=10 dyne s/cm^2  1poise=1dyne s/cm^2 
# 0.051 viscosity of perfluorodecalin (continuous phase) (5.1 mPa/s)
# 0.153 viscosity of mineral oil (continuous phase) (15.3 cP)
ns.viscconst=0.01 0.153 0.153  # viscosity of water g/(cm s)  Re=rho L U/mu
# 1.917 density of perfluorodecalin (oil, continuous)
# 0.82-0.88 kg/L density of mineral oil (oil, continuous)
ns.denconst=1.0 0.85 1.0 # density of water (dispersed)
ns.pressure_error_cutoff=0.0 0.0 0.0
ns.heatviscconst=0.0 0.0 0.0
ns.tempconst=293.0 293.0 293.0
ns.xblob=0.0
# phi=y-yblob
ns.yblob=0.055  # initial location of oil/water interface L=1
ns.zblob=0.0
ns.radblob=0.0
ns.yblob2=0.04025  # ylo,yhi,zlo,zhi of continuous (oil) inflow.
ns.yblob3=0.05  # midpoint of 85 micron taper and 110 micron base 
ns.zblob2=-0.00425
ns.zblob3=0.00425
ns.xblob2=-0.00975  #  xlo,xhi of dispersed (water) inflow
ns.xblob3=0.0
ns.xblob4=0.04
ns.radblob4=0.014625
ns.denfact=1.0
ns.velfact=0.0
ns.probtype=5700
ns.v=1

# ----------------  PROBLEM DEPENDENT INPUTS
# for 3D:
#ns.lo_bc          = 1 5 3
#ns.hi_bc          = 2 1 5
#for 2D:
#ns.lo_bc          = 1 5 
#ns.hi_bc          = 2 1 

ns.lo_bc          = 1 5 
ns.hi_bc          = 2 1 

# >>>>>>>>>>>>>  BC FLAGS <<<<<<<<<<<<<<<<
# 0 = Interior           3 = Symmetry
# 1 = Inflow             4 = SlipWall
# 2 = Outflow            5 = NoSlipWall

# turn any of these on to generate run-time timing stats


# select single or double precision of FAB output data
#        default is whatever precision code is compiled with.
#fab.precision = FLOAT     # output in FLOAT or DOUBLE
fab.precision = DOUBLE    # output in FLOAT or DOUBLE
