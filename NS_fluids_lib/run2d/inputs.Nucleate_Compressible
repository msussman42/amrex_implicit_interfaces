# Figure 2:
# "Direct Numerical Simulations of Flows with Phase Change"
# Tryggvason and Lu, Procedia IUTAM volume 15, 2015, 2-13
#
# Options for microscale model:
# 1. the null model:
#   ns.microlayer_size=0.0 ... 0.0
#   ns.yblob3>0.0  (initial thermal layer)
#   ns.solidheat_flag=1 (dirichlet temperature BC at fluid/solid interface)
# 2. triple point model:
#   ns.macrolayer_size>ns.microlayer_size>0.0, ns.microlayer_substrate and
#   ns.microlayer_angle set accordingly.
# 3. the smoothed temperature model:
#   ns.microlayer_size=0.0 ... 0.0
#   ns.yblob3=1.0e-10 (initial thermal layer size very close to zero)
#   ns.solidheat_flag=0 (diffuse in solid)
#   ns.initial_temperature=saturation temperature in the solid
#   ns.initial_temperature_diffuse_duration>0.0 (artificial time to
#    solve just the heat equation at t=0.0)
# FOR COMPRESSIBLE SIMULATIONS, ALL UNITS MUST BE CGS (NOT MKS)
max_step  =  9999999    # maximum timestep
stop_time = 5.0

geometry.coord_sys      = 1        # 0 => cart, 1 => RZ
# vertical coordinant low value must be zero
geometry.prob_lo   =  0.0 0.0
geometry.prob_hi   =  0.4 0.8   # CGS
ns.constant_viscosity=0
ns.num_divu_outer_sweeps=2  # 1=INCOMP  2=COMP
ns.EILE_flag=-1
ns.continuous_mof=2
ns.MOFITERMAX=15
ns.minimum_relative_error=1.0e-22
ns.diffusion_minimum_relative_error=1.0e-11
#number of Jacobi method cycles elliptic solver initially does.
ns.initial_project_cycles=3
ns.initial_cg_cycles=3
ns.project_solver_type=0 # 0MGPCG 1PCG 2 MINV=I
ns.projection_pressure_scale=1.0e+6  
ns.num_materials=3 # 1: liquid 2: vapor 3: solid
ns.num_species_var=0
ns.post_init_pressure_solve=1

# multigrid class
mg.verbose = 0
cg.verbose = 0
# set above to 2 for maximum verbosity
mg.nu_f = 40
mg.nu_0 = 1   # 1 - v-cycle 2 - w-cycle
cg.maxiter = 400
mg.bot_atol = 1.0e-12
mg.rtol_b = -0.01
Lp.v = 0

amr.plotfile_on_restart=1
#ns.visual_revolve=32
ns.output_drop_distribution=1

amr.n_cell    = 32 64
amr.max_level =  0
# gas/liquid and gas/solid interfaces are always adapted.
# liquid/solid interface with no gas nearby is not adapted.
ns.ns_tiling=false
fabarray.mfiter_tile_size=16 16
#amr.max_level =  0
# 0- 1 level 1- 2 levels  2- 3 levels
amr.n_error_buf     = 4 4 4 4 4 4 4  # number of buffer cells in error est
amr.grid_eff        = 0.7   # what constitutes an efficient grid
# above was .55 (smaller=> less boxes)
amr.blocking_factor = 8 8 8 8 8 8 8    # block factor in grid generation
amr.space_blocking_factor = 1 1 1 1 1 1
amr.time_blocking_factor=1
ns.num_SDC_outer_sweeps=1
ns.enable_spectral=0
ns.diffusion_enable_spectral=0
amr.regrid_int      = 1       # how often to regrid
amr.check_int       = 1000    # number of timesteps between checkpoints
amr.check_file      = chk    # root name of checkpoint file
amr.plot_int        = 10 # 500
amr.plot_file       = plt 
amr.grid_log        = grdlog  # name of grid logging file
amr.max_grid_size   = 1024
#amr.restart         = chk1000
#amr.trace   =1

# ------------------  INPUTS TO PHYSICS CLASS -------------------
ns.dt_cutoff      = 1.0e-11  # level 0 timestep below which we halt

mac.mac_abs_tol    = 1.0e-10

ns.cfl            = 0.5      # cfl number for hyperbolic system
# 0=take into account sound speed at t=0 only
# 1=always take into account sound speed (recommended if acoustic waves
#   need to be resolved)
# 2=never take into account sound speed
ns.shock_timestep=1 2 0
ns.init_shrink    = 0.5      # scale back initial timestep
ns.change_max     = 1.1    # scale back initial timestep
# viscous force term: rho u_t = visc_coef * div ( 2 mu D)
# mu corresponds to "viscconst"
ns.visc_coef      = 1.0  
ns.visc_abs_tol   = 1.0e-10
# Units: Length/Time^2
ns.gravity        = -39.2 #  dimensional  CGS
# rhohydro+fort_denconst(im)*DrhoDT(im)*(T-fort_tempconst(im))
ns.DrhoDT = -0.0007 0.0 0.0   # units: 1/degree K
# FOR INCOMPRESSIBLE CASE:
# override_density=1 => rho=rho(T,z)
# "default_hydrostatic_pressure_density" called if override_density=1.
# gravity force is grad (-|g| denconst(1) y)/denconst(1) = -|g| 
# rho_liq=denconst(1)+denconst(1)*DrhoDT(1)*(T-tempconst(1))
# FOR COMPRESSIBLE CASE:
# override_density=2
# density determined by conservation law equation.  The initial
# density is determined by making d/dz ( p(rho(z))/rho(z) ) = g
# The gravity term is grad P_hydro(rho_hydro(T,z))/rho_hydro(T,z)
#  (Boussinesq like approximation)
#  (P_hydro=atmospheric pressure at the top of the computational domain)
ns.override_density=2 0 0
# sigma_{SV}-sigma_{SL}=sigma_{LV}cos(theta)
# theta=acos( (sigma_{SV}-sigma_{SL})/sigma_{LV} )
# sigma_{SL}=sigma_{LV}
# sigma_{SV}=(1+cos(theta)) sigma_{LV}
# theta=80 sigma_{SV}/sigma_{LV}=1.17  
# theta=140 sigma_{SV}/sigma{LV}=0.23
# theta=45 sigma_{SV}/sigma_{LV}=1+1/sqrt{2}
# 12 13 23  (LV SL SV)
# N/m (MKS)   Dyne/cm  (CGS)
# (1 kg m/s^2)/m = 1000 g/s^2
ns.tension=58.8 58.8 96.5  # 50 degrees contact angle
# Joule/(kg Kelvin)=erg/(g Kelvin)
# 1 Joule/(kg Kelvin)=1e7 erg/(1000 g Kelvin)=1e4 erg/(g Kelvin)
ns.stiffCP=4217.0e+4 2029.0e+4 4217.0+4
# 12 13 23 21 31 32  (12 liquid->vapor (boiling) 21 vapor->liquid condensate)
# <0 if condensation or solidification
# >0 if boiling or melting
# latent_heat[2*max_num_tension]
# Joule/kg
# 1 joule/kg = (1e7 erg)/(1000 g)=1e4 erg/g
ns.latent_heat=2257e+7 0.0 0.0 0.0 0.0 0.0  
# if latent_heat<>0,
# if nucleation_period==0.0, only nucleate one bubble, 
# if nucleation_period>0.0, periodically nucleate bubbles.
ns.nucleation_period=0.0
ns.saturation_temp=373.0 0.0 0.0 0.0 0.0 0.0
# 0=>conservatuve advection of total energy (rho E is advected)
# 1=>non-conservative advection of total energy (rho T is advected)
ns.temperature_primitive_variable=1 1 1
#ns.fixed_dt	  = 0.1     # hardwire dt
ns.sum_interval   = 1        # timesteps between computing mass 

# axis_dir=5 freezing
# axis_dir=6 boiling (incompressible)
# axis_dir=7 boiling (compressible)
ns.axis_dir=7
ns.xblob3=0.0  # unused
# see subroutine outside_temperature in PROB.F90
# MODEL 1: ns.yblob3=1.2e-3 
# MODEL 2: ns.yblob3=1.0e-10
# MODEL 3: ns.yblob3=1.0e-10
# MODEL 4: ns.yblob3=1.0e-10
# MODEL 5: ns.yblob3=1.0e-10
ns.yblob3=1.0e-10  # initial thermal layer (cm) 
# see subroutine get_internal_heat_source in PROB.F90
# see subroutine microcell_heat_model in PROB.F90
# if zblob3>0, heatcoeff=heatcoeff*dx/zblob3 (where LS_SOLID changes sign)
# if zblob3<0, then heat source in solid cells that adjoin fluid.
# if zblob3<0, then solidheat_flag should be 0. (diffuse in solid)
# if zblob3=0, then Dirichlet BC at z=zlo (no internal heat flux or 
#  other internal BC)
#  solidheat_flag=1 (dirichlet in solid),zblob3>0:
#  microlayer flux is (T-TSOLID)/zblob3 
#
# heat flux in the solid cells that adjoin a fluid cell:
# page 30, Sato Niceno (2015): "heater power maintained at 30kW/m^2"
# rho cp DT/dt=-div q + Q
# Q=(area) * |zblob3|/(volume)=(m^2)(W/m^2)/(m^3)=W/m^3
# for Tryggvason problem: T=383 degrees at the wall.
ns.zblob3=0.0
ns.vorterr=0.0 0.0 0.0
ns.rgasinlet=1.57 # not used
ns.vinletgas=0.0
ns.twall=0.0  # not used
ns.advbot=0.0 # initial falling (downward) speed of liquid drop (always 0)
# keep 0.0; see subroutine acoustic_pulse_bc in PROB.F90
ns.adv_vel=0.0 
ns.adv_dir=2 # adv_dir=1 x direction  adv_dir=2 y direction
ns.pressure_error_cutoff=0.0 0.0 0.0 
# material_type==13, 14 => EOS_tait_rhohydro and EOS_air_rho2 are called:
#   gas:
#    p=omega * K * rho * e  
#    K is chosen such that:
#    omega * K * fort_denconst(2) * cv fort_tempconst(2)=p_hydro(yblob)
#    p_hydro: subroutine tait_hydrostatis_pressure_density(y,rho,p)
#     (y is an input, rho,p are outputs)
#   water:
#    rhobar=fort_denconst(1)
#    p=max( ((rho/rhobar)^gamma - 1 )+A), pcav)
ns.material_type=13 14 999
# thermal conductivity: Watts/(meter Kelvin)
# 1 Watt = 1Joule/s =1e7 erg/s
# 1 watt/(meter Kelvin)=1e7/(100 cm Kelvin)=1e5 erg/(s cm Kelvin)
ns.heatviscconst=0.680e+5 0.0248e+5 0.680e+5
# liquid-vapor, liquid-solid, vapor-solid
# 0.0 means do not use.
#ns.heatviscconst_interface=0.0 2.0 2.0 Sandipan
ns.heatviscconst_interface=0.0 0.0 0.0
# dynamic viscosity Pa * s = N s / m^2
# 1 N=1e+5 dyne  1 N s/m^2=1e+5 dyne s/(1e+4 cm^2)
ns.viscconst=279E-5 12.02e-5 279E-5
# density: kg/m^3=(1000 g)/(1e+6 cm^3)=(1/1000) g/cm^3
ns.denconst=0.958 0.0005956 0.958
ns.FSI_flag=0 0 1
# 0=diffuse in solid, 1=dirichlet, 2=neumann
# if solidheat_flag=2, then 
#  1. FORT_VISCFLUXFILL is called
#  2. tempfluxsolid might be called.
# MODEL 4: solidheat_flag=0, microlayer_substrate(im_liquid)=im_solid,
#  microlayer_temperature_substrate(im_liquid)=substrate/im_vapor temperature
# MODEL 5: solidheat_flag=2, microlayer_substrate(im_liquid)=im_solid,
#  k grad T dot n=heatviscconst(im_liquid)*
#   (microlayer_temperature_substrate(im_liquid)-TSAT)/
#   macrolayer_size(im_liquid)
# MODEL 2: solidheat_flag=1 dirichlet bc at solid/fluid interface
# MODEL 4: solidheat_flag=0 diffuse in solid
# MODEL 5: solidheat_flag=2 neumann bc at solid/fluid interface
ns.solidheat_flag=1
ns.microlayer_substrate=3 0 0
# microlayer contact angle (radians): 50 degrees
# microscopic contact angle between liquid and substrate    
ns.microlayer_angle=0.872 0.0 0.0
ns.microlayer_size=1.0e-5 0.0 0.0  # cm
# MODEL 2: macrolayer_size==alpha x dx  dx= 0.4/32=1.25e-2 cm
# MODEL 4: macrolayer_size==0.0
# MODEL 5: macrolayer_size==1.0e-2
ns.macrolayer_size=2.5e-2 0.0 0.0
# MODEL 4: 373.0
# MODEL 5: 378.5
ns.microlayer_temperature_substrate=0.0 0.0 0.0

# MODEL 2: superheat=378.5
# MODEL 4: superheat=410.0
# MODEL 5: superheat=378.5
ns.tempconst=373.0 373.0 378.5  # Delta T=378.5-373
ns.initial_temperature=373.0 373.0 378.5
# MODEL 2: initial_temperature_diffuse_duration=0.0
# MODEL 4: initial_temperature_diffuse_duration=6.0
# MODEL 5: initial_temperature_diffuse_duration=6.0
ns.initial_temperature_diffuse_duration=0.0
ns.tempcutoff=373.0 373.0 373.0 
ns.tempcutoffmax=500.0 500.0 500.0 
#(xblob,yblob)=center of vapor bubble
ns.xblob=0.0  
# initial contact angle is sensitive to the vertical coordinate.
# vertical coordinate: z=z_substrate + delta z  delta z = r cos(theta)
# theta=50 degrees  r=2.0e-1   2.5e-2 + 2e-1 x cos(50)=1.536e-1
ns.yblob=1.536e-1
ns.zblob=0.0
ns.radblob=2.0e-1  # radius of nucleated seed.

ns.n_sites=1
# 4 x n_sites components:
# x,y,z,r, repeats ...
# initial contact angle is sensitive to the vertical coordinate.
ns.pos_sites=0.0 1.536e-1 0.0 2.0e-1 

# x,y center of surface of HOT plate (xblob2,yblob2) (inclined)
ns.xblob2=0.0 
ns.yblob2=2.5e-2 # 2 * dxcoarsest=2 * 0.4/32=2.5e-2
ns.zblob2=0.0
ns.radblob2=0.0 # zero degrees incline (radians)
ns.radblob3=0.0
ns.denfact=1.0
ns.velfact=0.0
#probtype=42 is bubble jetting case - good example to follow for some things.
ns.probtype=55
#ns.mem_debug = 1
#ns.v = 1
#ns.d = 1
# 0=dirichlet at inflow
# 1=dirichlet at inflow and outflow
# 2=dirichlet at inflow and walls.
# 3=dirichlet at inflow, outflow, and walls.
ns.prescribe_temperature_outflow=3

#ns.lo_bc          = 3 3  # this option if heat source
ns.lo_bc          = 3 5
ns.hi_bc          = 2 1

# >>>>>>>>>>>>>  BC FLAGS <<<<<<<<<<<<<<<<
# 0 = Interior           3 = Symmetry
# 1 = Inflow             4 = SlipWall
# 2 = Outflow            5 = NoSlipWall

# turn any of these on to generate run-time timing stats


# select single or double precision of FAB output data
#        default is whatever precision code is compiled with.
#fab.precision = FLOAT     # output in FLOAT or DOUBLE
fab.precision = DOUBLE    # output in FLOAT or DOUBLE

