max_step  =  99999    # maximum timestep
#max_step  =  2    # maximum timestep
#rescale: R=0.2 cm 
# tau=rho CP R^2/K=(1)4.1855e+7(0.2)^2/58000
# tau=28.9
# U=R/tau=.2/28.9=0.007
# PR=CP mu/K=4.1855e+7 0.02/58000=14.4
# ST=(TSAT-TCOLD)CP/L=20(4.1855e+7)/3.34e+9=.25
# BO=rho g R^2/sigma=1(980)(.2^2)/72.8=0.54
# WE=rho U^2 R/sigma=.007^2 (.2)/72.8=1.4e-7
# U=R/(rho CP R^2/K)=K/(rho CP R)
# WE=(1/sigma) rho R K^2 /(rho CP R)^2 = K^2/(sigma rho R CP^2)

stop_time = 1.0

# ------------------  INPUTS TO CLASS AMR ---------------------
# set up for bubble
geometry.coord_sys      = 1        # 0 => cart, 1 => RZ
geometry.prob_lo   =  0.0 0.0
geometry.prob_hi   =  2.5 2.5
ns.minimum_relative_error=1.0e-22
ns.initial_project_cycles=20 # initial jacobi cycles
ns.initial_cg_cycles=20
ns.project_solver_type=0 # 0MGPCG 1PCG 2 MINV=I
ns.projection_pressure_scale=1.0e+6
ns.num_materials=3 # 1: liquid 2: air 3: ice
ns.num_species_var=0
ns.post_init_pressure_solve=1 
ns.MOFITERMAX=15

# multigrid class
mg.verbose = 0
cg.verbose = 0
# set above to 2 for maximum verbosity
mg.nu_f = 40
mg.nu_0 = 1   # 1 - v-cycle 2 - w-cycle
cg.maxiter = 400
mg.bot_atol = 1.0e-12
mg.rtol_b = -0.01
Lp.v = 0

amr.plotfile_on_restart=1
#ns.visual_revolve=32

amr.n_cell    = 32 32
amr.max_level =  2  
# 0- 1 level 1- 2 levels  2- 3 levels
amr.regrid_int      = 1       # how often to regrid
amr.n_error_buf     = 4 4 4 4 4   # number of buffer cells in error est
amr.grid_eff        = 0.8   # what constitutes an efficient grid
# above was .55 (smaller=> less boxes)
amr.blocking_factor = 4       # block factor in grid generation
amr.check_int       = 1000      # number of timesteps between checkpoints
amr.check_file      = chk     # root name of checkpoint file
amr.plot_int        = 1000
amr.plot_file       = plt 
amr.grid_log        = grdlog  # name of grid logging file
amr.max_grid_size   = 1024
#amr.restart         = chk00400
#amr.trace   =1

# ------------------  INPUTS TO PHYSICS CLASS -------------------
ns.dt_cutoff      = 1.0e-11  # level 0 timestep below which we halt

mac.mac_abs_tol    = 1.0e-10

ns.cfl            = 0.5      # cfl number for hyperbolic system
ns.init_shrink    = 1.0      # scale back initial timestep
ns.change_max     = 1.1 
ns.visc_coef      = 14.4     # Prandtl
mac.visc_abs_tol   = 1.0e-10
ns.gravity        = 0.0     
# sigma_{SV}-sigma_{SL}=sigma_{LV}cos(theta)
# material 1=liquid 2=gas  3=ice
ns.tension = 71430.0 25410.0 71430.0 # 12 - liquid/vapor
ns.stiffCP=1.0 0.24 0.5  # dimensionless
#ns.latent_heat = -3.34e+9 0.0 # 12,21 liquid-> ice, ice -> liquid FREEZING
# <0 if condensation or solidification
# >0 if boiling or melting
# latent_heat[2*max_num_tension]
# if -0.4 then STEFAN NUMBER=2.5
ns.latent_heat = 0.0 -0.4 0.0 0.0 0.0 0.0 #12 13 23 21 31 32 
# 1->2 liquid-> gas
# 1->3 liquid->ice 
# 2->3 gas->ice 
ns.saturation_temp = 0.0  273.0  0.0 0.0 0.0 0.0 # 12,13,23 21 31 32 
# 
ns.temperature_primitive_variable=1 1 1 1
#ns.fixed_dt	  = 0.01     # hardwire dt
ns.sum_interval   = 10       # timesteps between computing mass 

ns.axis_dir=1   #  drop falling onto ice (probtype=55)
ns.vorterr=0.0 0.0 0.0
ns.rgasinlet=1.57
ns.vinletgas=0.0
ns.twall=263  # not used
# initial falling (downward) speed of liquid drop
# u=U u^{*}  u^{*}=u/U=2.0/0.007=286.0
ns.advbot=286.0
ns.adv_vel=0.0 # keep 0.0
ns.adv_dir=1 # adv_dir=1 x direction  adv_dir=2 y direction   
ns.pressure_error_cutoff=0.0 0.0 0.0
ns.material_type=0 0 0 
# 1 Watt=10^7 ERG/S
# 1 W/(M K)=10^5 ERG/(S CM K)
# 1 ERG= 1 (gram cm^2/s^2)
# air: k=0.024 W/(M K)
# water: k=0.58 W/(M K)
# cp hardwired to be 4.1855E+7 (all incompressible materials)
#ns.heatviscconst=58000.0 0.0 218000.0 # liquid/air/ice 
ns.heatviscconst=1.0 0.04 3.8 # liquid/air/ice 
# diffusivity liquid/ice this problem does not inlucde air
#ns.viscconst=0.02 0.0001 100.0
ns.viscconst=1.0 0.005 1.0
ns.denconst=1.0 0.000623  0.934 
ns.FSI_flag=0 0 3
#dimensionless: (supercooled droplets)
ns.tempconst=272.0 272.0 273.0 # initial temperature of liquid/gas/ice
ns.xblob=0.0  # center of water drop
ns.yblob=1.4
ns.zblob=0.0
ns.xblob2=0.0  # center of ice surface
ns.yblob2=0.15  
ns.zblob2=0.15  
ns.radblob2=0.0 # aspect=tan(radblob2)
ns.radblob3=0.0 # always 0 if axis_dir=1
ns.xblob5=0.0 # center of second drop
ns.yblob5=0.0 
ns.radblob=1.0
ns.radblob5=0.0
ns.denfact=1.0
ns.velfact=0.0
ns.probtype=55

#ns.mem_debug = 1
#ns.v = 1
#ns.d = 1

# ----------------  PROBLEM DEPENDENT INPUTS
# boundary conditions 
#ns.prescribe_temperature_outflow=0 # =0 for stefan problem
#ns.prescribe_temperature_outflow=1 # =1 for sucking problem
ns.prescribe_temperature_outflow=1 # =1 for sucking problem
ns.lo_bc          = 3 5
ns.hi_bc          = 3 2

# >>>>>>>>>>>>>  BC FLAGS <<<<<<<<<<<<<<<<
# 0 = Interior           3 = Symmetry
# 1 = Inflow             4 = SlipWall
# 2 = Outflow            5 = NoSlipWall

# turn any of these on to generate run-time timing stats


# select single or double precision of FAB output data
#        default is whatever precision code is compiled with.
#fab.precision = FLOAT     # output in FLOAT or DOUBLE
fab.precision = DOUBLE    # output in FLOAT or DOUBLE

