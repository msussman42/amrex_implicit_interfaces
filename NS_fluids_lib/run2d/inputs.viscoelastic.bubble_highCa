# non dimensionalize by the radius radblob=1
# DE=V lambda/D=1.2 * 8 / 2 = 4.8  lambda=elastic_time
# L=10   1/L=polymer_factor
# M=grav * eta_S^4(rho_S-rho_G)/(rho_S^2 sigma^3)=
#  6.1 * 0.7^4 * 1/ 0.25^3=94
# E0=g(rho_S-rho_G)D^2/sigma=6.1 * 1 * 4/.25=97.6
# c=0.1  elastic_viscosity=0.07
# if tension=1, viscconst=2.0, elastic_viscosity=0.2, then:
# M=6.1 * 2^4 * 1/1^3=98
# E0=6.1 * 1* 4/1 =24.4
max_step  =  99999    # maximum timestep
#max_step  =  2    # maximum timestep
stop_time =  5.0   # maximum problem time

# ------------------  INPUTS TO CLASS AMR ---------------------
# set up for bubble
# M.OHTA 0=XYZ 1=RZ
geometry.coord_sys      = 1        # 0 => cart, 1 => RZ
geometry.prob_lo   =  0.0 0.0
geometry.prob_hi   =  4.0 12.0

# 0MGPCG 1PCG 2 MINV=I
ns.project_solver_type=0
Lp.smooth_type=2
Lp.bottom_smooth_type=2
Lp.gpucount=1

# multigrid class
#mg.verbose = 1
#cg.verbose = 1
# set above to 2 for maximum verbosity
mg.nu_f = 40
mg.nu_0 = 1   # 1 - v-cycle 2 - w-cycle
cg.maxiter = 200
mg.bot_atol = 1.0e-8
mg.rtol_b = -0.01
#Lp.v = 1

ns.num_materials=2
ns.num_species_var=0
ns.minimum_relative_error=1.0e-18
# M.OHTA: scale set in order that initial residual O(1)
ns.projection_pressure_scale=10000.0
# M.OHTA use LS height function technique
# M.OHTA 2 should be ok, 3 is conservative choice

# M.OHTA 1 is faster and works well with new version
# water is 2nd order, gas is 1st order (both first order is ok too)
# configuration tensor order is first order for Q regardless of advection_order
ns.advection_order=2 1
# recommend minmod limiter=1 (versus no limiter=0 - very dispersive)
ns.slope_limiter_option=1

ns.initial_project_cycles=10  # number of initial jacobi iterations
ns.initial_cg_cycles=10  # number of MGPCG steps to do in order to get

amr.n_cell    = 32 96
amr.max_level = 2
# 0- 1 level 1- 2 levels  2- 3 levels
amr.regrid_int      = 1       # how often to regrid
amr.n_error_buf     = 4 4 4 4 4    # number of buffer cells in error est
amr.grid_eff        = 0.70   # what constitutes an efficient grid
# above was .55 (smaller=> less boxes)
amr.blocking_factor = 8     # block factor in grid generation
amr.check_int       = 100    # number of timesteps between checkpoints
amr.check_file      = chk     # root name of checkpoint file
amr.plot_int        = 100
amr.plot_file       = plt 
amr.grid_log        = grdlog  # name of grid logging file
amr.max_grid_size   = 512
#amr.restart         = chk1300
#amr.trace   =1

# ------------------  INPUTS TO PHYSICS CLASS -------------------
ns.dt_cutoff      = 0.000005  # level 0 timestep below which we halt

mac.mac_tol        = 1.0e-6  # tolerence for mac projections
mac.mac_abs_tol    = 1.0e-6


ns.visual_option=-2
# M.OHTA this option not used in 3d since output files already 
# binary format.
# I set to 2 for debugging RZ

# M.OHTA: ns.is_viscoelastic=1 not used anymore
# M.OHTA: For the liquid, since beta>0,
#   liquid viscosity coefficient is,
#    visc_coef*( etaL-etaP+etaP*[1+(beta*gamma_dot)**alpha]**( (n-1)/alpha ) )
#   (etaL=viscconst, etaP=elastic_viscosity, etaS=etaL-etaP)
#
# M.OHTA: relaxation time for gas=0
ns.elastic_time=8.0 0.0     # relaxation time or Deborah number
# c*eta_solvent or c*eta_solvent/(eta_total*Re)
# M.OHTA: elastic_viscosity for gas=0
# M.OHTA: viscoelastic force is mu2 * div Q / rho  where
# mu2=visc_coef*etaP*[1+(beta*gamma_dot)**alpha]**( (n-1)/alpha )/mod_time
ns.elastic_viscosity=0.07 0.0  # c=0.1
# M.OHTA: polymer_factor=0 for gas.
# mod_time=elastic_time*(1-trace(A)/L^2)  A=Q+I
ns.polymer_factor=0.1 0.0       # parameter, 1/L
# M.OHTA: Carreau_alpha=0 for gas.
ns.Carreau_alpha=0.0 0.0
# M.OHTA: Carreau_beta=0 for gas.
ns.Carreau_beta=0.0 0.0
# M.OHTA: Carreau_n=0 for gas.
ns.Carreau_n=0.0 0.0

ns.cfl            = 0.5      # cfl number for hyperbolic system
ns.init_shrink    = 1.0     # scale back initial timestep
ns.change_max     = 1.1      # scale back initial timestep
ns.visc_coef      = 1.0     # coef of viscosity
mac.visc_abs_tol   = 1.0e-8
ns.gravity        = -6.133   # 1 m/s^2 = 100 cm/s^2 if scale pressure by 10^6
                             # and velocity by 10^3 and time by 10^-3, then
                             # gravity,surface tension mult by 10^-6
                             # viscosity mult by 10^-3
# M.OHTA set use_lsa=0 to be conservative
ns.use_lsa=0
# tension=1/4 => M=94 E0=98
# tension=1,viscconst=2,elastic_viscosity=0.2 => M=98, E0=24
ns.tension        = 0.25   # interfacial tension force 1 N/m = 1000 dyne/cm
#ns.fixed_dt	  = 0.0025     # hardwire dt
ns.sum_interval   = 1        # timesteps between computing mass 

ns.axis_dir=0
ns.vorterr=0.0 0.0
ns.rgasinlet=1.57
ns.vinletgas=0.0
ns.twall=0.1
ns.advbot=0.0
ns.adv_vel=0.0
# M.OHTA adv_dir=2 RZ adv_dir=3 XYZ
ns.adv_dir=2
ns.heatviscconst=0.0 0.0
ns.viscconst=0.7 0.007 # 1 kg/(m s) = 10 g/(cm s)
ns.denconst=1.0 0.001
ns.tempconst=293.0 293.0
ns.material_type=0 0
ns.pressure_error_cutoff=0.0 0.0

ns.xblob=0.0
ns.yblob=2.0
ns.zblob=2.0
ns.radblob=1.0
ns.denfact=1.0
ns.velfact=0.0
ns.probtype=36

proj.bogus_value = 5.0e+5

#ns.mem_debug = 1
#ns.v = 1
#ns.d = 1

# ----------------  PROBLEM DEPENDENT INPUTS
ns.lo_bc          = 3 4
ns.hi_bc          = 4 4

# >>>>>>>>>>>>>  BC FLAGS <<<<<<<<<<<<<<<<
# 0 = Interior           3 = Symmetry
# 1 = Inflow             4 = SlipWall
# 2 = Outflow            5 = NoSlipWall

# turn any of these on to generate run-time timing stats


# select single or double precision of FAB output data
#        default is whatever precision code is compiled with.
#fab.precision = FLOAT     # output in FLOAT or DOUBLE
fab.precision = DOUBLE    # output in FLOAT or DOUBLE

# --------------------------------------------------------------------
# -----       CONTOUR PLOTTING ONLY AVAILABLE IN 2-D           -------
# --------------------------------------------------------------------
# uncomment the next line to set a default level for contour plotting
# contour.level = 1
#
# These variables control interactive contour plotting on UNIX systems
# file_name   = root name of postscript file (will be appended with ".ps")
# var_name    = name of thermodynamic variable to plot
# device      = 1  => XWINDOW, 2 = POSTSCRIPT, 3 = both
# freq        = intervals between plots (-1 = off)
# n_cont      = number of contour lines per plot
# sho_grd     = 0 => don't show grid placement, 1 => show grid placement
#               2 => show grid placement and overlay velocity vector plot
#               3 => same as 2 except show Up and not Ud
# win_siz     = number of pixels in max window direction
#
#      file_name  var_name device freq n_cont sho_grd win_siz sval sdir sstr
contour.verbose = 1
contour.plot = triple triple    1       1     -1     2   600  1.0E-10 -1  0
contour.plot = trace  trace     1       1     10     2   400  1.0E-10 -1  0
contour.plot = magq  magq       1       1     10     2   400  1.0E-10 -1  0
contour.plot = triple triple    2       50     -1     2  400  1.0E-10 -1  0
contour.plot = trace  trace     2       50     10     2   400  1.0E-10 -1  0
contour.plot = magq  magq       2       50     10     2   400  1.0E-10 -1  0
#contour.plot = presliquid presliquid  1   1  20  2      600  1.0E-10 -1  0
#contour.plot = vpresliquid vpresliquid  1  1 20  2      600  1.0E-10 -1  0
#contour.plot = denliquid denliquid  1    1   20  2      600  1.0E-10 -1  0
#contour.plot = vdenliquid vdenliquid  1  1   20  2      600  1.0E-10 -1  0

