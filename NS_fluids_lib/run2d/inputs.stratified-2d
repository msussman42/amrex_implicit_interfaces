# ------------------  INPUTS TO MAIN PROGRAM  -------------------
# CHANGES FROM PAST VERSION:
# no more raster stuff (hdf), add mac.mac_abs_tol
# blob.* now becomes ns.*
#
max_step  =  99999    # maximum timestep
#max_step  =  2    # maximum timestep
stop_time =  300  # maximum problem time

# ------------------  INPUTS TO CLASS AMR ---------------------
# set up for bubble
geometry.coord_sys      = 1       # 0 => cart, 1 => RZ
geometry.prob_lo   =  0.0 0.0
geometry.prob_hi   =  3.0 12.0  # 4,4,8 XYZ  2,8 => RZ
geometry.is_periodic = 0 0 0     

# 0MGPCG 1PCG 2 MINV=I
ns.project_solver_type=0

# multigrid class
#mg.verbose = 1
#cg.verbose = 1
# set above to 2 for maximum verbosity
mg.nu_f = 40
mg.nu_0 = 1   # 1 - v-cycle 2 - w-cycle
cg.maxiter = 200
mg.bot_atol = 1.0e-10
mg.rtol_b = -0.01
#Lp.v = 1

ns.num_materials=3
ns.num_species_var=0



ns.minimum_relative_error=1.0e-18
# M.OHTA: scaling set so that initial pressure solve residual ~O(1)
ns.projection_pressure_scale=1.0e+6
ns.initial_project_cycles=10  # number of initial jacobi iterations
ns.initial_cg_cycles=10  # number of MGPCG steps to do in order to get
                         # decent sized residual.
amr.n_cell    = 64 256  # 16 16 32 XYZ 8 32 RZ
amr.max_level = 1
# 0- 1 level 1- 2 levels  2- 3 levels
amr.regrid_int      = 1       # how often to regrid
# M.OHTA n_error_buf changed from 2 to 4.
amr.n_error_buf     = 4 4 4 4 4   # number of buffer cells in error est
amr.grid_eff        = 0.85   # what constitutes an efficient grid
# above was .55 (smaller=> less boxes)
amr.blocking_factor = 2       # block factor in grid generation
amr.check_int       = 500     # number of timesteps between checkpoints
amr.check_file      = chk     # root name of checkpoint file
amr.plot_int        = 100
amr.plot_file       = plt 
amr.grid_log        = grdlog  # name of grid logging file
# M.OHTA max_grid_size changed from 16 to 64
amr.max_grid_size   = 64
#amr.restart         = chk00100
#amr.trace   =1

# ------------------  INPUTS TO PHYSICS CLASS -------------------
ns.dt_cutoff      = 0.000005  # level 0 timestep below which we halt

mac.mac_abs_tol    = 1.0e-8

# M.OHTA changed from 1 to 2 for debugging


ns.cfl            = 0.5      # cfl number for hyperbolic system
ns.init_shrink    = 1.0      # scale back initial timestep
ns.change_max=1.01    
ns.visc_coef      = 1.0    # coef of viscosity 0.038
mac.visc_abs_tol   = 1.0e-8
ns.gravity        = -980.0   # -1.321
# 12, 13, 23
# material 2 will be bubble
# if materials 1 and 3 are the same, then sigma_13=0 and
# sigma_12=sigma_23
# since, sigma_{i,j}cos(theta_{i,k})=sigma_{j,k}-sigma_{i,k}
# sigma_12 cos(theta_13)=sigma23-sigma13 theta13=0 degrees
# sigma_21 cos(theta_23)=sigma13-sigma23  theta23=180 degrees
# sigma_23 cos(theta_21)=sigma_31-sigma21  theta_21=180 degrees
#
ns.tension        = 69.4 19.7 20.2 # 0.0025
#ns.fixed_dt	  = 0.0025     # hardwire dt
ns.sum_interval   = 5        # timesteps between computing mass 

ns.axis_dir=0
ns.vorterr=999999.0
ns.rgasinlet=1.57
ns.vinletgas=0.0
ns.twall=0.1
ns.advbot=0.0
ns.adv_vel=0.0
ns.adv_dir=2 # 2 RZ 3 XYZ
ns.heatviscconst=0.0 0.0 0.0 0.0
ns.viscconst=1.002E-2 1.822E-4 9.6E-2  
ns.denconst=0.997 0.001205 0.932 
ns.tempconst=293.0 293.0 293.0 
ns.material_type=0 0 0 
ns.pressure_error_cutoff=0.0 0.0 0.0 
ns.xblob=0.0
ns.yblob=1.0
ns.zblob=1.0  # center (2,2,1) XYZ  (0,1) RZ
ns.zblob2=6.0  # material 1 z<zblob2 material 3 z>zblob2 XYZ or RZ
ns.radblob=0.5
ns.denfact=1.0
ns.velfact=0.0
ns.probtype=201

proj.bogus_value = 5.0e+5
proj.Pcode = 0
#proj.Pcode = 2

#ns.mem_debug = 1
ns.v = 1
#ns.d = 1

# ----------------  PROBLEM DEPENDENT INPUTS
ns.lo_bc          = 3 5  # 4 4 4 XYZ 3 4 RZ
ns.hi_bc          = 5 2  # 4 4 4 XYZ 4 4 RZ

# >>>>>>>>>>>>>  BC FLAGS <<<<<<<<<<<<<<<<
# 0 = Interior           3 = Symmetry
# 1 = Inflow             4 = SlipWall
# 2 = Outflow            5 = NoSlipWall

# turn any of these on to generate run-time timing stats

fab.do_initval=1

# select single or double precision of FAB output data
#        default is whatever precision code is compiled with.
#fab.precision = FLOAT     # output in FLOAT or DOUBLE
fab.precision = DOUBLE    # output in FLOAT or DOUBLE

