#ifndef _PROB_CPP_PARMS_F_H_
#define _PROB_CPP_PARMS_F_H_

#ifdef BL_LANG_FORT

#else

#include "AMReX_ArrayLim.H"

namespace amrex{

  extern "C" {

    void fort_blb_init(
      int* blb_matrix_in,
      int* blb_rhs_in,
      int* blb_vel_in,
      int* blb_int_mom_in,
      int* blb_energy_in,
      int* blb_mass_vel_in,
      int* blb_vol_in,
      int* blb_cen_int_in,
      int* blb_cen_act_in,
      int* blb_perim_in,
      int* blb_perim_mat_in,
      int* blb_triple_perim_in,
      int* blb_cell_cnt_in,
      int* blb_cellvol_cnt_in,
      int* blb_mass_in,
      int* blb_pres_in,
      int* blb_secondmoment_in,
      int* num_elements_blobclass_in);

      // called from NavierStokes.cpp: void fortran_deallocate_parameters()
     void fort_deallocate_module( );

      // called from NavierStokes.cpp: void fortran_parameters() and
      // NavierStokes.cpp: NavierStokes::read_params()
     void fort_mof_ordering_override(
       int* mof_ordering_local,
       int* mof_error_ordering_local,
       int* FSI_flag_temp);

      // called from NavierStokes.cpp: void fortran_parameters()
     void fort_override(
       const int* cc_int_size,
       const int* max_level,
       const int* n_cell,
       const int* bfact_space_order,
       const int* bfact_time_order,
       const int* prescribe_temperature_outflow,
       const int* solidheat_flag,
       const int* rz_flag,
       const int* FSI_flag,
       const int* num_local_aux_grids,
       const int* ZEYU_DCA_SELECT,
       const Real* denfact,
       const Real* velfact,
       int* n_sites,
       const Real* nucleation_init_time,
       Real* pos_sites,
       const Real* xblob,const Real* yblob,
       const Real* zblob,const Real* radblob,
       const Real* xblob2,const Real* yblob2,
       const Real* zblob2,const Real* radblob2,
       const Real* xblob3,const Real* yblob3,
       const Real* zblob3,const Real* radblob3,
       const Real* xblob4,const Real* yblob4,
       const Real* zblob4,const Real* radblob4,
       const Real* xblob5,const Real* yblob5,
       const Real* zblob5,const Real* radblob5,
       const Real* xblob6,const Real* yblob6,
       const Real* zblob6,const Real* radblob6,
       const Real* xblob7,const Real* yblob7,
       const Real* zblob7,const Real* radblob7,
       const Real* xblob8,const Real* yblob8,
       const Real* zblob8,const Real* radblob8,
       const Real* xblob9,const Real* yblob9,
       const Real* zblob9,const Real* radblob9,
       const Real* xblob10,const Real* yblob10,
       const Real* zblob10,const Real* radblob10,
       const Real* xactive,
       const Real* yactive,
       const Real* zactive,
       const Real* ractivex,
       const Real* ractivey,
       const Real* ractivez,
       const int* probtype,
       const int* adv_dir,
       const Real* adv_vel,
       const int* axis_dir,
       const Real* rgasinlet,
       const Real* vinletgas,
       const Real* twall,
       const Real* advbot,
       const Real* inflow_pressure,
       const Real* outflow_pressure,
       const Real* period_time,
       Real* problox,Real* probloy,Real* probloz,
       Real* probhix,Real* probhiy,Real* probhiz,
       int* num_species_var,
       int* num_materials_viscoelastic,
       int* num_state_material, 
       int* num_state_base, 
       int* ngeom_raw,
       int* ngeom_recon,
       int* cpp_num_materials,
       int* material_type,
       int* material_type_interface,
       int* conserve_total_energy,
       int* cpp_num_interfaces,
       Real* DrhoDT,
       Real* tempconst,
       Real* initial_temperature,
       Real* tempcutoff,
       Real* tempcutoffmax,
       Real* stiffPINF,
       Real* R_Palmore_Desjardins,
       Real* stiffCP,
       Real* stiffCV,
       Real* stiffGAMMA,
       Real* denconst,
       Real* den_floor,
       Real* den_ceiling,
       Real* cavdenconst,
       Real* viscconst,
       Real* viscconst_eddy_wall,
       Real* viscconst_eddy_bulk,
       Real* heatviscconst_eddy_wall,
       Real* heatviscconst_eddy_bulk,
       Real* thermal_microlayer_size,
       Real* shear_microlayer_size,
       Real* buoyancy_microlayer_size,
       Real* phasechange_microlayer_size,
       int*  viscosity_state_model,
       Real* elastic_viscosity,
       Real* elastic_time,
       int* viscoelastic_model,
       int* store_elastic_data,
       Real* heatflux_factor,
       Real* heatviscconst,
       Real* prerecalesce_heatviscconst,
       Real* prerecalesce_viscconst,
       Real* prerecalesce_stiffCP,
       Real* prerecalesce_stiffCV,
       Real* speciesconst,
       Real* speciesviscconst,
       Real* latent_heat,
       Real* latent_heat_slope,
       Real* latent_heat_T0,
       Real* latent_heat_min,
       Real* saturation_temp,
       Real* reference_pressure,
       Real* molar_mass,
       Real* species_molar_mass,
       Real* tension,
       Real* tension_init,
       Real* tension_slope,
       Real* tension_T0,
       Real* tension_min,
       Real* prefreeze_tension,
       Real* gravity_vector,
       Real* fort_stop_time,
       Real* fort_Carreau_alpha,
       Real* fort_Carreau_beta,
       Real* fort_Carreau_n,
       Real* fort_Carreau_mu_inf,
       int* fort_shear_thinning_fluid,
       Real* fort_polymer_factor,
       Real* fort_concentration,
       Real* fort_etaL,
       Real* fort_etaS,
       Real* fort_etaP,
       Real* fort_visc_coef,
       Real* fort_angular_velocity,
       Real* grid_stretching_parameter,
       int* ioproc);


     void fort_override_MAIN_GLOBALS(
       const int* cc_int_size,
       int* num_species_var,
       int* num_materials_viscoelastic,
       int* num_state_material, 
       int* num_state_base, 
       int* ngeom_raw,
       int* ngeom_recon,
       int* cpp_num_materials,
       int* cpp_num_interfaces,
       int* ioproc);
  }

}/* namespace amrex */

#endif
#endif 
